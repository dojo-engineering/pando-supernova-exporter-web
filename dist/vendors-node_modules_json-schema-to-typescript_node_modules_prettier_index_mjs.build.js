(self.webpackChunk_COMPANY_NAME_EXPORTER_NAME_=self.webpackChunk_COMPANY_NAME_EXPORTER_NAME_||[]).push([["vendors-node_modules_json-schema-to-typescript_node_modules_prettier_index_mjs"],{"./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/e=>{var t,r,n=e.exports={};function u(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===u||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:u}catch(e){t=u}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var o,a=[],c=!1,l=-1;function D(){c&&o&&(c=!1,o.length?a=o.concat(a):l=-1,a.length&&h())}function h(){if(!c){var e=s(D);c=!0;for(var t=a.length;t;){for(o=a,a=[];++l<t;)o&&o[l].run();l=-1,t=a.length}o=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{return r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function d(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];a.push(new p(e,t)),1!==a.length||c||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=d,n.addListener=d,n.once=d,n.off=d,n.removeListener=d,n.removeAllListeners=d,n.emit=d,n.prependListener=d,n.prependOnceListener=d,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},"./node_modules/json-schema-to-typescript/node_modules/prettier/doc.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/json-schema-to-typescript/node_modules/prettier/doc.mjs ***!
  \******************************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{builders:()=>De,default:()=>de,printer:()=>he,utils:()=>pe});var n=Object.defineProperty,u={};((e,t)=>{for(var r in t)n(e,r,{get:t[r],enumerable:!0})})(u,{builders:()=>De,printer:()=>he,utils:()=>pe});var i="string",s="array",o="cursor",a="indent",c="align",l="trim",D="group",h="fill",p="if-break",d="indent-if-break",f="line-suffix",m="line-suffix-boundary",F="line",E="label",g="break-parent",C=new Set([o,a,c,l,D,h,p,d,f,m,F,E,g]);var y=function(e){if("string"==typeof e)return i;if(Array.isArray(e))return s;if(!e)return;const{type:t}=e;return C.has(t)?t:void 0};function A(e){const t=null===e?"null":typeof e;if("string"!==t&&"object"!==t)return`Unexpected doc '${t}', \nExpected it to be 'string' or 'object'.`;if(y(e))throw new Error("doc is valid.");const r=Object.prototype.toString.call(e);if("[object Object]"!==r)return`Unexpected doc '${r}'.`;const n=(u=[...C].map((e=>`'${e}'`)),new Intl.ListFormat("en-US",{type:"disjunction"}).format(u));var u;return`Unexpected doc.type '${e.type}'.\nExpected it to be ${n}.`}var v=class extends Error{name="InvalidDocError";constructor(e){super(A(e)),this.doc=e}},b={};var _=function(e,t,r,n){const u=[e];for(;u.length>0;){const e=u.pop();if(e===b){r(u.pop());continue}r&&u.push(e,b);const C=y(e);if(!C)throw new v(e);if(!1!==(null==t?void 0:t(e)))switch(C){case s:case h:{const t=C===s?e:e.parts;for(let e=t.length-1;e>=0;--e)u.push(t[e]);break}case p:u.push(e.flatContents,e.breakContents);break;case D:if(n&&e.expandedStates)for(let t=e.expandedStates.length-1;t>=0;--t)u.push(e.expandedStates[t]);else u.push(e.contents);break;case c:case a:case d:case E:case f:u.push(e.contents);break;case i:case o:case l:case m:case F:case g:break;default:throw new v(e)}}},w=()=>{},B=w,S=w;function x(e){return B(e),{type:a,contents:e}}function O(e,t){return B(t),{type:c,contents:t,n:e}}function R(e,t={}){return B(e),S(t.expandedStates,!0),{type:D,id:t.id,contents:e,break:Boolean(t.shouldBreak),expandedStates:t.expandedStates}}function T(e){return S(e),{type:h,parts:e}}var k={type:m},I={type:g},N={type:l},L={type:F,hard:!0},j={type:F,hard:!0,literal:!0},P={type:F},$={type:F,soft:!0},M=[L,I],U=[j,I],H={type:o};function G(e,t){B(e),S(t);const r=[];for(let n=0;n<t.length;n++)0!==n&&r.push(e),r.push(t[n]);return r}var W=(e,t,r)=>{if(!e||null!=t)return Array.isArray(t)||"string"==typeof t?t[r<0?t.length+r:r]:t.at(r)},V=(e,t,r,n)=>{if(!e||null!=t)return t.replaceAll?t.replaceAll(r,n):r.global?t.replace(r,n):t.split(r).join(n)};var K=e=>{return!(12288===(t=e)||t>=65281&&t<=65376||t>=65504&&t<=65510||function(e){return e>=4352&&e<=4447||8986===e||8987===e||9001===e||9002===e||e>=9193&&e<=9196||9200===e||9203===e||9725===e||9726===e||9748===e||9749===e||e>=9800&&e<=9811||9855===e||9875===e||9889===e||9898===e||9899===e||9917===e||9918===e||9924===e||9925===e||9934===e||9940===e||9962===e||9970===e||9971===e||9973===e||9978===e||9981===e||9989===e||9994===e||9995===e||10024===e||10060===e||10062===e||e>=10067&&e<=10069||10071===e||e>=10133&&e<=10135||10160===e||10175===e||11035===e||11036===e||11088===e||11093===e||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12771||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=19903||e>=19968&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||94192===e||94193===e||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101632&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||110589===e||110590===e||e>=110592&&e<=110882||110898===e||e>=110928&&e<=110930||110933===e||e>=110948&&e<=110951||e>=110960&&e<=111355||126980===e||127183===e||127374===e||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||127568===e||127569===e||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||127988===e||e>=127992&&e<=128062||128064===e||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||128378===e||128405===e||128406===e||128420===e||e>=128507&&e<=128591||e>=128640&&e<=128709||128716===e||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||128747===e||128748===e||e>=128756&&e<=128764||e>=128992&&e<=129003||129008===e||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129672||e>=129680&&e<=129725||e>=129727&&e<=129733||e>=129742&&e<=129755||e>=129760&&e<=129768||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141}(e));var t},q=/[^\x20-\x7F]/;var Y=function(e){if(!e)return 0;if(!q.test(e))return e.length;e=e.replace(/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g,"  ");let t=0;for(const r of e){const e=r.codePointAt(0);e<=31||e>=127&&e<=159||(e>=768&&e<=879||(t+=K(e)?1:2))}return t};function X(e,t){if("string"==typeof e)return t(e);const r=new Map;return n(e);function n(e){if(r.has(e))return r.get(e);const u=function(e){switch(y(e)){case s:return t(e.map(n));case h:return t({...e,parts:e.parts.map(n)});case p:return t({...e,breakContents:n(e.breakContents),flatContents:n(e.flatContents)});case D:{let{expandedStates:r,contents:u}=e;return r?(r=r.map(n),u=r[0]):u=n(u),t({...e,contents:u,expandedStates:r})}case c:case a:case d:case E:case f:return t({...e,contents:n(e.contents)});case i:case o:case l:case m:case F:case g:return t(e);default:throw new v(e)}}(e);return r.set(e,u),u}}function z(e,t,r){let n=r,u=!1;return _(e,(function(e){if(u)return!1;const r=t(e);void 0!==r&&(u=!0,n=r)})),n}function Q(e){return!(e.type!==D||!e.break)||(!(e.type!==F||!e.hard)||(e.type===g||void 0))}function J(e){if(e.length>0){const t=W(!1,e,-1);t.expandedStates||t.break||(t.break="propagated")}return null}function Z(e){return e.type!==F||e.hard?e.type===p?e.flatContents:e:e.soft?"":" "}function ee(e){for(e=[...e];e.length>=2&&W(!1,e,-2).type===F&&W(!1,e,-1).type===g;)e.length-=2;if(e.length>0){const t=te(W(!1,e,-1));e[e.length-1]=t}return e}function te(e){switch(y(e)){case a:case d:case D:case f:case E:{const t=te(e.contents);return{...e,contents:t}}case p:return{...e,breakContents:te(e.breakContents),flatContents:te(e.flatContents)};case h:return{...e,parts:ee(e.parts)};case s:return ee(e);case i:return e.replace(/[\n\r]*$/,"");case c:case o:case l:case m:case F:case g:break;default:throw new v(e)}return e}function re(e){if(e.type===F)return!0}var ne=Symbol("MODE_BREAK"),ue=Symbol("MODE_FLAT"),ie=Symbol("cursor");function se(e,t){return ae(e,{type:"indent"},t)}function oe(e,t,r){if(t===Number.NEGATIVE_INFINITY)return e.root||{value:"",length:0,queue:[]};if(t<0)return ae(e,{type:"dedent"},r);if(!t)return e;if("root"===t.type)return{...e,root:e};return ae(e,{type:"string"==typeof t?"stringAlign":"numberAlign",n:t},r)}function ae(e,t,r){const n="dedent"===t.type?e.queue.slice(0,-1):[...e.queue,t];let u="",i=0,s=0,o=0;for(const e of n)switch(e.type){case"indent":l(),r.useTabs?a(1):c(r.tabWidth);break;case"stringAlign":l(),u+=e.n,i+=e.n.length;break;case"numberAlign":s+=1,o+=e.n;break;default:throw new Error(`Unexpected type '${e.type}'`)}return D(),{...e,value:u,length:i,queue:n};function a(e){u+="\t".repeat(e),i+=r.tabWidth*e}function c(e){u+=" ".repeat(e),i+=e}function l(){r.useTabs?function(){s>0&&a(s);h()}():D()}function D(){o>0&&c(o),h()}function h(){s=0,o=0}}function ce(e){let t=0,r=0,n=e.length;e:for(;n--;){const u=e[n];if(u!==ie){0;for(let r=u.length-1;r>=0;r--){const i=u[r];if(" "!==i&&"\t"!==i){e[n]=u.slice(0,r+1);break e}t++}}else r++}if(t>0||r>0)for(e.length=n+1;r-- >0;)e.push(ie);return t}function le(e,t,r,n,u,o){if(r===Number.POSITIVE_INFINITY)return!0;let g=t.length;const C=[e],A=[];for(;r>=0;){if(0===C.length){if(0===g)return!0;C.push(t[--g]);continue}const{mode:e,doc:v}=C.pop(),b=y(v);switch(b){case i:A.push(v),r-=Y(v);break;case s:case h:{const t=b===s?v:v.parts;for(let r=t.length-1;r>=0;r--)C.push({mode:e,doc:t[r]});break}case a:case c:case d:case E:C.push({mode:e,doc:v.contents});break;case l:r+=ce(A);break;case D:{if(o&&v.break)return!1;const t=v.break?ne:e,r=v.expandedStates&&t===ne?W(!1,v.expandedStates,-1):v.contents;C.push({mode:t,doc:r});break}case p:{const t=(v.groupId?u[v.groupId]||ue:e)===ne?v.breakContents:v.flatContents;t&&C.push({mode:e,doc:t});break}case F:if(e===ne||v.hard)return!0;v.soft||(A.push(" "),r--);break;case f:n=!0;break;case m:if(n)return!1}}return!1}var De={join:G,line:P,softline:$,hardline:M,literalline:U,group:R,conditionalGroup:function(e,t){return R(e[0],{...t,expandedStates:e})},fill:T,lineSuffix:function(e){return B(e),{type:f,contents:e}},lineSuffixBoundary:k,cursor:H,breakParent:I,ifBreak:function(e,t="",r={}){return B(e),""!==t&&B(t),{type:p,breakContents:e,flatContents:t,groupId:r.groupId}},trim:N,indent:x,indentIfBreak:function(e,t){return B(e),{type:d,contents:e,groupId:t.groupId,negate:t.negate}},align:O,addAlignmentToDoc:function(e,t,r){B(e);let n=e;if(t>0){for(let e=0;e<Math.floor(t/r);++e)n=x(n);n=O(t%r,n),n=O(Number.NEGATIVE_INFINITY,n)}return n},markAsRoot:function(e){return O({type:"root"},e)},dedentToRoot:function(e){return O(Number.NEGATIVE_INFINITY,e)},dedent:function(e){return O(-1,e)},hardlineWithoutBreakParent:L,literallineWithoutBreakParent:j,label:function(e,t){return B(t),e?{type:E,label:e,contents:t}:t},concat:e=>e},he={printDocToString:function(e,t){const r={},n=t.printWidth,u=function(e){switch(e){case"cr":return"\r";case"crlf":return"\r\n";default:return"\n"}}(t.endOfLine);let C=0;const A=[{ind:{value:"",length:0,queue:[]},mode:ne,doc:e}],b=[];let w=!1;const B=[];let S=0;for(!function(e){const t=new Set,r=[];_(e,(function(e){if(e.type===g&&J(r),e.type===D){if(r.push(e),t.has(e))return!1;t.add(e)}}),(function(e){e.type===D&&r.pop().break&&J(r)}),!0)}(e);A.length>0;){const{ind:e,mode:_,doc:O}=A.pop();switch(y(O)){case i:{const e="\n"!==u?V(!1,O,"\n",u):O;b.push(e),A.length>0&&(C+=Y(e));break}case s:for(let t=O.length-1;t>=0;t--)A.push({ind:e,mode:_,doc:O[t]});break;case o:if(S>=2)throw new Error("There are too many 'cursor' in doc.");b.push(ie),S++;break;case a:A.push({ind:se(e,t),mode:_,doc:O.contents});break;case c:A.push({ind:oe(e,O.n,t),mode:_,doc:O.contents});break;case l:C-=ce(b);break;case D:switch(_){case ue:if(!w){A.push({ind:e,mode:O.break?ne:ue,doc:O.contents});break}case ne:{w=!1;const t={ind:e,mode:ue,doc:O.contents},u=n-C,i=B.length>0;if(!O.break&&le(t,A,u,i,r))A.push(t);else if(O.expandedStates){const t=W(!1,O.expandedStates,-1);if(O.break){A.push({ind:e,mode:ne,doc:t});break}for(let n=1;n<O.expandedStates.length+1;n++){if(n>=O.expandedStates.length){A.push({ind:e,mode:ne,doc:t});break}{const t=O.expandedStates[n],s={ind:e,mode:ue,doc:t};if(le(s,A,u,i,r)){A.push(s);break}}}}else A.push({ind:e,mode:ne,doc:O.contents});break}}O.id&&(r[O.id]=W(!1,A,-1).mode);break;case h:{const t=n-C,{parts:u}=O;if(0===u.length)break;const[i,s]=u,o={ind:e,mode:ue,doc:i},a={ind:e,mode:ne,doc:i},c=le(o,[],t,B.length>0,r,!0);if(1===u.length){c?A.push(o):A.push(a);break}const l={ind:e,mode:ue,doc:s},D={ind:e,mode:ne,doc:s};if(2===u.length){c?A.push(l,o):A.push(D,a);break}u.splice(0,2);const h={ind:e,mode:_,doc:T(u)},p=u[0];le({ind:e,mode:ue,doc:[i,s,p]},[],t,B.length>0,r,!0)?A.push(h,l,o):c?A.push(h,D,o):A.push(h,D,a);break}case p:case d:{const t=O.groupId?r[O.groupId]:_;if(t===ne){const t=O.type===p?O.breakContents:O.negate?O.contents:x(O.contents);t&&A.push({ind:e,mode:_,doc:t})}if(t===ue){const t=O.type===p?O.flatContents:O.negate?x(O.contents):O.contents;t&&A.push({ind:e,mode:_,doc:t})}break}case f:B.push({ind:e,mode:_,doc:O.contents});break;case m:B.length>0&&A.push({ind:e,mode:_,doc:L});break;case F:switch(_){case ue:if(!O.hard){O.soft||(b.push(" "),C+=1);break}w=!0;case ne:if(B.length>0){A.push({ind:e,mode:_,doc:O},...B.reverse()),B.length=0;break}O.literal?e.root?(b.push(u,e.root.value),C=e.root.length):(b.push(u),C=0):(C-=ce(b),b.push(u+e.value),C=e.length)}break;case E:A.push({ind:e,mode:_,doc:O.contents});break;case g:break;default:throw new v(O)}0===A.length&&B.length>0&&(A.push(...B.reverse()),B.length=0)}const O=b.indexOf(ie);if(-1!==O){const e=b.indexOf(ie,O+1),t=b.slice(0,O).join(""),r=b.slice(O+1,e).join("");return{formatted:t+r+b.slice(e+1).join(""),cursorNodeStart:t.length,cursorNodeText:r}}return{formatted:b.join("")}}},pe={willBreak:function(e){return z(e,Q,!1)},traverseDoc:_,findInDoc:z,mapDoc:X,removeLines:function(e){return X(e,Z)},stripTrailingHardline:function(e){return te(function(e){return X(e,(e=>function(e){switch(y(e)){case h:if(e.parts.every((e=>""===e)))return"";break;case D:if(!(e.contents||e.id||e.break||e.expandedStates))return"";if(e.contents.type===D&&e.contents.id===e.id&&e.contents.break===e.break&&e.contents.expandedStates===e.expandedStates)return e.contents;break;case c:case a:case d:case f:if(!e.contents)return"";break;case p:if(!e.flatContents&&!e.breakContents)return"";break;case s:{const t=[];for(const r of e){if(!r)continue;const[e,...n]=Array.isArray(r)?r:[r];"string"==typeof e&&"string"==typeof W(!1,t,-1)?t[t.length-1]+=e:t.push(e),t.push(...n)}return 0===t.length?"":1===t.length?t[0]:t}case i:case o:case l:case m:case F:case E:case g:break;default:throw new v(e)}return e}(e)))}(e))},replaceEndOfLine:function(e,t=U){return X(e,(e=>"string"==typeof e?G(t,e.split("\n")):e))},canBreak:function(e){return z(e,re,!1)}},de=u},"./node_modules/json-schema-to-typescript/node_modules/prettier/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/json-schema-to-typescript/node_modules/prettier/index.mjs ***!
  \********************************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{__debug:()=>hD,__internal:()=>DD,check:()=>oD,clearConfigCache:()=>aD,default:()=>pD,doc:()=>c,format:()=>sD,formatWithCursor:()=>iD,getFileInfo:()=>cD,getSupportInfo:()=>lD,resolveConfig:()=>Mo,resolveConfigFile:()=>Uo,util:()=>Wl,version:()=>Gl}),Object(function(){var e=new Error("Cannot find module 'module'");throw e.code="MODULE_NOT_FOUND",e}());var n=r(/*! url */"?ac51"),u=r(/*! path */"?bcf6"),i=r(/*! process */"./node_modules/process/browser.js");Object(function(){var e=new Error("Cannot find module 'os'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'tty'");throw e.code="MODULE_NOT_FOUND",e}());var s=r(/*! fs/promises */"?f01a");Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}());var o=r(/*! fs */"?06a1");Object(function(){var e=new Error("Cannot find module 'v8'");throw e.code="MODULE_NOT_FOUND",e}());var a=r(/*! util */"?f5bd"),c=r(/*! ./doc.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/doc.mjs");const l=Object(function(){var e=new Error("Cannot find module 'module'");throw e.code="MODULE_NOT_FOUND",e}())("file:///Users/mae.masters/Developer/supernova-exporter-vanilla/node_modules/json-schema-to-typescript/node_modules/prettier/index.mjs"),D=(0,n.fileURLToPath)("file:///Users/mae.masters/Developer/supernova-exporter-vanilla/node_modules/json-schema-to-typescript/node_modules/prettier/index.mjs");(0,u.dirname)(D);var h,p,d,f,m,F,E,g,C,y,A,v=Object.create,b=Object.defineProperty,_=Object.getOwnPropertyDescriptor,w=Object.getOwnPropertyNames,B=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty,x=e=>{throw TypeError(e)},O=(e=>void 0!==l?l:"undefined"!=typeof Proxy?new Proxy(e,{get:(e,t)=>(void 0!==l?l:e)[t]}):e)((function(e){if(void 0!==l)return l.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')})),R=(e,t)=>function(){return e&&(t=(0,e[w(e)[0]])(e=0)),t},T=(e,t)=>function(){return t||(0,e[w(e)[0]])((t={exports:{}}).exports,t),t.exports},k=(e,t)=>{for(var r in t)b(e,r,{get:t[r],enumerable:!0})},I=(e,t,r,n)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let u of w(t))S.call(e,u)||u===r||b(e,u,{get:()=>t[u],enumerable:!(n=_(t,u))||n.enumerable});return e},N=(e,t,r)=>(r=null!=e?v(B(e)):{},I(!t&&e&&e.__esModule?r:b(r,"default",{value:e,enumerable:!0}),e)),L=(e,t,r)=>((e,t,r)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r),j=(e,t,r)=>t.has(e)||x("Cannot "+r),P=(e,t,r)=>(j(e,t,"read from private field"),r?r.call(e):t.get(e)),$=(e,t,r)=>t.has(e)?x("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,r),M=(e,t,r,n)=>(j(e,t,"write to private field"),n?n.call(e,r):t.set(e,r),r),U=(e,t,r)=>(j(e,t,"access private method"),r),H=T({"node_modules/diff/lib/diff/base.js"(e){function t(){}function r(e,t,r,n,u){for(var i,s=[];t;)s.push(t),i=t.previousComponent,delete t.previousComponent,t=i;s.reverse();for(var o=0,a=s.length,c=0,l=0;o<a;o++){var D=s[o];if(D.removed){if(D.value=e.join(n.slice(l,l+D.count)),l+=D.count,o&&s[o-1].added){var h=s[o-1];s[o-1]=s[o],s[o]=h}}else{if(!D.added&&u){var p=r.slice(c,c+D.count);p=p.map((function(e,t){var r=n[l+t];return r.length>e.length?r:e})),D.value=e.join(p)}else D.value=e.join(r.slice(c,c+D.count));c+=D.count,D.added||(l+=D.count)}}var d=s[a-1];return a>1&&"string"==typeof d.value&&(d.added||d.removed)&&e.equals("",d.value)&&(s[a-2].value+=d.value,s.pop()),s}Object.defineProperty(e,"__esModule",{value:!0}),e.default=t,t.prototype={diff:function(e,t){var n,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=u.callback;"function"==typeof u&&(i=u,u={}),this.options=u;var s=this;function o(e){return i?(setTimeout((function(){i(void 0,e)}),0),!0):e}e=this.castInput(e),t=this.castInput(t),e=this.removeEmpty(this.tokenize(e));var a=(t=this.removeEmpty(this.tokenize(t))).length,c=e.length,l=1,D=a+c;u.maxEditLength&&(D=Math.min(D,u.maxEditLength));var h=null!==(n=u.timeout)&&void 0!==n?n:1/0,p=Date.now()+h,d=[{oldPos:-1,lastComponent:void 0}],f=this.extractCommon(d[0],t,e,0);if(d[0].oldPos+1>=c&&f+1>=a)return o([{value:this.join(t),count:t.length}]);var m=-1/0,F=1/0;function E(){for(var n=Math.max(m,-l);n<=Math.min(F,l);n+=2){var u=void 0,i=d[n-1],D=d[n+1];i&&(d[n-1]=void 0);var h=!1;if(D){var p=D.oldPos-n;h=D&&0<=p&&p<a}var E=i&&i.oldPos+1<c;if(h||E){if(u=!E||h&&i.oldPos+1<D.oldPos?s.addToPath(D,!0,void 0,0):s.addToPath(i,void 0,!0,1),f=s.extractCommon(u,t,e,n),u.oldPos+1>=c&&f+1>=a)return o(r(s,u.lastComponent,t,e,s.useLongestToken));d[n]=u,u.oldPos+1>=c&&(F=Math.min(F,n-1)),f+1>=a&&(m=Math.max(m,n+1))}else d[n]=void 0}l++}if(i)!function e(){setTimeout((function(){if(l>D||Date.now()>p)return i();E()||e()}),0)}();else for(;l<=D&&Date.now()<=p;){var g=E();if(g)return g}},addToPath:function(e,t,r,n){var u=e.lastComponent;return u&&u.added===t&&u.removed===r?{oldPos:e.oldPos+n,lastComponent:{count:u.count+1,added:t,removed:r,previousComponent:u.previousComponent}}:{oldPos:e.oldPos+n,lastComponent:{count:1,added:t,removed:r,previousComponent:u}}},extractCommon:function(e,t,r,n){for(var u=t.length,i=r.length,s=e.oldPos,o=s-n,a=0;o+1<u&&s+1<i&&this.equals(t[o+1],r[s+1]);)o++,s++,a++;return a&&(e.lastComponent={count:a,previousComponent:e.lastComponent}),e.oldPos=s,o},equals:function(e,t){return this.options.comparator?this.options.comparator(e,t):e===t||this.options.ignoreCase&&e.toLowerCase()===t.toLowerCase()},removeEmpty:function(e){for(var t=[],r=0;r<e.length;r++)e[r]&&t.push(e[r]);return t},castInput:function(e){return e},tokenize:function(e){return e.split("")},join:function(e){return e.join("")}}}}),G=T({"node_modules/diff/lib/util/params.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.generateOptions=function(e,t){if("function"==typeof e)t.callback=e;else if(e)for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}}}),W=T({"node_modules/diff/lib/diff/line.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.diffLines=function(e,t,r){return u.diff(e,t,r)},e.diffTrimmedLines=function(e,t,r){var i=(0,n.generateOptions)(r,{ignoreWhitespace:!0});return u.diff(e,t,i)},e.lineDiff=void 0;var t,r=(t=H())&&t.__esModule?t:{default:t},n=G();var u=new r.default;e.lineDiff=u,u.tokenize=function(e){this.options.stripTrailingCr&&(e=e.replace(/\r\n/g,"\n"));var t=[],r=e.split(/(\n|\r\n)/);r[r.length-1]||r.pop();for(var n=0;n<r.length;n++){var u=r[n];n%2&&!this.options.newlineIsToken?t[t.length-1]+=u:(this.options.ignoreWhitespace&&(u=u.trim()),t.push(u))}return t}}}),V=T({"node_modules/diff/lib/patch/create.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.structuredPatch=u,e.formatPatch=i,e.createTwoFilesPatch=s,e.createPatch=function(e,t,r,n,u,i){return s(e,e,t,r,n,u,i)};var t=W();function r(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,n,u,i,s,o,a){a||(a={}),void 0===a.context&&(a.context=4);var c=(0,t.diffLines)(u,i,a);if(c){c.push({value:"",lines:[]});for(var l=[],D=0,h=0,p=[],d=1,f=1,m=function(e){var t=c[e],n=t.lines||t.value.replace(/\n$/,"").split("\n");if(t.lines=n,t.added||t.removed){var s;if(!D){var o=c[e-1];D=d,h=f,o&&(p=a.context>0?E(o.lines.slice(-a.context)):[],D-=p.length,h-=p.length)}(s=p).push.apply(s,r(n.map((function(e){return(t.added?"+":"-")+e})))),t.added?f+=n.length:d+=n.length}else{if(D)if(n.length<=2*a.context&&e<c.length-2){var m;(m=p).push.apply(m,r(E(n)))}else{var F,g=Math.min(n.length,a.context);(F=p).push.apply(F,r(E(n.slice(0,g))));var C={oldStart:D,oldLines:d-D+g,newStart:h,newLines:f-h+g,lines:p};if(e>=c.length-2&&n.length<=a.context){var y=/\n$/.test(u),A=/\n$/.test(i),v=0==n.length&&p.length>C.oldLines;!y&&v&&u.length>0&&p.splice(C.oldLines,0,"\\ No newline at end of file"),(y||v)&&A||p.push("\\ No newline at end of file")}l.push(C),D=0,h=0,p=[]}d+=n.length,f+=n.length}},F=0;F<c.length;F++)m(F);return{oldFileName:e,newFileName:n,oldHeader:s,newHeader:o,hunks:l}}function E(e){return e.map((function(e){return" "+e}))}}function i(e){if(Array.isArray(e))return e.map(i).join("\n");var t=[];e.oldFileName==e.newFileName&&t.push("Index: "+e.oldFileName),t.push("==================================================================="),t.push("--- "+e.oldFileName+(void 0===e.oldHeader?"":"\t"+e.oldHeader)),t.push("+++ "+e.newFileName+(void 0===e.newHeader?"":"\t"+e.newHeader));for(var r=0;r<e.hunks.length;r++){var n=e.hunks[r];0===n.oldLines&&(n.oldStart-=1),0===n.newLines&&(n.newStart-=1),t.push("@@ -"+n.oldStart+","+n.oldLines+" +"+n.newStart+","+n.newLines+" @@"),t.push.apply(t,n.lines)}return t.join("\n")+"\n"}function s(e,t,r,n,s,o,a){return i(u(e,t,r,n,s,o,a))}}}),K=T({"node_modules/fast-glob/out/utils/array.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.splitWhen=e.flatten=void 0,e.flatten=function(e){return e.reduce(((e,t)=>[].concat(e,t)),[])},e.splitWhen=function(e,t){const r=[[]];let n=0;for(const u of e)t(u)?(n++,r[n]=[]):r[n].push(u);return r}}}),q=T({"node_modules/fast-glob/out/utils/errno.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.isEnoentCodeError=void 0,e.isEnoentCodeError=function(e){return"ENOENT"===e.code}}}),Y=T({"node_modules/fast-glob/out/utils/fs.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.createDirentFromStats=void 0;var t=class{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}};e.createDirentFromStats=function(e,r){return new t(e,r)}}}),X=T({"node_modules/fast-glob/out/utils/path.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.convertPosixPathToPattern=e.convertWindowsPathToPattern=e.convertPathToPattern=e.escapePosixPath=e.escapeWindowsPath=e.escape=e.removeLeadingDotSegment=e.makeAbsolute=e.unixify=void 0;var t=O("os"),r=O("path"),n="win32"===t.platform(),u=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g,i=/(\\?)([()[\]{}]|^!|[!+@](?=\())/g,s=/^\\\\([.?])/,o=/\\(?![!()+@[\]{}])/g;function a(e){return e.replace(i,"\\$2")}function c(e){return e.replace(u,"\\$2")}function l(e){return a(e).replace(s,"//$1").replace(o,"/")}function D(e){return c(e)}e.unixify=function(e){return e.replace(/\\/g,"/")},e.makeAbsolute=function(e,t){return r.resolve(e,t)},e.removeLeadingDotSegment=function(e){if("."===e.charAt(0)){const t=e.charAt(1);if("/"===t||"\\"===t)return e.slice(2)}return e},e.escape=n?a:c,e.escapeWindowsPath=a,e.escapePosixPath=c,e.convertPathToPattern=n?l:D,e.convertWindowsPathToPattern=l,e.convertPosixPathToPattern=D}}),z=T({"node_modules/is-extglob/index.js"(e,t){t.exports=function(e){if("string"!=typeof e||""===e)return!1;for(var t;t=/(\\).|([@?!+*]\(.*\))/g.exec(e);){if(t[2])return!0;e=e.slice(t.index+t[0].length)}return!1}}}),Q=T({"node_modules/is-glob/index.js"(e,t){var r=z(),n={"{":"}","(":")","[":"]"},u=function(e){if("!"===e[0])return!0;for(var t=0,r=-2,u=-2,i=-2,s=-2,o=-2;t<e.length;){if("*"===e[t])return!0;if("?"===e[t+1]&&/[\].+)]/.test(e[t]))return!0;if(-1!==u&&"["===e[t]&&"]"!==e[t+1]&&(u<t&&(u=e.indexOf("]",t)),u>t)){if(-1===o||o>u)return!0;if(-1===(o=e.indexOf("\\",t))||o>u)return!0}if(-1!==i&&"{"===e[t]&&"}"!==e[t+1]&&(i=e.indexOf("}",t))>t&&(-1===(o=e.indexOf("\\",t))||o>i))return!0;if(-1!==s&&"("===e[t]&&"?"===e[t+1]&&/[:!=]/.test(e[t+2])&&")"!==e[t+3]&&(s=e.indexOf(")",t))>t&&(-1===(o=e.indexOf("\\",t))||o>s))return!0;if(-1!==r&&"("===e[t]&&"|"!==e[t+1]&&(r<t&&(r=e.indexOf("|",t)),-1!==r&&")"!==e[r+1]&&(s=e.indexOf(")",r))>r&&(-1===(o=e.indexOf("\\",r))||o>s)))return!0;if("\\"===e[t]){var a=e[t+1];t+=2;var c=n[a];if(c){var l=e.indexOf(c,t);-1!==l&&(t=l+1)}if("!"===e[t])return!0}else t++}return!1},i=function(e){if("!"===e[0])return!0;for(var t=0;t<e.length;){if(/[*?{}()[\]]/.test(e[t]))return!0;if("\\"===e[t]){var r=e[t+1];t+=2;var u=n[r];if(u){var i=e.indexOf(u,t);-1!==i&&(t=i+1)}if("!"===e[t])return!0}else t++}return!1};t.exports=function(e,t){if("string"!=typeof e||""===e)return!1;if(r(e))return!0;var n=u;return t&&!1===t.strict&&(n=i),n(e)}}}),J=T({"node_modules/glob-parent/index.js"(e,t){var r=Q(),n=O("path").posix.dirname,u="win32"===O("os").platform(),i=/\\/g,s=/[\{\[].*[\}\]]$/,o=/(^|[^\\])([\{\[]|\([^\)]+$)/,a=/\\([\!\*\?\|\[\]\(\)\{\}])/g;t.exports=function(e,t){Object.assign({flipBackslashes:!0},t).flipBackslashes&&u&&e.indexOf("/")<0&&(e=e.replace(i,"/")),s.test(e)&&(e+="/"),e+="a";do{e=n(e)}while(r(e)||o.test(e));return e.replace(a,"$1")}}}),Z=T({"node_modules/braces/lib/utils.js"(e){e.isInteger=e=>"number"==typeof e?Number.isInteger(e):"string"==typeof e&&""!==e.trim()&&Number.isInteger(Number(e)),e.find=(e,t)=>e.nodes.find((e=>e.type===t)),e.exceedsLimit=(t,r,n=1,u)=>!1!==u&&(!(!e.isInteger(t)||!e.isInteger(r))&&(Number(r)-Number(t))/Number(n)>=u),e.escapeNode=(e,t=0,r)=>{const n=e.nodes[t];n&&(r&&n.type===r||"open"===n.type||"close"===n.type)&&!0!==n.escaped&&(n.value="\\"+n.value,n.escaped=!0)},e.encloseBrace=e=>"brace"===e.type&&(e.commas>>0+e.ranges>>0==0&&(e.invalid=!0,!0)),e.isInvalidBrace=e=>"brace"===e.type&&(!(!0!==e.invalid&&!e.dollar)||(e.commas>>0+e.ranges>>0==0||!0!==e.open||!0!==e.close)&&(e.invalid=!0,!0)),e.isOpenOrClose=e=>"open"===e.type||"close"===e.type||(!0===e.open||!0===e.close),e.reduce=e=>e.reduce(((e,t)=>("text"===t.type&&e.push(t.value),"range"===t.type&&(t.type="text"),e)),[]),e.flatten=(...e)=>{const t=[],r=e=>{for(let n=0;n<e.length;n++){const u=e[n];Array.isArray(u)?r(u):void 0!==u&&t.push(u)}return t};return r(e),t}}}),ee=T({"node_modules/braces/lib/stringify.js"(e,t){var r=Z();t.exports=(e,t={})=>{const n=(e,u={})=>{const i=t.escapeInvalid&&r.isInvalidBrace(u),s=!0===e.invalid&&!0===t.escapeInvalid;let o="";if(e.value)return(i||s)&&r.isOpenOrClose(e)?"\\"+e.value:e.value;if(e.value)return e.value;if(e.nodes)for(const t of e.nodes)o+=n(t);return o};return n(e)}}}),te=T({"node_modules/is-number/index.js"(e,t){t.exports=function(e){return"number"==typeof e?e-e==0:"string"==typeof e&&""!==e.trim()&&(Number.isFinite?Number.isFinite(+e):isFinite(+e))}}}),re=T({"node_modules/to-regex-range/index.js"(e,t){var r=te(),n=(e,t,u)=>{if(!1===r(e))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===t||e===t)return String(e);if(!1===r(t))throw new TypeError("toRegexRange: expected the second argument to be a number.");let o={relaxZeros:!0,...u};"boolean"==typeof o.strictZeros&&(o.relaxZeros=!1===o.strictZeros);let a=e+":"+t+"="+String(o.relaxZeros)+String(o.shorthand)+String(o.capture)+String(o.wrap);if(n.cache.hasOwnProperty(a))return n.cache[a].result;let c=Math.min(e,t),l=Math.max(e,t);if(1===Math.abs(c-l)){let r=e+"|"+t;return o.capture?`(${r})`:!1===o.wrap?r:`(?:${r})`}let D=p(e)||p(t),h={min:e,max:t,a:c,b:l},d=[],f=[];if(D&&(h.isPadded=D,h.maxLen=String(h.max).length),c<0){f=i(l<0?Math.abs(l):1,Math.abs(c),h,o),c=h.a=0}return l>=0&&(d=i(c,l,h,o)),h.negatives=f,h.positives=d,h.result=function(e,t,r){let n=s(e,t,"-",!1,r)||[],u=s(t,e,"",!1,r)||[],i=s(e,t,"-?",!0,r)||[];return n.concat(i).concat(u).join("|")}(f,d,o),!0===o.capture?h.result=`(${h.result})`:!1!==o.wrap&&d.length+f.length>1&&(h.result=`(?:${h.result})`),n.cache[a]=h,h.result};function u(e,t,r){if(e===t)return{pattern:e,count:[],digits:0};let n=function(e,t){let r=[];for(let n=0;n<e.length;n++)r.push([e[n],t[n]]);return r}(e,t),u=n.length,i="",s=0;for(let e=0;e<u;e++){let[t,u]=n[e];t===u?i+=t:"0"!==t||"9"!==u?i+=h(t,u,r):s++}return s&&(i+=!0===r.shorthand?"\\d":"[0-9]"),{pattern:i,count:[s],digits:u}}function i(e,t,r,n){let i,s=function(e,t){let r=1,n=1,u=c(e,r),i=new Set([t]);for(;e<=u&&u<=t;)i.add(u),r+=1,u=c(e,r);for(u=l(t+1,n)-1;e<u&&u<=t;)i.add(u),n+=1,u=l(t+1,n)-1;return i=[...i],i.sort(o),i}(e,t),a=[],h=e;for(let e=0;e<s.length;e++){let t=s[e],o=u(String(h),String(t),n),c="";r.isPadded||!i||i.pattern!==o.pattern?(r.isPadded&&(c=d(t,r,n)),o.string=c+o.pattern+D(o.count),a.push(o),h=t+1,i=o):(i.count.length>1&&i.count.pop(),i.count.push(o.count[0]),i.string=i.pattern+D(i.count),h=t+1)}return a}function s(e,t,r,n,u){let i=[];for(let u of e){let{string:e}=u;n||a(t,"string",e)||i.push(r+e),n&&a(t,"string",e)&&i.push(r+e)}return i}function o(e,t){return e>t?1:t>e?-1:0}function a(e,t,r){return e.some((e=>e[t]===r))}function c(e,t){return Number(String(e).slice(0,-t)+"9".repeat(t))}function l(e,t){return e-e%Math.pow(10,t)}function D(e){let[t=0,r=""]=e;return r||t>1?`{${t+(r?","+r:"")}}`:""}function h(e,t,r){return`[${e}${t-e==1?"":"-"}${t}]`}function p(e){return/^-?(0+)\d/.test(e)}function d(e,t,r){if(!t.isPadded)return e;let n=Math.abs(t.maxLen-String(e).length),u=!1!==r.relaxZeros;switch(n){case 0:return"";case 1:return u?"0?":"0";case 2:return u?"0{0,2}":"00";default:return u?`0{0,${n}}`:`0{${n}}`}}n.cache={},n.clearCache=()=>n.cache={},t.exports=n}}),ne=T({"node_modules/fill-range/index.js"(e,t){var r=O("util"),n=re(),u=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),i=e=>"number"==typeof e||"string"==typeof e&&""!==e,s=e=>Number.isInteger(+e),o=e=>{let t=`${e}`,r=-1;if("-"===t[0]&&(t=t.slice(1)),"0"===t)return!1;for(;"0"===t[++r];);return r>0},a=(e,t,r)=>{if(t>0){let r="-"===e[0]?"-":"";r&&(e=e.slice(1)),e=r+e.padStart(r?t-1:t,"0")}return!1===r?String(e):e},c=(e,t)=>{let r="-"===e[0]?"-":"";for(r&&(e=e.slice(1),t--);e.length<t;)e="0"+e;return r?"-"+e:e},l=(e,t,r,u)=>{if(r)return n(e,t,{wrap:!1,...u});let i=String.fromCharCode(e);return e===t?i:`[${i}-${String.fromCharCode(t)}]`},D=(e,t,r)=>{if(Array.isArray(e)){let t=!0===r.wrap,n=r.capture?"":"?:";return t?`(${n}${e.join("|")})`:e.join("|")}return n(e,t,r)},h=(...e)=>new RangeError("Invalid range arguments: "+r.inspect(...e)),p=(e,t,r)=>{if(!0===r.strictRanges)throw h([e,t]);return[]},d=(e,t,r=1,n={})=>{let u=Number(e),i=Number(t);if(!Number.isInteger(u)||!Number.isInteger(i)){if(!0===n.strictRanges)throw h([e,t]);return[]}0===u&&(u=0),0===i&&(i=0);let s=u>i,p=String(e),d=String(t),f=String(r);r=Math.max(Math.abs(r),1);let m=o(p)||o(d)||o(f),F=m?Math.max(p.length,d.length,f.length):0,E=!1===m&&!1===((e,t,r)=>"string"==typeof e||"string"==typeof t||!0===r.stringify)(e,t,n),g=n.transform||(e=>t=>!0===e?Number(t):String(t))(E);if(n.toRegex&&1===r)return l(c(e,F),c(t,F),!0,n);let C={negatives:[],positives:[]},y=[],A=0;for(;s?u>=i:u<=i;)!0===n.toRegex&&r>1?C[(v=u)<0?"negatives":"positives"].push(Math.abs(v)):y.push(a(g(u,A),F,E)),u=s?u-r:u+r,A++;var v;return!0===n.toRegex?r>1?((e,t,r)=>{e.negatives.sort(((e,t)=>e<t?-1:e>t?1:0)),e.positives.sort(((e,t)=>e<t?-1:e>t?1:0));let n,u=t.capture?"":"?:",i="",s="";return e.positives.length&&(i=e.positives.map((e=>c(String(e),r))).join("|")),e.negatives.length&&(s=`-(${u}${e.negatives.map((e=>c(String(e),r))).join("|")})`),n=i&&s?`${i}|${s}`:i||s,t.wrap?`(${u}${n})`:n})(C,n,F):D(y,null,{wrap:!1,...n}):y},f=(e,t,r,n={})=>{if(null==t&&i(e))return[e];if(!i(e)||!i(t))return p(e,t,n);if("function"==typeof r)return f(e,t,1,{transform:r});if(u(r))return f(e,t,0,r);let o={...n};return!0===o.capture&&(o.wrap=!0),r=r||o.step||1,s(r)?s(e)&&s(t)?d(e,t,r,o):((e,t,r=1,n={})=>{if(!s(e)&&e.length>1||!s(t)&&t.length>1)return p(e,t,n);let u=n.transform||(e=>String.fromCharCode(e)),i=`${e}`.charCodeAt(0),o=`${t}`.charCodeAt(0),a=i>o,c=Math.min(i,o),h=Math.max(i,o);if(n.toRegex&&1===r)return l(c,h,!1,n);let d=[],f=0;for(;a?i>=o:i<=o;)d.push(u(i,f)),i=a?i-r:i+r,f++;return!0===n.toRegex?D(d,null,{wrap:!1,options:n}):d})(e,t,Math.max(Math.abs(r),1),o):null==r||u(r)?f(e,t,1,r):((e,t)=>{if(!0===t.strictRanges)throw new TypeError(`Expected step "${e}" to be a number`);return[]})(r,o)};t.exports=f}}),ue=T({"node_modules/braces/lib/compile.js"(e,t){var r=ne(),n=Z();t.exports=(e,t={})=>{const u=(e,i={})=>{const s=n.isInvalidBrace(i),o=!0===e.invalid&&!0===t.escapeInvalid,a=!0===s||!0===o,c=!0===t.escapeInvalid?"\\":"";let l="";if(!0===e.isOpen)return c+e.value;if(!0===e.isClose)return console.log("node.isClose",c,e.value),c+e.value;if("open"===e.type)return a?c+e.value:"(";if("close"===e.type)return a?c+e.value:")";if("comma"===e.type)return"comma"===e.prev.type?"":a?e.value:"|";if(e.value)return e.value;if(e.nodes&&e.ranges>0){const u=n.reduce(e.nodes),i=r(...u,{...t,wrap:!1,toRegex:!0,strictZeros:!0});if(0!==i.length)return u.length>1&&i.length>1?`(${i})`:i}if(e.nodes)for(const t of e.nodes)l+=u(t,e);return l};return u(e)}}}),ie=T({"node_modules/braces/lib/expand.js"(e,t){var r=ne(),n=ee(),u=Z(),i=(e="",t="",r=!1)=>{const n=[];if(e=[].concat(e),!(t=[].concat(t)).length)return e;if(!e.length)return r?u.flatten(t).map((e=>`{${e}}`)):t;for(const u of e)if(Array.isArray(u))for(const e of u)n.push(i(e,t,r));else for(let e of t)!0===r&&"string"==typeof e&&(e=`{${e}}`),n.push(Array.isArray(e)?i(u,e,r):u+e);return u.flatten(n)};t.exports=(e,t={})=>{const s=void 0===t.rangeLimit?1e3:t.rangeLimit,o=(e,a={})=>{e.queue=[];let c=a,l=a.queue;for(;"brace"!==c.type&&"root"!==c.type&&c.parent;)c=c.parent,l=c.queue;if(e.invalid||e.dollar)return void l.push(i(l.pop(),n(e,t)));if("brace"===e.type&&!0!==e.invalid&&2===e.nodes.length)return void l.push(i(l.pop(),["{}"]));if(e.nodes&&e.ranges>0){const o=u.reduce(e.nodes);if(u.exceedsLimit(...o,t.step,s))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let a=r(...o,t);return 0===a.length&&(a=n(e,t)),l.push(i(l.pop(),a)),void(e.nodes=[])}const D=u.encloseBrace(e);let h=e.queue,p=e;for(;"brace"!==p.type&&"root"!==p.type&&p.parent;)p=p.parent,h=p.queue;for(let t=0;t<e.nodes.length;t++){const r=e.nodes[t];"comma"!==r.type||"brace"!==e.type?"close"!==r.type?r.value&&"open"!==r.type?h.push(i(h.pop(),r.value)):r.nodes&&o(r,e):l.push(i(l.pop(),h,D)):(1===t&&h.push(""),h.push(""))}return h};return u.flatten(o(e))}}}),se=T({"node_modules/braces/lib/constants.js"(e,t){t.exports={MAX_LENGTH:1e4,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:" ",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"}}}),oe=T({"node_modules/braces/lib/parse.js"(e,t){var r=ee(),{MAX_LENGTH:n,CHAR_BACKSLASH:u,CHAR_BACKTICK:i,CHAR_COMMA:s,CHAR_DOT:o,CHAR_LEFT_PARENTHESES:a,CHAR_RIGHT_PARENTHESES:c,CHAR_LEFT_CURLY_BRACE:l,CHAR_RIGHT_CURLY_BRACE:D,CHAR_LEFT_SQUARE_BRACKET:h,CHAR_RIGHT_SQUARE_BRACKET:p,CHAR_DOUBLE_QUOTE:d,CHAR_SINGLE_QUOTE:f,CHAR_NO_BREAK_SPACE:m,CHAR_ZERO_WIDTH_NOBREAK_SPACE:F}=se();t.exports=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");const E=t||{},g="number"==typeof E.maxLength?Math.min(n,E.maxLength):n;if(e.length>g)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${g})`);const C={type:"root",input:e,nodes:[]},y=[C];let A=C,v=C,b=0;const _=e.length;let w,B=0,S=0;const x=()=>e[B++],O=e=>{if("text"===e.type&&"dot"===v.type&&(v.type="text"),!v||"text"!==v.type||"text"!==e.type)return A.nodes.push(e),e.parent=A,e.prev=v,v=e,e;v.value+=e.value};for(O({type:"bos"});B<_;)if(A=y[y.length-1],w=x(),w!==F&&w!==m)if(w!==u)if(w!==p)if(w!==h)if(w!==a)if(w!==c)if(w!==d&&w!==f&&w!==i)if(w!==l)if(w!==D)if(w===s&&S>0){if(A.ranges>0){A.ranges=0;const e=A.nodes.shift();A.nodes=[e,{type:"text",value:r(A)}]}O({type:"comma",value:w}),A.commas++}else if(w===o&&S>0&&0===A.commas){const e=A.nodes;if(0===S||0===e.length){O({type:"text",value:w});continue}if("dot"===v.type){if(A.range=[],v.value+=w,v.type="range",3!==A.nodes.length&&5!==A.nodes.length){A.invalid=!0,A.ranges=0,v.type="text";continue}A.ranges++,A.args=[];continue}if("range"===v.type){e.pop();const t=e[e.length-1];t.value+=v.value+w,v=t,A.ranges--;continue}O({type:"dot",value:w})}else O({type:"text",value:w});else{if("brace"!==A.type){O({type:"text",value:w});continue}const e="close";A=y.pop(),A.close=!0,O({type:e,value:w}),S--,A=y[y.length-1]}else{S++;const e=v.value&&"$"===v.value.slice(-1)||!0===A.dollar;A=O({type:"brace",open:!0,close:!1,dollar:e,depth:S,commas:0,ranges:0,nodes:[]}),y.push(A),O({type:"open",value:w})}else{const e=w;let r;for(!0!==t.keepQuotes&&(w="");B<_&&(r=x());)if(r!==u){if(r===e){!0===t.keepQuotes&&(w+=r);break}w+=r}else w+=r+x();O({type:"text",value:w})}else{if("paren"!==A.type){O({type:"text",value:w});continue}A=y.pop(),O({type:"text",value:w}),A=y[y.length-1]}else A=O({type:"paren",nodes:[]}),y.push(A),O({type:"text",value:w});else{let e;for(b++;B<_&&(e=x());)if(w+=e,e!==h)if(e!==u){if(e===p&&(b--,0===b))break}else w+=x();else b++;O({type:"text",value:w})}else O({type:"text",value:"\\"+w});else O({type:"text",value:(t.keepEscaping?w:"")+x()});do{if(A=y.pop(),"root"!==A.type){A.nodes.forEach((e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)}));const e=y[y.length-1],t=e.nodes.indexOf(A);e.nodes.splice(t,1,...A.nodes)}}while(y.length>0);return O({type:"eos"}),C}}}),ae=T({"node_modules/braces/index.js"(e,t){var r=ee(),n=ue(),u=ie(),i=oe(),s=(e,t={})=>{let r=[];if(Array.isArray(e))for(const n of e){const e=s.create(n,t);Array.isArray(e)?r.push(...e):r.push(e)}else r=[].concat(s.create(e,t));return t&&!0===t.expand&&!0===t.nodupes&&(r=[...new Set(r)]),r};s.parse=(e,t={})=>i(e,t),s.stringify=(e,t={})=>r("string"==typeof e?s.parse(e,t):e,t),s.compile=(e,t={})=>("string"==typeof e&&(e=s.parse(e,t)),n(e,t)),s.expand=(e,t={})=>{"string"==typeof e&&(e=s.parse(e,t));let r=u(e,t);return!0===t.noempty&&(r=r.filter(Boolean)),!0===t.nodupes&&(r=[...new Set(r)]),r},s.create=(e,t={})=>""===e||e.length<3?[e]:!0!==t.expand?s.compile(e,t):s.expand(e,t),t.exports=s}}),ce=T({"node_modules/picomatch/lib/constants.js"(e,t){var r=O("path"),n="\\\\/",u=`[^${n}]`,i="\\.",s="\\/",o="[^/]",a=`(?:${s}|$)`,c=`(?:^|${s})`,l=`${i}{1,2}${a}`,D={DOT_LITERAL:i,PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:s,ONE_CHAR:"(?=.)",QMARK:o,END_ANCHOR:a,DOTS_SLASH:l,NO_DOT:`(?!${i})`,NO_DOTS:`(?!${c}${l})`,NO_DOT_SLASH:`(?!${i}{0,1}${a})`,NO_DOTS_SLASH:`(?!${l})`,QMARK_NO_DOT:`[^.${s}]`,STAR:`${o}*?`,START_ANCHOR:c},h={...D,SLASH_LITERAL:`[${n}]`,QMARK:u,STAR:`${u}*?`,DOTS_SLASH:`${i}{1,2}(?:[${n}]|$)`,NO_DOT:`(?!${i})`,NO_DOTS:`(?!(?:^|[${n}])${i}{1,2}(?:[${n}]|$))`,NO_DOT_SLASH:`(?!${i}{0,1}(?:[${n}]|$))`,NO_DOTS_SLASH:`(?!${i}{1,2}(?:[${n}]|$))`,QMARK_NO_DOT:`[^.${n}]`,START_ANCHOR:`(?:^|[${n}])`,END_ANCHOR:`(?:[${n}]|$)`};t.exports={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:r.sep,extglobChars:e=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${e.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:e=>!0===e?h:D}}}),le=T({"node_modules/picomatch/lib/utils.js"(e){var t=O("path"),r="win32"===process.platform,{REGEX_BACKSLASH:n,REGEX_REMOVE_BACKSLASH:u,REGEX_SPECIAL_CHARS:i,REGEX_SPECIAL_CHARS_GLOBAL:s}=ce();e.isObject=e=>null!==e&&"object"==typeof e&&!Array.isArray(e),e.hasRegexChars=e=>i.test(e),e.isRegexChar=t=>1===t.length&&e.hasRegexChars(t),e.escapeRegex=e=>e.replace(s,"\\$1"),e.toPosixSlashes=e=>e.replace(n,"/"),e.removeBackslashes=e=>e.replace(u,(e=>"\\"===e?"":e)),e.supportsLookbehinds=()=>{const e=process.version.slice(1).split(".").map(Number);return 3===e.length&&e[0]>=9||8===e[0]&&e[1]>=10},e.isWindows=e=>e&&"boolean"==typeof e.windows?e.windows:!0===r||"\\"===t.sep,e.escapeLast=(t,r,n)=>{const u=t.lastIndexOf(r,n);return-1===u?t:"\\"===t[u-1]?e.escapeLast(t,r,u-1):`${t.slice(0,u)}\\${t.slice(u)}`},e.removePrefix=(e,t={})=>{let r=e;return r.startsWith("./")&&(r=r.slice(2),t.prefix="./"),r},e.wrapOutput=(e,t={},r={})=>{let n=`${r.contains?"":"^"}(?:${e})${r.contains?"":"$"}`;return!0===t.negated&&(n=`(?:^(?!${n}).*$)`),n}}}),De=T({"node_modules/picomatch/lib/scan.js"(e,t){var r=le(),{CHAR_ASTERISK:n,CHAR_AT:u,CHAR_BACKWARD_SLASH:i,CHAR_COMMA:s,CHAR_DOT:o,CHAR_EXCLAMATION_MARK:a,CHAR_FORWARD_SLASH:c,CHAR_LEFT_CURLY_BRACE:l,CHAR_LEFT_PARENTHESES:D,CHAR_LEFT_SQUARE_BRACKET:h,CHAR_PLUS:p,CHAR_QUESTION_MARK:d,CHAR_RIGHT_CURLY_BRACE:f,CHAR_RIGHT_PARENTHESES:m,CHAR_RIGHT_SQUARE_BRACKET:F}=ce(),E=e=>e===c||e===i,g=e=>{!0!==e.isPrefix&&(e.depth=e.isGlobstar?1/0:1)};t.exports=(e,t)=>{const C=t||{},y=e.length-1,A=!0===C.parts||!0===C.scanToEnd,v=[],b=[],_=[];let w,B,S=e,x=-1,O=0,R=0,T=!1,k=!1,I=!1,N=!1,L=!1,j=!1,P=!1,$=!1,M=!1,U=!1,H=0,G={value:"",depth:0,isGlob:!1};const W=()=>x>=y,V=()=>(w=B,S.charCodeAt(++x));for(;x<y;){let e;if(B=V(),B!==i){if(!0===j||B===l){for(H++;!0!==W()&&(B=V());)if(B!==i)if(B!==l){if(!0!==j&&B===o&&(B=V())===o){if(T=G.isBrace=!0,I=G.isGlob=!0,U=!0,!0===A)continue;break}if(!0!==j&&B===s){if(T=G.isBrace=!0,I=G.isGlob=!0,U=!0,!0===A)continue;break}if(B===f&&(H--,0===H)){j=!1,T=G.isBrace=!0,U=!0;break}}else H++;else P=G.backslashes=!0,V();if(!0===A)continue;break}if(B!==c){if(!0!==C.noext){if(!0===(B===p||B===u||B===n||B===d||B===a)&&S.charCodeAt(x+1)===D){if(I=G.isGlob=!0,N=G.isExtglob=!0,U=!0,B===a&&x===O&&(M=!0),!0===A){for(;!0!==W()&&(B=V());)if(B!==i){if(B===m){I=G.isGlob=!0,U=!0;break}}else P=G.backslashes=!0,B=V();continue}break}}if(B===n){if(w===n&&(L=G.isGlobstar=!0),I=G.isGlob=!0,U=!0,!0===A)continue;break}if(B===d){if(I=G.isGlob=!0,U=!0,!0===A)continue;break}if(B===h){for(;!0!==W()&&(e=V());)if(e!==i){if(e===F){k=G.isBracket=!0,I=G.isGlob=!0,U=!0;break}}else P=G.backslashes=!0,V();if(!0===A)continue;break}if(!0===C.nonegate||B!==a||x!==O){if(!0!==C.noparen&&B===D){if(I=G.isGlob=!0,!0===A){for(;!0!==W()&&(B=V());)if(B!==D){if(B===m){U=!0;break}}else P=G.backslashes=!0,B=V();continue}break}if(!0===I){if(U=!0,!0===A)continue;break}}else $=G.negated=!0,O++}else{if(v.push(x),b.push(G),G={value:"",depth:0,isGlob:!1},!0===U)continue;if(w===o&&x===O+1){O+=2;continue}R=x+1}}else P=G.backslashes=!0,B=V(),B===l&&(j=!0)}!0===C.noext&&(N=!1,I=!1);let K=S,q="",Y="";O>0&&(q=S.slice(0,O),S=S.slice(O),R-=O),K&&!0===I&&R>0?(K=S.slice(0,R),Y=S.slice(R)):!0===I?(K="",Y=S):K=S,K&&""!==K&&"/"!==K&&K!==S&&E(K.charCodeAt(K.length-1))&&(K=K.slice(0,-1)),!0===C.unescape&&(Y&&(Y=r.removeBackslashes(Y)),K&&!0===P&&(K=r.removeBackslashes(K)));const X={prefix:q,input:e,start:O,base:K,glob:Y,isBrace:T,isBracket:k,isGlob:I,isExtglob:N,isGlobstar:L,negated:$,negatedExtglob:M};if(!0===C.tokens&&(X.maxDepth=0,E(B)||b.push(G),X.tokens=b),!0===C.parts||!0===C.tokens){let t;for(let r=0;r<v.length;r++){const n=t?t+1:O,u=v[r],i=e.slice(n,u);C.tokens&&(0===r&&0!==O?(b[r].isPrefix=!0,b[r].value=q):b[r].value=i,g(b[r]),X.maxDepth+=b[r].depth),0===r&&""===i||_.push(i),t=u}if(t&&t+1<e.length){const r=e.slice(t+1);_.push(r),C.tokens&&(b[b.length-1].value=r,g(b[b.length-1]),X.maxDepth+=b[b.length-1].depth)}X.slashes=v,X.parts=_}return X}}}),he=T({"node_modules/picomatch/lib/parse.js"(e,t){var r=ce(),n=le(),{MAX_LENGTH:u,POSIX_REGEX_SOURCE:i,REGEX_NON_SPECIAL_CHARS:s,REGEX_SPECIAL_CHARS_BACKREF:o,REPLACEMENTS:a}=r,c=(e,t)=>{if("function"==typeof t.expandRange)return t.expandRange(...e,t);e.sort();const r=`[${e.join("-")}]`;try{new RegExp(r)}catch(t){return e.map((e=>n.escapeRegex(e))).join("..")}return r},l=(e,t)=>`Missing ${e}: "${t}" - use "\\\\${t}" to match literal characters`,D=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");e=a[e]||e;const h={...t},p="number"==typeof h.maxLength?Math.min(u,h.maxLength):u;let d=e.length;if(d>p)throw new SyntaxError(`Input length: ${d}, exceeds maximum allowed length: ${p}`);const f={type:"bos",value:"",output:h.prepend||""},m=[f],F=h.capture?"":"?:",E=n.isWindows(t),g=r.globChars(E),C=r.extglobChars(g),{DOT_LITERAL:y,PLUS_LITERAL:A,SLASH_LITERAL:v,ONE_CHAR:b,DOTS_SLASH:_,NO_DOT:w,NO_DOT_SLASH:B,NO_DOTS_SLASH:S,QMARK:x,QMARK_NO_DOT:O,STAR:R,START_ANCHOR:T}=g,k=e=>`(${F}(?:(?!${T}${e.dot?_:y}).)*?)`,I=h.dot?"":w,N=h.dot?x:O;let L=!0===h.bash?k(h):R;h.capture&&(L=`(${L})`),"boolean"==typeof h.noext&&(h.noextglob=h.noext);const j={input:e,index:-1,start:0,dot:!0===h.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:m};e=n.removePrefix(e,j),d=e.length;const P=[],$=[],M=[];let U,H=f;const G=()=>j.index===d-1,W=j.peek=(t=1)=>e[j.index+t],V=j.advance=()=>e[++j.index]||"",K=()=>e.slice(j.index+1),q=(e="",t=0)=>{j.consumed+=e,j.index+=t},Y=e=>{j.output+=null!=e.output?e.output:e.value,q(e.value)},X=()=>{let e=1;for(;"!"===W()&&("("!==W(2)||"?"===W(3));)V(),j.start++,e++;return e%2!=0&&(j.negated=!0,j.start++,!0)},z=e=>{j[e]++,M.push(e)},Q=e=>{j[e]--,M.pop()},J=e=>{if("globstar"===H.type){const t=j.braces>0&&("comma"===e.type||"brace"===e.type),r=!0===e.extglob||P.length&&("pipe"===e.type||"paren"===e.type);"slash"===e.type||"paren"===e.type||t||r||(j.output=j.output.slice(0,-H.output.length),H.type="star",H.value="*",H.output=L,j.output+=H.output)}if(P.length&&"paren"!==e.type&&(P[P.length-1].inner+=e.value),(e.value||e.output)&&Y(e),H&&"text"===H.type&&"text"===e.type)return H.value+=e.value,void(H.output=(H.output||"")+e.value);e.prev=H,m.push(e),H=e},Z=(e,t)=>{const r={...C[t],conditions:1,inner:""};r.prev=H,r.parens=j.parens,r.output=j.output;const n=(h.capture?"(":"")+r.open;z("parens"),J({type:e,value:t,output:j.output?"":b}),J({type:"paren",extglob:!0,value:V(),output:n}),P.push(r)},ee=e=>{let r,n=e.close+(h.capture?")":"");if("negate"===e.type){let u=L;if(e.inner&&e.inner.length>1&&e.inner.includes("/")&&(u=k(h)),(u!==L||G()||/^\)+$/.test(K()))&&(n=e.close=`)$))${u}`),e.inner.includes("*")&&(r=K())&&/^\.[^\\/.]+$/.test(r)){const i=D(r,{...t,fastpaths:!1}).output;n=e.close=`)${i})${u})`}"bos"===e.prev.type&&(j.negatedExtglob=!0)}J({type:"paren",extglob:!0,value:U,output:n}),Q("parens")};if(!1!==h.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(e)){let r=!1,u=e.replace(o,((e,t,n,u,i,s)=>"\\"===u?(r=!0,e):"?"===u?t?t+u+(i?x.repeat(i.length):""):0===s?N+(i?x.repeat(i.length):""):x.repeat(n.length):"."===u?y.repeat(n.length):"*"===u?t?t+u+(i?L:""):L:t?e:`\\${e}`));return!0===r&&(u=!0===h.unescape?u.replace(/\\/g,""):u.replace(/\\+/g,(e=>e.length%2==0?"\\\\":e?"\\":""))),u===e&&!0===h.contains?(j.output=e,j):(j.output=n.wrapOutput(u,j,t),j)}for(;!G();){if(U=V(),"\0"===U)continue;if("\\"===U){const e=W();if("/"===e&&!0!==h.bash)continue;if("."===e||";"===e)continue;if(!e){U+="\\",J({type:"text",value:U});continue}const t=/^\\+/.exec(K());let r=0;if(t&&t[0].length>2&&(r=t[0].length,j.index+=r,r%2!=0&&(U+="\\")),!0===h.unescape?U=V():U+=V(),0===j.brackets){J({type:"text",value:U});continue}}if(j.brackets>0&&("]"!==U||"["===H.value||"[^"===H.value)){if(!1!==h.posix&&":"===U){const e=H.value.slice(1);if(e.includes("[")&&(H.posix=!0,e.includes(":"))){const e=H.value.lastIndexOf("["),t=H.value.slice(0,e),r=H.value.slice(e+2),n=i[r];if(n){H.value=t+n,j.backtrack=!0,V(),f.output||1!==m.indexOf(H)||(f.output=b);continue}}}("["===U&&":"!==W()||"-"===U&&"]"===W())&&(U=`\\${U}`),"]"!==U||"["!==H.value&&"[^"!==H.value||(U=`\\${U}`),!0===h.posix&&"!"===U&&"["===H.value&&(U="^"),H.value+=U,Y({value:U});continue}if(1===j.quotes&&'"'!==U){U=n.escapeRegex(U),H.value+=U,Y({value:U});continue}if('"'===U){j.quotes=1===j.quotes?0:1,!0===h.keepQuotes&&J({type:"text",value:U});continue}if("("===U){z("parens"),J({type:"paren",value:U});continue}if(")"===U){if(0===j.parens&&!0===h.strictBrackets)throw new SyntaxError(l("opening","("));const e=P[P.length-1];if(e&&j.parens===e.parens+1){ee(P.pop());continue}J({type:"paren",value:U,output:j.parens?")":"\\)"}),Q("parens");continue}if("["===U){if(!0!==h.nobracket&&K().includes("]"))z("brackets");else{if(!0!==h.nobracket&&!0===h.strictBrackets)throw new SyntaxError(l("closing","]"));U=`\\${U}`}J({type:"bracket",value:U});continue}if("]"===U){if(!0===h.nobracket||H&&"bracket"===H.type&&1===H.value.length){J({type:"text",value:U,output:`\\${U}`});continue}if(0===j.brackets){if(!0===h.strictBrackets)throw new SyntaxError(l("opening","["));J({type:"text",value:U,output:`\\${U}`});continue}Q("brackets");const e=H.value.slice(1);if(!0===H.posix||"^"!==e[0]||e.includes("/")||(U=`/${U}`),H.value+=U,Y({value:U}),!1===h.literalBrackets||n.hasRegexChars(e))continue;const t=n.escapeRegex(H.value);if(j.output=j.output.slice(0,-H.value.length),!0===h.literalBrackets){j.output+=t,H.value=t;continue}H.value=`(${F}${t}|${H.value})`,j.output+=H.value;continue}if("{"===U&&!0!==h.nobrace){z("braces");const e={type:"brace",value:U,output:"(",outputIndex:j.output.length,tokensIndex:j.tokens.length};$.push(e),J(e);continue}if("}"===U){const e=$[$.length-1];if(!0===h.nobrace||!e){J({type:"text",value:U,output:U});continue}let t=")";if(!0===e.dots){const e=m.slice(),r=[];for(let t=e.length-1;t>=0&&(m.pop(),"brace"!==e[t].type);t--)"dots"!==e[t].type&&r.unshift(e[t].value);t=c(r,h),j.backtrack=!0}if(!0!==e.comma&&!0!==e.dots){const r=j.output.slice(0,e.outputIndex),n=j.tokens.slice(e.tokensIndex);e.value=e.output="\\{",U=t="\\}",j.output=r;for(const e of n)j.output+=e.output||e.value}J({type:"brace",value:U,output:t}),Q("braces"),$.pop();continue}if("|"===U){P.length>0&&P[P.length-1].conditions++,J({type:"text",value:U});continue}if(","===U){let e=U;const t=$[$.length-1];t&&"braces"===M[M.length-1]&&(t.comma=!0,e="|"),J({type:"comma",value:U,output:e});continue}if("/"===U){if("dot"===H.type&&j.index===j.start+1){j.start=j.index+1,j.consumed="",j.output="",m.pop(),H=f;continue}J({type:"slash",value:U,output:v});continue}if("."===U){if(j.braces>0&&"dot"===H.type){"."===H.value&&(H.output=y);const e=$[$.length-1];H.type="dots",H.output+=U,H.value+=U,e.dots=!0;continue}if(j.braces+j.parens===0&&"bos"!==H.type&&"slash"!==H.type){J({type:"text",value:U,output:y});continue}J({type:"dot",value:U,output:y});continue}if("?"===U){if(!(H&&"("===H.value)&&!0!==h.noextglob&&"("===W()&&"?"!==W(2)){Z("qmark",U);continue}if(H&&"paren"===H.type){const e=W();let t=U;if("<"===e&&!n.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===H.value&&!/[!=<:]/.test(e)||"<"===e&&!/<([!=]|\w+>)/.test(K()))&&(t=`\\${U}`),J({type:"text",value:U,output:t});continue}if(!0!==h.dot&&("slash"===H.type||"bos"===H.type)){J({type:"qmark",value:U,output:O});continue}J({type:"qmark",value:U,output:x});continue}if("!"===U){if(!0!==h.noextglob&&"("===W()&&("?"!==W(2)||!/[!=<:]/.test(W(3)))){Z("negate",U);continue}if(!0!==h.nonegate&&0===j.index){X();continue}}if("+"===U){if(!0!==h.noextglob&&"("===W()&&"?"!==W(2)){Z("plus",U);continue}if(H&&"("===H.value||!1===h.regex){J({type:"plus",value:U,output:A});continue}if(H&&("bracket"===H.type||"paren"===H.type||"brace"===H.type)||j.parens>0){J({type:"plus",value:U});continue}J({type:"plus",value:A});continue}if("@"===U){if(!0!==h.noextglob&&"("===W()&&"?"!==W(2)){J({type:"at",extglob:!0,value:U,output:""});continue}J({type:"text",value:U});continue}if("*"!==U){"$"!==U&&"^"!==U||(U=`\\${U}`);const e=s.exec(K());e&&(U+=e[0],j.index+=e[0].length),J({type:"text",value:U});continue}if(H&&("globstar"===H.type||!0===H.star)){H.type="star",H.star=!0,H.value+=U,H.output=L,j.backtrack=!0,j.globstar=!0,q(U);continue}let t=K();if(!0!==h.noextglob&&/^\([^?]/.test(t)){Z("star",U);continue}if("star"===H.type){if(!0===h.noglobstar){q(U);continue}const r=H.prev,n=r.prev,u="slash"===r.type||"bos"===r.type,i=n&&("star"===n.type||"globstar"===n.type);if(!0===h.bash&&(!u||t[0]&&"/"!==t[0])){J({type:"star",value:U,output:""});continue}const s=j.braces>0&&("comma"===r.type||"brace"===r.type),o=P.length&&("pipe"===r.type||"paren"===r.type);if(!u&&"paren"!==r.type&&!s&&!o){J({type:"star",value:U,output:""});continue}for(;"/**"===t.slice(0,3);){const r=e[j.index+4];if(r&&"/"!==r)break;t=t.slice(3),q("/**",3)}if("bos"===r.type&&G()){H.type="globstar",H.value+=U,H.output=k(h),j.output=H.output,j.globstar=!0,q(U);continue}if("slash"===r.type&&"bos"!==r.prev.type&&!i&&G()){j.output=j.output.slice(0,-(r.output+H.output).length),r.output=`(?:${r.output}`,H.type="globstar",H.output=k(h)+(h.strictSlashes?")":"|$)"),H.value+=U,j.globstar=!0,j.output+=r.output+H.output,q(U);continue}if("slash"===r.type&&"bos"!==r.prev.type&&"/"===t[0]){const e=void 0!==t[1]?"|$":"";j.output=j.output.slice(0,-(r.output+H.output).length),r.output=`(?:${r.output}`,H.type="globstar",H.output=`${k(h)}${v}|${v}${e})`,H.value+=U,j.output+=r.output+H.output,j.globstar=!0,q(U+V()),J({type:"slash",value:"/",output:""});continue}if("bos"===r.type&&"/"===t[0]){H.type="globstar",H.value+=U,H.output=`(?:^|${v}|${k(h)}${v})`,j.output=H.output,j.globstar=!0,q(U+V()),J({type:"slash",value:"/",output:""});continue}j.output=j.output.slice(0,-H.output.length),H.type="globstar",H.output=k(h),H.value+=U,j.output+=H.output,j.globstar=!0,q(U);continue}const r={type:"star",value:U,output:L};!0!==h.bash?!H||"bracket"!==H.type&&"paren"!==H.type||!0!==h.regex?(j.index!==j.start&&"slash"!==H.type&&"dot"!==H.type||("dot"===H.type?(j.output+=B,H.output+=B):!0===h.dot?(j.output+=S,H.output+=S):(j.output+=I,H.output+=I),"*"!==W()&&(j.output+=b,H.output+=b)),J(r)):(r.output=U,J(r)):(r.output=".*?","bos"!==H.type&&"slash"!==H.type||(r.output=I+r.output),J(r))}for(;j.brackets>0;){if(!0===h.strictBrackets)throw new SyntaxError(l("closing","]"));j.output=n.escapeLast(j.output,"["),Q("brackets")}for(;j.parens>0;){if(!0===h.strictBrackets)throw new SyntaxError(l("closing",")"));j.output=n.escapeLast(j.output,"("),Q("parens")}for(;j.braces>0;){if(!0===h.strictBrackets)throw new SyntaxError(l("closing","}"));j.output=n.escapeLast(j.output,"{"),Q("braces")}if(!0===h.strictSlashes||"star"!==H.type&&"bracket"!==H.type||J({type:"maybe_slash",value:"",output:`${v}?`}),!0===j.backtrack){j.output="";for(const e of j.tokens)j.output+=null!=e.output?e.output:e.value,e.suffix&&(j.output+=e.suffix)}return j};D.fastpaths=(e,t)=>{const i={...t},s="number"==typeof i.maxLength?Math.min(u,i.maxLength):u,o=e.length;if(o>s)throw new SyntaxError(`Input length: ${o}, exceeds maximum allowed length: ${s}`);e=a[e]||e;const c=n.isWindows(t),{DOT_LITERAL:l,SLASH_LITERAL:D,ONE_CHAR:h,DOTS_SLASH:p,NO_DOT:d,NO_DOTS:f,NO_DOTS_SLASH:m,STAR:F,START_ANCHOR:E}=r.globChars(c),g=i.dot?f:d,C=i.dot?m:d,y=i.capture?"":"?:";let A=!0===i.bash?".*?":F;i.capture&&(A=`(${A})`);const v=e=>!0===e.noglobstar?A:`(${y}(?:(?!${E}${e.dot?p:l}).)*?)`,b=e=>{switch(e){case"*":return`${g}${h}${A}`;case".*":return`${l}${h}${A}`;case"*.*":return`${g}${A}${l}${h}${A}`;case"*/*":return`${g}${A}${D}${h}${C}${A}`;case"**":return g+v(i);case"**/*":return`(?:${g}${v(i)}${D})?${C}${h}${A}`;case"**/*.*":return`(?:${g}${v(i)}${D})?${C}${A}${l}${h}${A}`;case"**/.*":return`(?:${g}${v(i)}${D})?${l}${h}${A}`;default:{const t=/^(.*?)\.(\w+)$/.exec(e);if(!t)return;const r=b(t[1]);if(!r)return;return r+l+t[2]}}},_=n.removePrefix(e,{negated:!1,prefix:""});let w=b(_);return w&&!0!==i.strictSlashes&&(w+=`${D}?`),w},t.exports=D}}),pe=T({"node_modules/picomatch/lib/picomatch.js"(e,t){var r=O("path"),n=De(),u=he(),i=le(),s=ce(),o=(e,t,r=!1)=>{if(Array.isArray(e)){const n=e.map((e=>o(e,t,r)));return e=>{for(const t of n){const r=t(e);if(r)return r}return!1}}const n=(u=e)&&"object"==typeof u&&!Array.isArray(u)&&e.tokens&&e.input;var u;if(""===e||"string"!=typeof e&&!n)throw new TypeError("Expected pattern to be a non-empty string");const s=t||{},a=i.isWindows(t),c=n?o.compileRe(e,t):o.makeRe(e,t,!1,!0),l=c.state;delete c.state;let D=()=>!1;if(s.ignore){const e={...t,ignore:null,onMatch:null,onResult:null};D=o(s.ignore,e,r)}const h=(r,n=!1)=>{const{isMatch:u,match:i,output:h}=o.test(r,c,t,{glob:e,posix:a}),p={glob:e,state:l,regex:c,posix:a,input:r,output:h,match:i,isMatch:u};return"function"==typeof s.onResult&&s.onResult(p),!1===u?(p.isMatch=!1,!!n&&p):D(r)?("function"==typeof s.onIgnore&&s.onIgnore(p),p.isMatch=!1,!!n&&p):("function"==typeof s.onMatch&&s.onMatch(p),!n||p)};return r&&(h.state=l),h};o.test=(e,t,r,{glob:n,posix:u}={})=>{if("string"!=typeof e)throw new TypeError("Expected input to be a string");if(""===e)return{isMatch:!1,output:""};const s=r||{},a=s.format||(u?i.toPosixSlashes:null);let c=e===n,l=c&&a?a(e):e;return!1===c&&(l=a?a(e):e,c=l===n),!1!==c&&!0!==s.capture||(c=!0===s.matchBase||!0===s.basename?o.matchBase(e,t,r,u):t.exec(l)),{isMatch:Boolean(c),match:c,output:l}},o.matchBase=(e,t,n,u=i.isWindows(n))=>(t instanceof RegExp?t:o.makeRe(t,n)).test(r.basename(e)),o.isMatch=(e,t,r)=>o(t,r)(e),o.parse=(e,t)=>Array.isArray(e)?e.map((e=>o.parse(e,t))):u(e,{...t,fastpaths:!1}),o.scan=(e,t)=>n(e,t),o.compileRe=(e,t,r=!1,n=!1)=>{if(!0===r)return e.output;const u=t||{},i=u.contains?"":"^",s=u.contains?"":"$";let a=`${i}(?:${e.output})${s}`;e&&!0===e.negated&&(a=`^(?!${a}).*$`);const c=o.toRegex(a,t);return!0===n&&(c.state=e),c},o.makeRe=(e,t={},r=!1,n=!1)=>{if(!e||"string"!=typeof e)throw new TypeError("Expected a non-empty string");let i={negated:!1,fastpaths:!0};return!1===t.fastpaths||"."!==e[0]&&"*"!==e[0]||(i.output=u.fastpaths(e,t)),i.output||(i=u(e,t)),o.compileRe(i,t,r,n)},o.toRegex=(e,t)=>{try{const r=t||{};return new RegExp(e,r.flags||(r.nocase?"i":""))}catch(e){if(t&&!0===t.debug)throw e;return/$^/}},o.constants=s,t.exports=o}}),de=T({"node_modules/picomatch/index.js"(e,t){t.exports=pe()}}),fe=T({"node_modules/micromatch/index.js"(e,t){var r=O("util"),n=ae(),u=de(),i=le(),s=e=>""===e||"./"===e,o=(e,t,r)=>{t=[].concat(t),e=[].concat(e);let n=new Set,i=new Set,s=new Set,o=0,a=e=>{s.add(e.output),r&&r.onResult&&r.onResult(e)};for(let s=0;s<t.length;s++){let c=u(String(t[s]),{...r,onResult:a},!0),l=c.state.negated||c.state.negatedExtglob;l&&o++;for(let t of e){let e=c(t,!0);(l?!e.isMatch:e.isMatch)&&(l?n.add(e.output):(n.delete(e.output),i.add(e.output)))}}let c=(o===t.length?[...s]:[...i]).filter((e=>!n.has(e)));if(r&&0===c.length){if(!0===r.failglob)throw new Error(`No matches found for "${t.join(", ")}"`);if(!0===r.nonull||!0===r.nullglob)return r.unescape?t.map((e=>e.replace(/\\/g,""))):t}return c};o.match=o,o.matcher=(e,t)=>u(e,t),o.any=o.isMatch=(e,t,r)=>u(t,r)(e),o.not=(e,t,r={})=>{t=[].concat(t).map(String);let n=new Set,u=[],i=new Set(o(e,t,{...r,onResult:e=>{r.onResult&&r.onResult(e),u.push(e.output)}}));for(let e of u)i.has(e)||n.add(e);return[...n]},o.contains=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${r.inspect(e)}"`);if(Array.isArray(t))return t.some((t=>o.contains(e,t,n)));if("string"==typeof t){if(s(e)||s(t))return!1;if(e.includes(t)||e.startsWith("./")&&e.slice(2).includes(t))return!0}return o.isMatch(e,t,{...n,contains:!0})},o.matchKeys=(e,t,r)=>{if(!i.isObject(e))throw new TypeError("Expected the first argument to be an object");let n=o(Object.keys(e),t,r),u={};for(let t of n)u[t]=e[t];return u},o.some=(e,t,r)=>{let n=[].concat(e);for(let e of[].concat(t)){let t=u(String(e),r);if(n.some((e=>t(e))))return!0}return!1},o.every=(e,t,r)=>{let n=[].concat(e);for(let e of[].concat(t)){let t=u(String(e),r);if(!n.every((e=>t(e))))return!1}return!0},o.all=(e,t,n)=>{if("string"!=typeof e)throw new TypeError(`Expected a string: "${r.inspect(e)}"`);return[].concat(t).every((t=>u(t,n)(e)))},o.capture=(e,t,r)=>{let n=i.isWindows(r),s=u.makeRe(String(e),{...r,capture:!0}).exec(n?i.toPosixSlashes(t):t);if(s)return s.slice(1).map((e=>void 0===e?"":e))},o.makeRe=(...e)=>u.makeRe(...e),o.scan=(...e)=>u.scan(...e),o.parse=(e,t)=>{let r=[];for(let i of[].concat(e||[]))for(let e of n(String(i),t))r.push(u.parse(e,t));return r},o.braces=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return t&&!0===t.nobrace||!/\{.*\}/.test(e)?[e]:n(e,t)},o.braceExpand=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected a string");return o.braces(e,{...t,expand:!0})},t.exports=o}}),me=T({"node_modules/fast-glob/out/utils/pattern.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.removeDuplicateSlashes=e.matchAny=e.convertPatternsToRe=e.makeRe=e.getPatternParts=e.expandBraceExpansion=e.expandPatternsWithBraceExpansion=e.isAffectDepthOfReadingPattern=e.endsWithSlashGlobStar=e.hasGlobStar=e.getBaseDirectory=e.isPatternRelatedToParentDirectory=e.getPatternsOutsideCurrentDirectory=e.getPatternsInsideCurrentDirectory=e.getPositivePatterns=e.getNegativePatterns=e.isPositivePattern=e.isNegativePattern=e.convertToNegativePattern=e.convertToPositivePattern=e.isDynamicPattern=e.isStaticPattern=void 0;var t=O("path"),r=J(),n=fe(),u=/[*?]|^!/,i=/\[[^[]*]/,s=/(?:^|[^!*+?@])\([^(]*\|[^|]*\)/,o=/[!*+?@]\([^(]*\)/,a=/,|\.\./,c=/(?!^)\/{2,}/g;function l(e,t={}){return!D(e,t)}function D(e,t={}){return""!==e&&(!(!1!==t.caseSensitiveMatch&&!e.includes("\\"))||(!!(u.test(e)||i.test(e)||s.test(e))||(!(!1===t.extglob||!o.test(e))||!(!1===t.braceExpansion||!function(e){const t=e.indexOf("{");if(-1===t)return!1;const r=e.indexOf("}",t+1);if(-1===r)return!1;const n=e.slice(t,r);return a.test(n)}(e)))))}function h(e){return e.startsWith("!")&&"("!==e[1]}function p(e){return!h(e)}function d(e){return e.startsWith("..")||e.startsWith("./..")}function f(e){return e.endsWith("/**")}function m(e){const t=n.braces(e,{expand:!0,nodupes:!0,keepEscaping:!0});return t.sort(((e,t)=>e.length-t.length)),t.filter((e=>""!==e))}function F(e,t){return n.makeRe(e,t)}e.isStaticPattern=l,e.isDynamicPattern=D,e.convertToPositivePattern=function(e){return h(e)?e.slice(1):e},e.convertToNegativePattern=function(e){return"!"+e},e.isNegativePattern=h,e.isPositivePattern=p,e.getNegativePatterns=function(e){return e.filter(h)},e.getPositivePatterns=function(e){return e.filter(p)},e.getPatternsInsideCurrentDirectory=function(e){return e.filter((e=>!d(e)))},e.getPatternsOutsideCurrentDirectory=function(e){return e.filter(d)},e.isPatternRelatedToParentDirectory=d,e.getBaseDirectory=function(e){return r(e,{flipBackslashes:!1})},e.hasGlobStar=function(e){return e.includes("**")},e.endsWithSlashGlobStar=f,e.isAffectDepthOfReadingPattern=function(e){const r=t.basename(e);return f(e)||l(r)},e.expandPatternsWithBraceExpansion=function(e){return e.reduce(((e,t)=>e.concat(m(t))),[])},e.expandBraceExpansion=m,e.getPatternParts=function(e,t){let{parts:r}=n.scan(e,Object.assign(Object.assign({},t),{parts:!0}));return 0===r.length&&(r=[e]),r[0].startsWith("/")&&(r[0]=r[0].slice(1),r.unshift("")),r},e.makeRe=F,e.convertPatternsToRe=function(e,t){return e.map((e=>F(e,t)))},e.matchAny=function(e,t){return t.some((t=>t.test(e)))},e.removeDuplicateSlashes=function(e){return e.replace(c,"/")}}}),Fe=T({"node_modules/merge2/index.js"(e,t){var r=O("stream").PassThrough,n=Array.prototype.slice;function u(e,t){if(Array.isArray(e))for(let r=0,n=e.length;r<n;r++)e[r]=u(e[r],t);else{if(!e._readableState&&e.pipe&&(e=e.pipe(r(t))),!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}t.exports=function(){const e=[],t=n.call(arguments);let i=!1,s=t[t.length-1];s&&!Array.isArray(s)&&null==s.pipe?t.pop():s={};const o=!1!==s.end,a=!0===s.pipeError;null==s.objectMode&&(s.objectMode=!0);null==s.highWaterMark&&(s.highWaterMark=65536);const c=r(s);function l(){for(let t=0,r=arguments.length;t<r;t++)e.push(u(arguments[t],s));return D(),this}function D(){if(i)return;i=!0;let t=e.shift();if(!t)return void process.nextTick(h);Array.isArray(t)||(t=[t]);let r=t.length+1;function n(){--r>0||(i=!1,D())}function u(e){function t(){e.removeListener("merge2UnpipeEnd",t),e.removeListener("end",t),a&&e.removeListener("error",r),n()}function r(e){c.emit("error",e)}if(e._readableState.endEmitted)return n();e.on("merge2UnpipeEnd",t),e.on("end",t),a&&e.on("error",r),e.pipe(c,{end:!1}),e.resume()}for(let e=0;e<t.length;e++)u(t[e]);n()}function h(){i=!1,c.emit("queueDrain"),o&&c.end()}c.setMaxListeners(0),c.add=l,c.on("unpipe",(function(e){e.emit("merge2UnpipeEnd")})),t.length&&l.apply(null,t);return c}}}),Ee=T({"node_modules/fast-glob/out/utils/stream.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.merge=void 0;var t=Fe();function r(e){e.forEach((e=>e.emit("close")))}e.merge=function(e){const n=t(e);return e.forEach((e=>{e.once("error",(e=>n.emit("error",e)))})),n.once("close",(()=>r(e))),n.once("end",(()=>r(e))),n}}}),ge=T({"node_modules/fast-glob/out/utils/string.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.isEmpty=e.isString=void 0,e.isString=function(e){return"string"==typeof e},e.isEmpty=function(e){return""===e}}}),Ce=T({"node_modules/fast-glob/out/utils/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.string=e.stream=e.pattern=e.path=e.fs=e.errno=e.array=void 0;var t=K();e.array=t;var r=q();e.errno=r;var n=Y();e.fs=n;var u=X();e.path=u;var i=me();e.pattern=i;var s=Ee();e.stream=s;var o=ge();e.string=o}}),ye=T({"node_modules/fast-glob/out/managers/tasks.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.convertPatternGroupToTask=e.convertPatternGroupsToTasks=e.groupPatternsByBaseDirectory=e.getNegativePatternsAsPositive=e.getPositivePatterns=e.convertPatternsToTasks=e.generate=void 0;var t=Ce();function r(e,r){let n=e;return r.braceExpansion&&(n=t.pattern.expandPatternsWithBraceExpansion(n)),r.baseNameMatch&&(n=n.map((e=>e.includes("/")?e:`**/${e}`))),n.map((e=>t.pattern.removeDuplicateSlashes(e)))}function n(e,r,n){const u=[],i=t.pattern.getPatternsOutsideCurrentDirectory(e),c=t.pattern.getPatternsInsideCurrentDirectory(e),l=s(i),D=s(c);return u.push(...o(l,r,n)),"."in D?u.push(a(".",c,r,n)):u.push(...o(D,r,n)),u}function u(e){return t.pattern.getPositivePatterns(e)}function i(e,r){return t.pattern.getNegativePatterns(e).concat(r).map(t.pattern.convertToPositivePattern)}function s(e){return e.reduce(((e,r)=>{const n=t.pattern.getBaseDirectory(r);return n in e?e[n].push(r):e[n]=[r],e}),{})}function o(e,t,r){return Object.keys(e).map((n=>a(n,e[n],t,r)))}function a(e,r,n,u){return{dynamic:u,positive:r,negative:n,base:e,patterns:[].concat(r,n.map(t.pattern.convertToNegativePattern))}}e.generate=function(e,s){const o=r(e,s),a=r(s.ignore,s),c=u(o),l=i(o,a),D=c.filter((e=>t.pattern.isStaticPattern(e,s))),h=c.filter((e=>t.pattern.isDynamicPattern(e,s))),p=n(D,l,!1),d=n(h,l,!0);return p.concat(d)},e.convertPatternsToTasks=n,e.getPositivePatterns=u,e.getNegativePatternsAsPositive=i,e.groupPatternsByBaseDirectory=s,e.convertPatternGroupsToTasks=o,e.convertPatternGroupToTask=a}}),Ae=T({"node_modules/@nodelib/fs.stat/out/providers/async.js"(e){function t(e,t){e(t)}function r(e,t){e(null,t)}Object.defineProperty(e,"__esModule",{value:!0}),e.read=void 0,e.read=function(e,n,u){n.fs.lstat(e,((i,s)=>{null===i?s.isSymbolicLink()&&n.followSymbolicLink?n.fs.stat(e,((e,i)=>{if(null!==e)return n.throwErrorOnBrokenSymbolicLink?void t(u,e):void r(u,s);n.markSymbolicLink&&(i.isSymbolicLink=()=>!0),r(u,i)})):r(u,s):t(u,i)}))}}}),ve=T({"node_modules/@nodelib/fs.stat/out/providers/sync.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.read=void 0,e.read=function(e,t){const r=t.fs.lstatSync(e);if(!r.isSymbolicLink()||!t.followSymbolicLink)return r;try{const r=t.fs.statSync(e);return t.markSymbolicLink&&(r.isSymbolicLink=()=>!0),r}catch(e){if(!t.throwErrorOnBrokenSymbolicLink)return r;throw e}}}}),be=T({"node_modules/@nodelib/fs.stat/out/adapters/fs.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystemAdapter=e.FILE_SYSTEM_ADAPTER=void 0;var t=O("fs");e.FILE_SYSTEM_ADAPTER={lstat:t.lstat,stat:t.stat,lstatSync:t.lstatSync,statSync:t.statSync},e.createFileSystemAdapter=function(t){return void 0===t?e.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},e.FILE_SYSTEM_ADAPTER),t)}}}),_e=T({"node_modules/@nodelib/fs.stat/out/settings.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=be();e.default=class{constructor(e={}){this._options=e,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=t.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(e,t){return null!=e?e:t}}}}),we=T({"node_modules/@nodelib/fs.stat/out/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.statSync=e.stat=e.Settings=void 0;var t=Ae(),r=ve(),n=_e();function u(e={}){return e instanceof n.default?e:new n.default(e)}e.Settings=n.default,e.stat=function(e,r,n){"function"!=typeof r?t.read(e,u(r),n):t.read(e,u(),r)},e.statSync=function(e,t){const n=u(t);return r.read(e,n)}}}),Be=T({"node_modules/queue-microtask/index.js"(e,t){var r;t.exports="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:global):e=>(r||(r=Promise.resolve())).then(e).catch((e=>setTimeout((()=>{throw e}),0)))}}),Se=T({"node_modules/run-parallel/index.js"(e,t){t.exports=function(e,t){let n,u,i,s=!0;Array.isArray(e)?(n=[],u=e.length):(i=Object.keys(e),n={},u=i.length);function o(e){function u(){t&&t(e,n),t=null}s?r(u):u()}function a(e,t,r){n[e]=r,(0==--u||t)&&o(t)}u?i?i.forEach((function(t){e[t]((function(e,r){a(t,e,r)}))})):e.forEach((function(e,t){e((function(e,r){a(t,e,r)}))})):o(null);s=!1};var r=Be()}}),xe=T({"node_modules/@nodelib/fs.scandir/out/constants.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;var t=process.versions.node.split(".");if(void 0===t[0]||void 0===t[1])throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);var r=Number.parseInt(t[0],10),n=Number.parseInt(t[1],10),u=r>10,i=10===r&&n>=10;e.IS_SUPPORT_READDIR_WITH_FILE_TYPES=u||i}}),Oe=T({"node_modules/@nodelib/fs.scandir/out/utils/fs.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.createDirentFromStats=void 0;var t=class{constructor(e,t){this.name=e,this.isBlockDevice=t.isBlockDevice.bind(t),this.isCharacterDevice=t.isCharacterDevice.bind(t),this.isDirectory=t.isDirectory.bind(t),this.isFIFO=t.isFIFO.bind(t),this.isFile=t.isFile.bind(t),this.isSocket=t.isSocket.bind(t),this.isSymbolicLink=t.isSymbolicLink.bind(t)}};e.createDirentFromStats=function(e,r){return new t(e,r)}}}),Re=T({"node_modules/@nodelib/fs.scandir/out/utils/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.fs=void 0;var t=Oe();e.fs=t}}),Te=T({"node_modules/@nodelib/fs.scandir/out/providers/common.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.joinPathSegments=void 0,e.joinPathSegments=function(e,t,r){return e.endsWith(r)?e+t:e+r+t}}}),ke=T({"node_modules/@nodelib/fs.scandir/out/providers/async.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.readdir=e.readdirWithFileTypes=e.read=void 0;var t=we(),r=Se(),n=xe(),u=Re(),i=Te();function s(e,t,n){t.fs.readdir(e,{withFileTypes:!0},((s,o)=>{if(null!==s)return void a(n,s);const l=o.map((r=>({dirent:r,name:r.name,path:i.joinPathSegments(e,r.name,t.pathSegmentSeparator)})));if(!t.followSymbolicLinks)return void c(n,l);const D=l.map((e=>function(e,t){return r=>{e.dirent.isSymbolicLink()?t.fs.stat(e.path,((n,i)=>{if(null!==n)return t.throwErrorOnBrokenSymbolicLink?void r(n):void r(null,e);e.dirent=u.fs.createDirentFromStats(e.name,i),r(null,e)})):r(null,e)}}(e,t)));r(D,((e,t)=>{null===e?c(n,t):a(n,e)}))}))}function o(e,n,s){n.fs.readdir(e,((o,l)=>{if(null!==o)return void a(s,o);const D=l.map((r=>{const s=i.joinPathSegments(e,r,n.pathSegmentSeparator);return e=>{t.stat(s,n.fsStatSettings,((t,i)=>{if(null!==t)return void e(t);const o={name:r,path:s,dirent:u.fs.createDirentFromStats(r,i)};n.stats&&(o.stats=i),e(null,o)}))}}));r(D,((e,t)=>{null===e?c(s,t):a(s,e)}))}))}function a(e,t){e(t)}function c(e,t){e(null,t)}e.read=function(e,t,r){t.stats||!n.IS_SUPPORT_READDIR_WITH_FILE_TYPES?o(e,t,r):s(e,t,r)},e.readdirWithFileTypes=s,e.readdir=o}}),Ie=T({"node_modules/@nodelib/fs.scandir/out/providers/sync.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.readdir=e.readdirWithFileTypes=e.read=void 0;var t=we(),r=xe(),n=Re(),u=Te();function i(e,t){return t.fs.readdirSync(e,{withFileTypes:!0}).map((r=>{const i={dirent:r,name:r.name,path:u.joinPathSegments(e,r.name,t.pathSegmentSeparator)};if(i.dirent.isSymbolicLink()&&t.followSymbolicLinks)try{const e=t.fs.statSync(i.path);i.dirent=n.fs.createDirentFromStats(i.name,e)}catch(e){if(t.throwErrorOnBrokenSymbolicLink)throw e}return i}))}function s(e,r){return r.fs.readdirSync(e).map((i=>{const s=u.joinPathSegments(e,i,r.pathSegmentSeparator),o=t.statSync(s,r.fsStatSettings),a={name:i,path:s,dirent:n.fs.createDirentFromStats(i,o)};return r.stats&&(a.stats=o),a}))}e.read=function(e,t){return!t.stats&&r.IS_SUPPORT_READDIR_WITH_FILE_TYPES?i(e,t):s(e,t)},e.readdirWithFileTypes=i,e.readdir=s}}),Ne=T({"node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystemAdapter=e.FILE_SYSTEM_ADAPTER=void 0;var t=O("fs");e.FILE_SYSTEM_ADAPTER={lstat:t.lstat,stat:t.stat,lstatSync:t.lstatSync,statSync:t.statSync,readdir:t.readdir,readdirSync:t.readdirSync},e.createFileSystemAdapter=function(t){return void 0===t?e.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},e.FILE_SYSTEM_ADAPTER),t)}}}),Le=T({"node_modules/@nodelib/fs.scandir/out/settings.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("path"),r=we(),n=Ne();e.default=class{constructor(e={}){this._options=e,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=n.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,t.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new r.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return null!=e?e:t}}}}),je=T({"node_modules/@nodelib/fs.scandir/out/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.Settings=e.scandirSync=e.scandir=void 0;var t=ke(),r=Ie(),n=Le();function u(e={}){return e instanceof n.default?e:new n.default(e)}e.Settings=n.default,e.scandir=function(e,r,n){"function"!=typeof r?t.read(e,u(r),n):t.read(e,u(),r)},e.scandirSync=function(e,t){const n=u(t);return r.read(e,n)}}}),Pe=T({"node_modules/reusify/reusify.js"(e,t){t.exports=function(e){var t=new e,r=t;return{get:function(){var n=t;return n.next?t=n.next:(t=new e,r=t),n.next=null,n},release:function(e){r.next=e,r=e}}}}}),$e=T({"node_modules/fastq/queue.js"(e,t){var r=Pe();function n(e,t,n){if("function"==typeof e&&(n=t,t=e,e=null),n<1)throw new Error("fastqueue concurrency must be greater than 1");var s=r(i),o=null,a=null,c=0,l=null,D={push:function(r,n){var i=s.get();i.context=e,i.release=h,i.value=r,i.callback=n||u,i.errorHandler=l,c===D.concurrency||D.paused?a?(a.next=i,a=i):(o=i,a=i,D.saturated()):(c++,t.call(e,i.value,i.worked))},drain:u,saturated:u,pause:function(){D.paused=!0},paused:!1,concurrency:n,running:function(){return c},resume:function(){if(!D.paused)return;D.paused=!1;for(var e=0;e<D.concurrency;e++)c++,h()},idle:function(){return 0===c&&0===D.length()},length:function(){var e=o,t=0;for(;e;)e=e.next,t++;return t},getQueue:function(){var e=o,t=[];for(;e;)t.push(e.value),e=e.next;return t},unshift:function(r,n){var i=s.get();i.context=e,i.release=h,i.value=r,i.callback=n||u,c===D.concurrency||D.paused?o?(i.next=o,o=i):(o=i,a=i,D.saturated()):(c++,t.call(e,i.value,i.worked))},empty:u,kill:function(){o=null,a=null,D.drain=u},killAndDrain:function(){o=null,a=null,D.drain(),D.drain=u},error:function(e){l=e}};return D;function h(r){r&&s.release(r);var n=o;n?D.paused?c--:(a===o&&(a=null),o=n.next,n.next=null,t.call(e,n.value,n.worked),null===a&&D.empty()):0==--c&&D.drain()}}function u(){}function i(){this.value=null,this.callback=u,this.next=null,this.release=u,this.context=null,this.errorHandler=null;var e=this;this.worked=function(t,r){var n=e.callback,i=e.errorHandler,s=e.value;e.value=null,e.callback=u,e.errorHandler&&i(t,s),n.call(e.context,t,r),e.release(e)}}t.exports=n,t.exports.promise=function(e,t,r){"function"==typeof e&&(r=t,t=e,e=null);var i=n(e,(function(e,r){t.call(this,e).then((function(e){r(null,e)}),r)}),r),s=i.push,o=i.unshift;return i.push=function(e){var t=new Promise((function(t,r){s(e,(function(e,n){e?r(e):t(n)}))}));return t.catch(u),t},i.unshift=function(e){var t=new Promise((function(t,r){o(e,(function(e,n){e?r(e):t(n)}))}));return t.catch(u),t},i.drained=function(){if(i.idle())return new Promise((function(e){e()}));var e=i.drain;return new Promise((function(t){i.drain=function(){e(),t()}}))},i}}}),Me=T({"node_modules/@nodelib/fs.walk/out/readers/common.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.joinPathSegments=e.replacePathSegmentSeparator=e.isAppliedFilter=e.isFatalError=void 0,e.isFatalError=function(e,t){return null===e.errorFilter||!e.errorFilter(t)},e.isAppliedFilter=function(e,t){return null===e||e(t)},e.replacePathSegmentSeparator=function(e,t){return e.split(/[/\\]/).join(t)},e.joinPathSegments=function(e,t,r){return""===e?t:e.endsWith(r)?e+t:e+r+t}}}),Ue=T({"node_modules/@nodelib/fs.walk/out/readers/reader.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Me();e.default=class{constructor(e,r){this._root=e,this._settings=r,this._root=t.replacePathSegmentSeparator(e,r.pathSegmentSeparator)}}}}),He=T({"node_modules/@nodelib/fs.walk/out/readers/async.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("events"),r=je(),n=$e(),u=Me(),i=Ue(),s=class extends i.default{constructor(e,u){super(e,u),this._settings=u,this._scandir=r.scandir,this._emitter=new t.EventEmitter,this._queue=n(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate((()=>{this._pushToQueue(this._root,this._settings.basePath)})),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(e){this._emitter.on("entry",e)}onError(e){this._emitter.once("error",e)}onEnd(e){this._emitter.once("end",e)}_pushToQueue(e,t){const r={directory:e,base:t};this._queue.push(r,(e=>{null!==e&&this._handleError(e)}))}_worker(e,t){this._scandir(e.directory,this._settings.fsScandirSettings,((r,n)=>{if(null===r){for(const t of n)this._handleEntry(t,e.base);t(null,void 0)}else t(r,void 0)}))}_handleError(e){!this._isDestroyed&&u.isFatalError(this._settings,e)&&(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",e))}_handleEntry(e,t){if(this._isDestroyed||this._isFatalError)return;const r=e.path;void 0!==t&&(e.path=u.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),u.isAppliedFilter(this._settings.entryFilter,e)&&this._emitEntry(e),e.dirent.isDirectory()&&u.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(r,void 0===t?void 0:e.path)}_emitEntry(e){this._emitter.emit("entry",e)}};e.default=s}}),Ge=T({"node_modules/@nodelib/fs.walk/out/providers/async.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=He();e.default=class{constructor(e,r){this._root=e,this._settings=r,this._reader=new t.default(this._root,this._settings),this._storage=[]}read(e){this._reader.onError((t=>{!function(e,t){e(t)}(e,t)})),this._reader.onEntry((e=>{this._storage.push(e)})),this._reader.onEnd((()=>{!function(e,t){e(null,t)}(e,this._storage)})),this._reader.read()}}}}),We=T({"node_modules/@nodelib/fs.walk/out/providers/stream.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("stream"),r=He();e.default=class{constructor(e,n){this._root=e,this._settings=n,this._reader=new r.default(this._root,this._settings),this._stream=new t.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError((e=>{this._stream.emit("error",e)})),this._reader.onEntry((e=>{this._stream.push(e)})),this._reader.onEnd((()=>{this._stream.push(null)})),this._reader.read(),this._stream}}}}),Ve=T({"node_modules/@nodelib/fs.walk/out/readers/sync.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=je(),r=Me(),n=Ue(),u=class extends n.default{constructor(){super(...arguments),this._scandir=t.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(const e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{const r=this._scandir(e,this._settings.fsScandirSettings);for(const e of r)this._handleEntry(e,t)}catch(e){this._handleError(e)}}_handleError(e){if(r.isFatalError(this._settings,e))throw e}_handleEntry(e,t){const n=e.path;void 0!==t&&(e.path=r.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),r.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&r.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(n,void 0===t?void 0:e.path)}_pushToStorage(e){this._storage.push(e)}};e.default=u}}),Ke=T({"node_modules/@nodelib/fs.walk/out/providers/sync.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ve();e.default=class{constructor(e,r){this._root=e,this._settings=r,this._reader=new t.default(this._root,this._settings)}read(){return this._reader.read()}}}}),qe=T({"node_modules/@nodelib/fs.walk/out/settings.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("path"),r=je();e.default=class{constructor(e={}){this._options=e,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,Number.POSITIVE_INFINITY),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,t.sep),this.fsScandirSettings=new r.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(e,t){return null!=e?e:t}}}}),Ye=T({"node_modules/@nodelib/fs.walk/out/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.Settings=e.walkStream=e.walkSync=e.walk=void 0;var t=Ge(),r=We(),n=Ke(),u=qe();function i(e={}){return e instanceof u.default?e:new u.default(e)}e.Settings=u.default,e.walk=function(e,r,n){"function"!=typeof r?new t.default(e,i(r)).read(n):new t.default(e,i()).read(r)},e.walkSync=function(e,t){const r=i(t);return new n.default(e,r).read()},e.walkStream=function(e,t){const n=i(t);return new r.default(e,n).read()}}}),Xe=T({"node_modules/fast-glob/out/readers/reader.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("path"),r=we(),n=Ce();e.default=class{constructor(e){this._settings=e,this._fsStatSettings=new r.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(e){return t.resolve(this._settings.cwd,e)}_makeEntry(e,t){const r={name:t,path:t,dirent:n.fs.createDirentFromStats(t,e)};return this._settings.stats&&(r.stats=e),r}_isFatalError(e){return!n.errno.isEnoentCodeError(e)&&!this._settings.suppressErrors}}}}),ze=T({"node_modules/fast-glob/out/readers/stream.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("stream"),r=we(),n=Ye(),u=Xe(),i=class extends u.default{constructor(){super(...arguments),this._walkStream=n.walkStream,this._stat=r.stat}dynamic(e,t){return this._walkStream(e,t)}static(e,r){const n=e.map(this._getFullEntryPath,this),u=new t.PassThrough({objectMode:!0});u._write=(t,i,s)=>this._getEntry(n[t],e[t],r).then((e=>{null!==e&&r.entryFilter(e)&&u.push(e),t===n.length-1&&u.end(),s()})).catch(s);for(let e=0;e<n.length;e++)u.write(e);return u}_getEntry(e,t,r){return this._getStat(e).then((e=>this._makeEntry(e,t))).catch((e=>{if(r.errorFilter(e))return null;throw e}))}_getStat(e){return new Promise(((t,r)=>{this._stat(e,this._fsStatSettings,((e,n)=>null===e?t(n):r(e)))}))}};e.default=i}}),Qe=T({"node_modules/fast-glob/out/readers/async.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ye(),r=Xe(),n=ze(),u=class extends r.default{constructor(){super(...arguments),this._walkAsync=t.walk,this._readerStream=new n.default(this._settings)}dynamic(e,t){return new Promise(((r,n)=>{this._walkAsync(e,t,((e,t)=>{null===e?r(t):n(e)}))}))}async static(e,t){const r=[],n=this._readerStream.static(e,t);return new Promise(((e,t)=>{n.once("error",t),n.on("data",(e=>r.push(e))),n.once("end",(()=>e(r)))}))}};e.default=u}}),Je=T({"node_modules/fast-glob/out/providers/matchers/matcher.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ce();e.default=class{constructor(e,t,r){this._patterns=e,this._settings=t,this._micromatchOptions=r,this._storage=[],this._fillStorage()}_fillStorage(){for(const e of this._patterns){const t=this._getPatternSegments(e),r=this._splitSegmentsIntoSections(t);this._storage.push({complete:r.length<=1,pattern:e,segments:t,sections:r})}}_getPatternSegments(e){return t.pattern.getPatternParts(e,this._micromatchOptions).map((e=>t.pattern.isDynamicPattern(e,this._settings)?{dynamic:!0,pattern:e,patternRe:t.pattern.makeRe(e,this._micromatchOptions)}:{dynamic:!1,pattern:e}))}_splitSegmentsIntoSections(e){return t.array.splitWhen(e,(e=>e.dynamic&&t.pattern.hasGlobStar(e.pattern)))}}}}),Ze=T({"node_modules/fast-glob/out/providers/matchers/partial.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Je(),r=class extends t.default{match(e){const t=e.split("/"),r=t.length,n=this._storage.filter((e=>!e.complete||e.segments.length>r));for(const e of n){const n=e.sections[0];if(!e.complete&&r>n.length)return!0;if(t.every(((t,r)=>{const n=e.segments[r];return!(!n.dynamic||!n.patternRe.test(t))||!n.dynamic&&n.pattern===t})))return!0}return!1}};e.default=r}}),et=T({"node_modules/fast-glob/out/providers/filters/deep.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ce(),r=Ze();e.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t}getFilter(e,t,r){const n=this._getMatcher(t),u=this._getNegativePatternsRe(r);return t=>this._filter(e,t,n,u)}_getMatcher(e){return new r.default(e,this._settings,this._micromatchOptions)}_getNegativePatternsRe(e){const r=e.filter(t.pattern.isAffectDepthOfReadingPattern);return t.pattern.convertPatternsToRe(r,this._micromatchOptions)}_filter(e,r,n,u){if(this._isSkippedByDeep(e,r.path))return!1;if(this._isSkippedSymbolicLink(r))return!1;const i=t.path.removeLeadingDotSegment(r.path);return!this._isSkippedByPositivePatterns(i,n)&&this._isSkippedByNegativePatterns(i,u)}_isSkippedByDeep(e,t){return this._settings.deep!==1/0&&this._getEntryLevel(e,t)>=this._settings.deep}_getEntryLevel(e,t){const r=t.split("/").length;if(""===e)return r;return r-e.split("/").length}_isSkippedSymbolicLink(e){return!this._settings.followSymbolicLinks&&e.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(e,t){return!this._settings.baseNameMatch&&!t.match(e)}_isSkippedByNegativePatterns(e,r){return!t.pattern.matchAny(e,r)}}}}),tt=T({"node_modules/fast-glob/out/providers/filters/entry.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ce();e.default=class{constructor(e,t){this._settings=e,this._micromatchOptions=t,this.index=new Map}getFilter(e,r){const n=t.pattern.convertPatternsToRe(e,this._micromatchOptions),u=t.pattern.convertPatternsToRe(r,Object.assign(Object.assign({},this._micromatchOptions),{dot:!0}));return e=>this._filter(e,n,u)}_filter(e,r,n){const u=t.path.removeLeadingDotSegment(e.path);if(this._settings.unique&&this._isDuplicateEntry(u))return!1;if(this._onlyFileFilter(e)||this._onlyDirectoryFilter(e))return!1;if(this._isSkippedByAbsoluteNegativePatterns(u,n))return!1;const i=e.dirent.isDirectory(),s=this._isMatchToPatterns(u,r,i)&&!this._isMatchToPatterns(u,n,i);return this._settings.unique&&s&&this._createIndexRecord(u),s}_isDuplicateEntry(e){return this.index.has(e)}_createIndexRecord(e){this.index.set(e,void 0)}_onlyFileFilter(e){return this._settings.onlyFiles&&!e.dirent.isFile()}_onlyDirectoryFilter(e){return this._settings.onlyDirectories&&!e.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(e,r){if(!this._settings.absolute)return!1;const n=t.path.makeAbsolute(this._settings.cwd,e);return t.pattern.matchAny(n,r)}_isMatchToPatterns(e,r,n){const u=t.pattern.matchAny(e,r);return!u&&n?t.pattern.matchAny(e+"/",r):u}}}}),rt=T({"node_modules/fast-glob/out/providers/filters/error.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ce();e.default=class{constructor(e){this._settings=e}getFilter(){return e=>this._isNonFatalError(e)}_isNonFatalError(e){return t.errno.isEnoentCodeError(e)||this._settings.suppressErrors}}}}),nt=T({"node_modules/fast-glob/out/providers/transformers/entry.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Ce();e.default=class{constructor(e){this._settings=e}getTransformer(){return e=>this._transform(e)}_transform(e){let r=e.path;return this._settings.absolute&&(r=t.path.makeAbsolute(this._settings.cwd,r),r=t.path.unixify(r)),this._settings.markDirectories&&e.dirent.isDirectory()&&(r+="/"),this._settings.objectMode?Object.assign(Object.assign({},e),{path:r}):r}}}}),ut=T({"node_modules/fast-glob/out/providers/provider.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("path"),r=et(),n=tt(),u=rt(),i=nt();e.default=class{constructor(e){this._settings=e,this.errorFilter=new u.default(this._settings),this.entryFilter=new n.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new r.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new i.default(this._settings)}_getRootDirectory(e){return t.resolve(this._settings.cwd,e.base)}_getReaderOptions(e){const t="."===e.base?"":e.base;return{basePath:t,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(t,e.positive,e.negative),entryFilter:this.entryFilter.getFilter(e.positive,e.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}}}}),it=T({"node_modules/fast-glob/out/providers/async.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=Qe(),r=ut(),n=class extends r.default{constructor(){super(...arguments),this._reader=new t.default(this._settings)}async read(e){const t=this._getRootDirectory(e),r=this._getReaderOptions(e);return(await this.api(t,e,r)).map((e=>r.transform(e)))}api(e,t,r){return t.dynamic?this._reader.dynamic(e,r):this._reader.static(t.patterns,r)}};e.default=n}}),st=T({"node_modules/fast-glob/out/providers/stream.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=O("stream"),r=ze(),n=ut(),u=class extends n.default{constructor(){super(...arguments),this._reader=new r.default(this._settings)}read(e){const r=this._getRootDirectory(e),n=this._getReaderOptions(e),u=this.api(r,e,n),i=new t.Readable({objectMode:!0,read:()=>{}});return u.once("error",(e=>i.emit("error",e))).on("data",(e=>i.emit("data",n.transform(e)))).once("end",(()=>i.emit("end"))),i.once("close",(()=>u.destroy())),i}api(e,t,r){return t.dynamic?this._reader.dynamic(e,r):this._reader.static(t.patterns,r)}};e.default=u}}),ot=T({"node_modules/fast-glob/out/readers/sync.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=we(),r=Ye(),n=Xe(),u=class extends n.default{constructor(){super(...arguments),this._walkSync=r.walkSync,this._statSync=t.statSync}dynamic(e,t){return this._walkSync(e,t)}static(e,t){const r=[];for(const n of e){const e=this._getFullEntryPath(n),u=this._getEntry(e,n,t);null!==u&&t.entryFilter(u)&&r.push(u)}return r}_getEntry(e,t,r){try{const r=this._getStat(e);return this._makeEntry(r,t)}catch(e){if(r.errorFilter(e))return null;throw e}}_getStat(e){return this._statSync(e,this._fsStatSettings)}};e.default=u}}),at=T({"node_modules/fast-glob/out/providers/sync.js"(e){Object.defineProperty(e,"__esModule",{value:!0});var t=ot(),r=ut(),n=class extends r.default{constructor(){super(...arguments),this._reader=new t.default(this._settings)}read(e){const t=this._getRootDirectory(e),r=this._getReaderOptions(e);return this.api(t,e,r).map(r.transform)}api(e,t,r){return t.dynamic?this._reader.dynamic(e,r):this._reader.static(t.patterns,r)}};e.default=n}}),ct=T({"node_modules/fast-glob/out/settings.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;var t=O("fs"),r=O("os"),n=Math.max(r.cpus().length,1);e.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:t.lstat,lstatSync:t.lstatSync,stat:t.stat,statSync:t.statSync,readdir:t.readdir,readdirSync:t.readdirSync};e.default=class{constructor(e={}){this._options=e,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,n),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0),this.ignore=[].concat(this.ignore)}_getValue(e,t){return void 0===e?t:e}_getFileSystemMethods(t={}){return Object.assign(Object.assign({},e.DEFAULT_FILE_SYSTEM_ADAPTER),t)}}}}),lt=T({"node_modules/fast-glob/out/index.js"(e,t){var r=ye(),n=it(),u=st(),i=at(),s=ct(),o=Ce();async function a(e,t){l(e);const r=c(e,n.default,t),u=await Promise.all(r);return o.array.flatten(u)}function c(e,t,n){const u=[].concat(e),i=new s.default(n),o=r.generate(u,i),a=new t(i);return o.map(a.read,a)}function l(e){if(![].concat(e).every((e=>o.string.isString(e)&&!o.string.isEmpty(e))))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}!function(e){function t(e,t){l(e);const r=c(e,i.default,t);return o.array.flatten(r)}function n(e,t){l(e);const r=c(e,u.default,t);return o.stream.merge(r)}let a;var D;let h;var p;e.glob=e,e.globSync=t,e.globStream=n,e.async=e,e.sync=t,e.stream=n,e.generateTasks=function(e,t){l(e);const n=[].concat(e),u=new s.default(t);return r.generate(n,u)},e.isDynamicPattern=function(e,t){l(e);const r=new s.default(t);return o.pattern.isDynamicPattern(e,r)},e.escapePath=function(e){return l(e),o.path.escape(e)},e.convertPathToPattern=function(e){return l(e),o.path.convertPathToPattern(e)},(D=a=e.posix||(e.posix={})).escapePath=function(e){return l(e),o.path.escapePosixPath(e)},D.convertPathToPattern=function(e){return l(e),o.path.convertPosixPathToPattern(e)},(p=h=e.win32||(e.win32={})).escapePath=function(e){return l(e),o.path.escapeWindowsPath(e)},p.convertPathToPattern=function(e){return l(e),o.path.convertWindowsPathToPattern(e)}}(a||(a={})),t.exports=a}});var Dt,ht,pt,dt,ft=R({"node_modules/chalk/source/vendor/ansi-styles/index.js"(){h=10,p=(e=0)=>t=>`[${t+e}m`,d=(e=0)=>t=>`[${38+e};5;${t}m`,f=(e=0)=>(t,r,n)=>`[${38+e};2;${t};${r};${n}m`,m={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],overline:[53,55],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],blackBright:[90,39],gray:[90,39],grey:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgGray:[100,49],bgGrey:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}},F=Object.keys(m.modifier),E=Object.keys(m.color),g=Object.keys(m.bgColor),C=[...E,...g],y=function(){const e=new Map;for(const[t,r]of Object.entries(m)){for(const[t,n]of Object.entries(r))m[t]={open:`[${n[0]}m`,close:`[${n[1]}m`},r[t]=m[t],e.set(n[0],n[1]);Object.defineProperty(m,t,{value:r,enumerable:!1})}return Object.defineProperty(m,"codes",{value:e,enumerable:!1}),m.color.close="[39m",m.bgColor.close="[49m",m.color.ansi=p(),m.color.ansi256=d(),m.color.ansi16m=f(),m.bgColor.ansi=p(h),m.bgColor.ansi256=d(h),m.bgColor.ansi16m=f(h),Object.defineProperties(m,{rgbToAnsi256:{value:(e,t,r)=>e===t&&t===r?e<8?16:e>248?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(r/255*5),enumerable:!1},hexToRgb:{value(e){const t=/[a-f\d]{6}|[a-f\d]{3}/i.exec(e.toString(16));if(!t)return[0,0,0];let[r]=t;3===r.length&&(r=[...r].map((e=>e+e)).join(""));const n=Number.parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},enumerable:!1},hexToAnsi256:{value:e=>m.rgbToAnsi256(...m.hexToRgb(e)),enumerable:!1},ansi256ToAnsi:{value(e){if(e<8)return 30+e;if(e<16)return e-8+90;let t,r,n;if(e>=232)t=(10*(e-232)+8)/255,r=t,n=t;else{const u=(e-=16)%36;t=Math.floor(e/36)/5,r=Math.floor(u/6)/5,n=u%6/5}const u=2*Math.max(t,r,n);if(0===u)return 30;let i=30+(Math.round(n)<<2|Math.round(r)<<1|Math.round(t));return 2===u&&(i+=60),i},enumerable:!1},rgbToAnsi:{value:(e,t,r)=>m.ansi256ToAnsi(m.rgbToAnsi256(e,t,r)),enumerable:!1},hexToAnsi:{value:e=>m.ansi256ToAnsi(m.hexToAnsi256(e)),enumerable:!1}}),m}(),A=y}});function mt(e,t=(globalThis.Deno?globalThis.Deno.args:i.argv)){const r=e.startsWith("-")?"":1===e.length?"-":"--",n=t.indexOf(r+e),u=t.indexOf("--");return-1!==n&&(-1===u||n<u)}function Ft(e,{streamIsTTY:t,sniffFlags:r=!0}={}){const n=function(){if("FORCE_COLOR"in Dt)return"true"===Dt.FORCE_COLOR?1:"false"===Dt.FORCE_COLOR?0:0===Dt.FORCE_COLOR.length?1:Math.min(Number.parseInt(Dt.FORCE_COLOR,10),3)}();void 0!==n&&(ht=n);const u=r?ht:n;if(0===u)return 0;if(r){if(mt("color=16m")||mt("color=full")||mt("color=truecolor"))return 3;if(mt("color=256"))return 2}if("TF_BUILD"in Dt&&"AGENT_NAME"in Dt)return 1;if(e&&!t&&void 0===u)return 0;const s=u||0;if("dumb"===Dt.TERM)return s;if("win32"===i.platform){const e=Object(function(){var e=new Error("Cannot find module 'os'");throw e.code="MODULE_NOT_FOUND",e}())().split(".");return Number(e[0])>=10&&Number(e[2])>=10586?Number(e[2])>=14931?3:2:1}if("CI"in Dt)return"GITHUB_ACTIONS"in Dt||"GITEA_ACTIONS"in Dt?3:["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","BUILDKITE","DRONE"].some((e=>e in Dt))||"codeship"===Dt.CI_NAME?1:s;if("TEAMCITY_VERSION"in Dt)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(Dt.TEAMCITY_VERSION)?1:0;if("truecolor"===Dt.COLORTERM)return 3;if("xterm-kitty"===Dt.TERM)return 3;if("TERM_PROGRAM"in Dt){const e=Number.parseInt((Dt.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(Dt.TERM_PROGRAM){case"iTerm.app":return e>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(Dt.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Dt.TERM)||"COLORTERM"in Dt?1:s}function Et(e,t={}){return function(e){return 0!==e&&{level:e,hasBasic:!0,has256:e>=2,has16m:e>=3}}(Ft(e,{streamIsTTY:e&&e.isTTY,...t}))}var gt=R({"node_modules/chalk/source/vendor/supports-color/index.js"(){({env:Dt}=i),mt("no-color")||mt("no-colors")||mt("color=false")||mt("color=never")?ht=0:(mt("color")||mt("colors")||mt("color=true")||mt("color=always"))&&(ht=1),pt={stdout:Et({isTTY:Object(function(){var e=new Error("Cannot find module 'tty'");throw e.code="MODULE_NOT_FOUND",e}())(1)}),stderr:Et({isTTY:Object(function(){var e=new Error("Cannot find module 'tty'");throw e.code="MODULE_NOT_FOUND",e}())(2)})},dt=pt}});function Ct(e,t,r){let n=e.indexOf(t);if(-1===n)return e;const u=t.length;let i=0,s="";do{s+=e.slice(i,n)+t+r,i=n+u,n=e.indexOf(t,i)}while(-1!==n);return s+=e.slice(i),s}var yt,At,vt,bt,_t,wt,Bt,St,xt,Ot,Rt,Tt,kt,It,Nt,Lt,jt,Pt,$t,Mt=R({"node_modules/chalk/source/utilities.js"(){}}),Ut={};function Ht(e){return Ot(e)}k(Ut,{Chalk:()=>xt,backgroundColorNames:()=>g,backgroundColors:()=>g,chalkStderr:()=>Pt,colorNames:()=>C,colors:()=>C,default:()=>$t,foregroundColorNames:()=>E,foregroundColors:()=>E,modifierNames:()=>F,modifiers:()=>F,supportsColor:()=>yt,supportsColorStderr:()=>At});var Gt=R({"node_modules/chalk/source/index.js"(){ft(),gt(),Mt(),ft(),({stdout:yt,stderr:At}=dt),vt=Symbol("GENERATOR"),bt=Symbol("STYLER"),_t=Symbol("IS_EMPTY"),wt=["ansi","ansi","ansi256","ansi16m"],Bt=Object.create(null),St=(e,t={})=>{if(t.level&&!(Number.isInteger(t.level)&&t.level>=0&&t.level<=3))throw new Error("The `level` option should be an integer from 0 to 3");const r=yt?yt.level:0;e.level=void 0===t.level?r:t.level},xt=class{constructor(e){return Ot(e)}},Ot=e=>{const t=(...e)=>e.join(" ");return St(t,e),Object.setPrototypeOf(t,Ht.prototype),t},Object.setPrototypeOf(Ht.prototype,Function.prototype);for(const[e,t]of Object.entries(A))Bt[e]={get(){const r=Nt(this,It(t.open,t.close,this[bt]),this[_t]);return Object.defineProperty(this,e,{value:r}),r}};Bt.visible={get(){const e=Nt(this,this[bt],!0);return Object.defineProperty(this,"visible",{value:e}),e}},Rt=(e,t,r,...n)=>"rgb"===e?"ansi16m"===t?A[r].ansi16m(...n):"ansi256"===t?A[r].ansi256(A.rgbToAnsi256(...n)):A[r].ansi(A.rgbToAnsi(...n)):"hex"===e?Rt("rgb",t,r,...A.hexToRgb(...n)):A[r][e](...n),Tt=["rgb","hex","ansi256"];for(const e of Tt){Bt[e]={get(){const{level:t}=this;return function(...r){const n=It(Rt(e,wt[t],"color",...r),A.color.close,this[bt]);return Nt(this,n,this[_t])}}};const t="bg"+e[0].toUpperCase()+e.slice(1);Bt[t]={get(){const{level:t}=this;return function(...r){const n=It(Rt(e,wt[t],"bgColor",...r),A.bgColor.close,this[bt]);return Nt(this,n,this[_t])}}}}kt=Object.defineProperties((()=>{}),{...Bt,level:{enumerable:!0,get(){return this[vt].level},set(e){this[vt].level=e}}}),It=(e,t,r)=>{let n,u;return void 0===r?(n=e,u=t):(n=r.openAll+e,u=t+r.closeAll),{open:e,close:t,openAll:n,closeAll:u,parent:r}},Nt=(e,t,r)=>{const n=(...e)=>Lt(n,1===e.length?""+e[0]:e.join(" "));return Object.setPrototypeOf(n,kt),n[vt]=e,n[bt]=t,n[_t]=r,n},Lt=(e,t)=>{if(e.level<=0||!t)return e[_t]?"":t;let r=e[bt];if(void 0===r)return t;const{openAll:n,closeAll:u}=r;if(t.includes(""))for(;void 0!==r;)t=Ct(t,r.close,r.open),r=r.parent;const i=t.indexOf("\n");return-1!==i&&(t=function(e,t,r,n){let u=0,i="";do{const s="\r"===e[n-1];i+=e.slice(u,s?n-1:n)+t+(s?"\r\n":"\n")+r,u=n+1,n=e.indexOf("\n",u)}while(-1!==n);return i+=e.slice(u),i}(t,u,n,i)),n+t+u},Object.defineProperties(Ht.prototype,Bt),jt=Ht(),Pt=Ht({level:At?At.level:0}),$t=jt}}),Wt=T({"node_modules/semver/internal/debug.js"(e,t){var r="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};t.exports=r}}),Vt=T({"node_modules/semver/internal/constants.js"(e,t){var r=Number.MAX_SAFE_INTEGER||9007199254740991;t.exports={MAX_LENGTH:256,MAX_SAFE_COMPONENT_LENGTH:16,MAX_SAFE_BUILD_LENGTH:250,MAX_SAFE_INTEGER:r,RELEASE_TYPES:["major","premajor","minor","preminor","patch","prepatch","prerelease"],SEMVER_SPEC_VERSION:"2.0.0",FLAG_INCLUDE_PRERELEASE:1,FLAG_LOOSE:2}}}),Kt=T({"node_modules/semver/internal/re.js"(e,t){var{MAX_SAFE_COMPONENT_LENGTH:r,MAX_SAFE_BUILD_LENGTH:n,MAX_LENGTH:u}=Vt(),i=Wt(),s=(e=t.exports={}).re=[],o=e.safeRe=[],a=e.src=[],c=e.t={},l=0,D="[a-zA-Z0-9-]",h=[["\\s",1],["\\d",u],[D,n]],p=(e,t,r)=>{const n=(e=>{for(const[t,r]of h)e=e.split(`${t}*`).join(`${t}{0,${r}}`).split(`${t}+`).join(`${t}{1,${r}}`);return e})(t),u=l++;i(e,u,t),c[e]=u,a[u]=t,s[u]=new RegExp(t,r?"g":void 0),o[u]=new RegExp(n,r?"g":void 0)};p("NUMERICIDENTIFIER","0|[1-9]\\d*"),p("NUMERICIDENTIFIERLOOSE","\\d+"),p("NONNUMERICIDENTIFIER",`\\d*[a-zA-Z-]${D}*`),p("MAINVERSION",`(${a[c.NUMERICIDENTIFIER]})\\.(${a[c.NUMERICIDENTIFIER]})\\.(${a[c.NUMERICIDENTIFIER]})`),p("MAINVERSIONLOOSE",`(${a[c.NUMERICIDENTIFIERLOOSE]})\\.(${a[c.NUMERICIDENTIFIERLOOSE]})\\.(${a[c.NUMERICIDENTIFIERLOOSE]})`),p("PRERELEASEIDENTIFIER",`(?:${a[c.NUMERICIDENTIFIER]}|${a[c.NONNUMERICIDENTIFIER]})`),p("PRERELEASEIDENTIFIERLOOSE",`(?:${a[c.NUMERICIDENTIFIERLOOSE]}|${a[c.NONNUMERICIDENTIFIER]})`),p("PRERELEASE",`(?:-(${a[c.PRERELEASEIDENTIFIER]}(?:\\.${a[c.PRERELEASEIDENTIFIER]})*))`),p("PRERELEASELOOSE",`(?:-?(${a[c.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${a[c.PRERELEASEIDENTIFIERLOOSE]})*))`),p("BUILDIDENTIFIER",`${D}+`),p("BUILD",`(?:\\+(${a[c.BUILDIDENTIFIER]}(?:\\.${a[c.BUILDIDENTIFIER]})*))`),p("FULLPLAIN",`v?${a[c.MAINVERSION]}${a[c.PRERELEASE]}?${a[c.BUILD]}?`),p("FULL",`^${a[c.FULLPLAIN]}$`),p("LOOSEPLAIN",`[v=\\s]*${a[c.MAINVERSIONLOOSE]}${a[c.PRERELEASELOOSE]}?${a[c.BUILD]}?`),p("LOOSE",`^${a[c.LOOSEPLAIN]}$`),p("GTLT","((?:<|>)?=?)"),p("XRANGEIDENTIFIERLOOSE",`${a[c.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),p("XRANGEIDENTIFIER",`${a[c.NUMERICIDENTIFIER]}|x|X|\\*`),p("XRANGEPLAIN",`[v=\\s]*(${a[c.XRANGEIDENTIFIER]})(?:\\.(${a[c.XRANGEIDENTIFIER]})(?:\\.(${a[c.XRANGEIDENTIFIER]})(?:${a[c.PRERELEASE]})?${a[c.BUILD]}?)?)?`),p("XRANGEPLAINLOOSE",`[v=\\s]*(${a[c.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[c.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[c.XRANGEIDENTIFIERLOOSE]})(?:${a[c.PRERELEASELOOSE]})?${a[c.BUILD]}?)?)?`),p("XRANGE",`^${a[c.GTLT]}\\s*${a[c.XRANGEPLAIN]}$`),p("XRANGELOOSE",`^${a[c.GTLT]}\\s*${a[c.XRANGEPLAINLOOSE]}$`),p("COERCEPLAIN",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?`),p("COERCE",`${a[c.COERCEPLAIN]}(?:$|[^\\d])`),p("COERCEFULL",a[c.COERCEPLAIN]+`(?:${a[c.PRERELEASE]})?(?:${a[c.BUILD]})?(?:$|[^\\d])`),p("COERCERTL",a[c.COERCE],!0),p("COERCERTLFULL",a[c.COERCEFULL],!0),p("LONETILDE","(?:~>?)"),p("TILDETRIM",`(\\s*)${a[c.LONETILDE]}\\s+`,!0),e.tildeTrimReplace="$1~",p("TILDE",`^${a[c.LONETILDE]}${a[c.XRANGEPLAIN]}$`),p("TILDELOOSE",`^${a[c.LONETILDE]}${a[c.XRANGEPLAINLOOSE]}$`),p("LONECARET","(?:\\^)"),p("CARETTRIM",`(\\s*)${a[c.LONECARET]}\\s+`,!0),e.caretTrimReplace="$1^",p("CARET",`^${a[c.LONECARET]}${a[c.XRANGEPLAIN]}$`),p("CARETLOOSE",`^${a[c.LONECARET]}${a[c.XRANGEPLAINLOOSE]}$`),p("COMPARATORLOOSE",`^${a[c.GTLT]}\\s*(${a[c.LOOSEPLAIN]})$|^$`),p("COMPARATOR",`^${a[c.GTLT]}\\s*(${a[c.FULLPLAIN]})$|^$`),p("COMPARATORTRIM",`(\\s*)${a[c.GTLT]}\\s*(${a[c.LOOSEPLAIN]}|${a[c.XRANGEPLAIN]})`,!0),e.comparatorTrimReplace="$1$2$3",p("HYPHENRANGE",`^\\s*(${a[c.XRANGEPLAIN]})\\s+-\\s+(${a[c.XRANGEPLAIN]})\\s*$`),p("HYPHENRANGELOOSE",`^\\s*(${a[c.XRANGEPLAINLOOSE]})\\s+-\\s+(${a[c.XRANGEPLAINLOOSE]})\\s*$`),p("STAR","(<|>)?=?\\s*\\*"),p("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),p("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")}}),qt=T({"node_modules/semver/internal/parse-options.js"(e,t){var r=Object.freeze({loose:!0}),n=Object.freeze({});t.exports=e=>e?"object"!=typeof e?r:e:n}}),Yt=T({"node_modules/semver/internal/identifiers.js"(e,t){var r=/^[0-9]+$/,n=(e,t)=>{const n=r.test(e),u=r.test(t);return n&&u&&(e=+e,t=+t),e===t?0:n&&!u?-1:u&&!n?1:e<t?-1:1};t.exports={compareIdentifiers:n,rcompareIdentifiers:(e,t)=>n(t,e)}}}),Xt=T({"node_modules/semver/classes/semver.js"(e,t){var r=Wt(),{MAX_LENGTH:n,MAX_SAFE_INTEGER:u}=Vt(),{safeRe:i,t:s}=Kt(),o=qt(),{compareIdentifiers:a}=Yt();t.exports=class e{constructor(t,a){if(a=o(a),t instanceof e){if(t.loose===!!a.loose&&t.includePrerelease===!!a.includePrerelease)return t;t=t.version}else if("string"!=typeof t)throw new TypeError(`Invalid version. Must be a string. Got type "${typeof t}".`);if(t.length>n)throw new TypeError(`version is longer than ${n} characters`);r("SemVer",t,a),this.options=a,this.loose=!!a.loose,this.includePrerelease=!!a.includePrerelease;const c=t.trim().match(a.loose?i[s.LOOSE]:i[s.FULL]);if(!c)throw new TypeError(`Invalid Version: ${t}`);if(this.raw=t,this.major=+c[1],this.minor=+c[2],this.patch=+c[3],this.major>u||this.major<0)throw new TypeError("Invalid major version");if(this.minor>u||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>u||this.patch<0)throw new TypeError("Invalid patch version");c[4]?this.prerelease=c[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<u)return t}return e})):this.prerelease=[],this.build=c[5]?c[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(t){if(r("SemVer.compare",this.version,this.options,t),!(t instanceof e)){if("string"==typeof t&&t===this.version)return 0;t=new e(t,this.options)}return t.version===this.version?0:this.compareMain(t)||this.comparePre(t)}compareMain(t){return t instanceof e||(t=new e(t,this.options)),a(this.major,t.major)||a(this.minor,t.minor)||a(this.patch,t.patch)}comparePre(t){if(t instanceof e||(t=new e(t,this.options)),this.prerelease.length&&!t.prerelease.length)return-1;if(!this.prerelease.length&&t.prerelease.length)return 1;if(!this.prerelease.length&&!t.prerelease.length)return 0;let n=0;do{const e=this.prerelease[n],u=t.prerelease[n];if(r("prerelease compare",n,e,u),void 0===e&&void 0===u)return 0;if(void 0===u)return 1;if(void 0===e)return-1;if(e!==u)return a(e,u)}while(++n)}compareBuild(t){t instanceof e||(t=new e(t,this.options));let n=0;do{const e=this.build[n],u=t.build[n];if(r("build compare",n,e,u),void 0===e&&void 0===u)return 0;if(void 0===u)return 1;if(void 0===e)return-1;if(e!==u)return a(e,u)}while(++n)}inc(e,t,r){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t,r);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t,r);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t,r),this.inc("pre",t,r);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t,r),this.inc("pre",t,r);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":{const e=Number(r)?1:0;if(!t&&!1===r)throw new Error("invalid increment argument: identifier is empty");if(0===this.prerelease.length)this.prerelease=[e];else{let n=this.prerelease.length;for(;--n>=0;)"number"==typeof this.prerelease[n]&&(this.prerelease[n]++,n=-2);if(-1===n){if(t===this.prerelease.join(".")&&!1===r)throw new Error("invalid increment argument: identifier already exists");this.prerelease.push(e)}}if(t){let n=[t,e];!1===r&&(n=[t]),0===a(this.prerelease[0],t)?isNaN(this.prerelease[1])&&(this.prerelease=n):this.prerelease=n}break}default:throw new Error(`invalid increment argument: ${e}`)}return this.raw=this.format(),this.build.length&&(this.raw+=`+${this.build.join(".")}`),this}}}}),zt=T({"node_modules/semver/functions/compare.js"(e,t){var r=Xt();t.exports=(e,t,n)=>new r(e,n).compare(new r(t,n))}}),Qt=T({"node_modules/semver/functions/gte.js"(e,t){var r=zt();t.exports=(e,t,n)=>r(e,t,n)>=0}}),Jt=T({"node_modules/pseudomap/pseudomap.js"(e,t){var r=Object.prototype.hasOwnProperty;function n(e){if(!(this instanceof n))throw new TypeError("Constructor PseudoMap requires 'new'");if(this.clear(),e)if(e instanceof n||"function"==typeof Map&&e instanceof Map)e.forEach((function(e,t){this.set(t,e)}),this);else{if(!Array.isArray(e))throw new TypeError("invalid argument");e.forEach((function(e){this.set(e[0],e[1])}),this)}}function u(e,t){return e===t||e!=e&&t!=t}function i(e,t,r){this.key=e,this.value=t,this._index=r}function s(e,t){for(var n=0,i="_"+t,s=i;r.call(e,s);s=i+n++)if(u(e[s].key,t))return e[s]}t.exports=n,n.prototype.forEach=function(e,t){t=t||this,Object.keys(this._data).forEach((function(r){"size"!==r&&e.call(t,this._data[r].value,this._data[r].key)}),this)},n.prototype.has=function(e){return!!s(this._data,e)},n.prototype.get=function(e){var t=s(this._data,e);return t&&t.value},n.prototype.set=function(e,t){!function(e,t,n){for(var s=0,o="_"+t,a=o;r.call(e,a);a=o+s++)if(u(e[a].key,t))return void(e[a].value=n);e.size++,e[a]=new i(t,n,a)}(this._data,e,t)},n.prototype.delete=function(e){var t=s(this._data,e);t&&(delete this._data[t._index],this._data.size--)},n.prototype.clear=function(){var e=Object.create(null);e.size=0,Object.defineProperty(this,"_data",{value:e,enumerable:!1,configurable:!0,writable:!1})},Object.defineProperty(n.prototype,"size",{get:function(){return this._data.size},set:function(e){},enumerable:!0,configurable:!0}),n.prototype.values=n.prototype.keys=n.prototype.entries=function(){throw new Error("iterators are not implemented in this version")}}}),Zt=T({"node_modules/pseudomap/map.js"(e,t){"pseudomap"===process.env.npm_package_name&&"test"===process.env.npm_lifecycle_script&&(process.env.TEST_PSEUDOMAP="true"),"function"!=typeof Map||process.env.TEST_PSEUDOMAP?t.exports=Jt():t.exports=Map}}),er=T({"node_modules/yallist/yallist.js"(e,t){function r(e){var t=this;if(t instanceof r||(t=new r),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var n=0,u=arguments.length;n<u;n++)t.push(arguments[n]);return t}function n(e,t){e.tail=new i(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function u(e,t){e.head=new i(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function i(e,t,r,n){if(!(this instanceof i))return new i(e,t,r,n);this.list=n,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}t.exports=r,r.Node=i,r.create=r,r.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,r=e.prev;t&&(t.prev=r),r&&(r.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=r),e.list.length--,e.next=null,e.prev=null,e.list=null},r.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},r.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},r.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)n(this,arguments[e]);return this.length},r.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)u(this,arguments[e]);return this.length},r.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},r.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},r.prototype.forEach=function(e,t){t=t||this;for(var r=this.head,n=0;null!==r;n++)e.call(t,r.value,n,this),r=r.next},r.prototype.forEachReverse=function(e,t){t=t||this;for(var r=this.tail,n=this.length-1;null!==r;n--)e.call(t,r.value,n,this),r=r.prev},r.prototype.get=function(e){for(var t=0,r=this.head;null!==r&&t<e;t++)r=r.next;if(t===e&&null!==r)return r.value},r.prototype.getReverse=function(e){for(var t=0,r=this.tail;null!==r&&t<e;t++)r=r.prev;if(t===e&&null!==r)return r.value},r.prototype.map=function(e,t){t=t||this;for(var n=new r,u=this.head;null!==u;)n.push(e.call(t,u.value,this)),u=u.next;return n},r.prototype.mapReverse=function(e,t){t=t||this;for(var n=new r,u=this.tail;null!==u;)n.push(e.call(t,u.value,this)),u=u.prev;return n},r.prototype.reduce=function(e,t){var r,n=this.head;if(arguments.length>1)r=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var u=0;null!==n;u++)r=e(r,n.value,u),n=n.next;return r},r.prototype.reduceReverse=function(e,t){var r,n=this.tail;if(arguments.length>1)r=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var u=this.length-1;null!==n;u--)r=e(r,n.value,u),n=n.prev;return r},r.prototype.toArray=function(){for(var e=new Array(this.length),t=0,r=this.head;null!==r;t++)e[t]=r.value,r=r.next;return e},r.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,r=this.tail;null!==r;t++)e[t]=r.value,r=r.prev;return e},r.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var n=new r;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var u=0,i=this.head;null!==i&&u<e;u++)i=i.next;for(;null!==i&&u<t;u++,i=i.next)n.push(i.value);return n},r.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var n=new r;if(t<e||t<0)return n;e<0&&(e=0),t>this.length&&(t=this.length);for(var u=this.length,i=this.tail;null!==i&&u>t;u--)i=i.prev;for(;null!==i&&u>e;u--,i=i.prev)n.push(i.value);return n},r.prototype.reverse=function(){for(var e=this.head,t=this.tail,r=e;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=t,this.tail=e,this}}}),tr=T({"node_modules/editorconfig/node_modules/lru-cache/index.js"(e,t){t.exports=m;var r,n=Zt(),u=O("util"),i=er(),s=(r="function"==typeof Symbol&&"1"!==process.env._nodeLRUCacheForceNoSymbol?function(e){return Symbol(e)}:function(e){return"_"+e})("max"),o=r("length"),a=r("lengthCalculator"),c=r("allowStale"),l=r("maxAge"),D=r("dispose"),h=r("noDisposeOnSet"),p=r("lruList"),d=r("cache");function f(){return 1}function m(e){if(!(this instanceof m))return new m(e);"number"==typeof e&&(e={max:e}),e||(e={});var t=this[s]=e.max;(!t||"number"!=typeof t||t<=0)&&(this[s]=1/0);var r=e.length||f;"function"!=typeof r&&(r=f),this[a]=r,this[c]=e.stale||!1,this[l]=e.maxAge||0,this[D]=e.dispose,this[h]=e.noDisposeOnSet||!1,this.reset()}function F(e,t,r,n){var u=r.value;g(e,u)&&(y(e,r),e[c]||(u=void 0)),u&&t.call(n,u.value,u.key,e)}function E(e,t,r){var n=e[d].get(t);if(n){var u=n.value;g(e,u)?(y(e,n),e[c]||(u=void 0)):r&&e[p].unshiftNode(n),u&&(u=u.value)}return u}function g(e,t){if(!t||!t.maxAge&&!e[l])return!1;var r=Date.now()-t.now;return t.maxAge?r>t.maxAge:e[l]&&r>e[l]}function C(e){if(e[o]>e[s])for(var t=e[p].tail;e[o]>e[s]&&null!==t;){var r=t.prev;y(e,t),t=r}}function y(e,t){if(t){var r=t.value;e[D]&&e[D](r.key,r.value),e[o]-=r.length,e[d].delete(r.key),e[p].removeNode(t)}}function A(e,t,r,n,u){this.key=e,this.value=t,this.length=r,this.now=n,this.maxAge=u||0}Object.defineProperty(m.prototype,"max",{set:function(e){(!e||"number"!=typeof e||e<=0)&&(e=1/0),this[s]=e,C(this)},get:function(){return this[s]},enumerable:!0}),Object.defineProperty(m.prototype,"allowStale",{set:function(e){this[c]=!!e},get:function(){return this[c]},enumerable:!0}),Object.defineProperty(m.prototype,"maxAge",{set:function(e){(!e||"number"!=typeof e||e<0)&&(e=0),this[l]=e,C(this)},get:function(){return this[l]},enumerable:!0}),Object.defineProperty(m.prototype,"lengthCalculator",{set:function(e){"function"!=typeof e&&(e=f),e!==this[a]&&(this[a]=e,this[o]=0,this[p].forEach((function(e){e.length=this[a](e.value,e.key),this[o]+=e.length}),this)),C(this)},get:function(){return this[a]},enumerable:!0}),Object.defineProperty(m.prototype,"length",{get:function(){return this[o]},enumerable:!0}),Object.defineProperty(m.prototype,"itemCount",{get:function(){return this[p].length},enumerable:!0}),m.prototype.rforEach=function(e,t){t=t||this;for(var r=this[p].tail;null!==r;){var n=r.prev;F(this,e,r,t),r=n}},m.prototype.forEach=function(e,t){t=t||this;for(var r=this[p].head;null!==r;){var n=r.next;F(this,e,r,t),r=n}},m.prototype.keys=function(){return this[p].toArray().map((function(e){return e.key}),this)},m.prototype.values=function(){return this[p].toArray().map((function(e){return e.value}),this)},m.prototype.reset=function(){this[D]&&this[p]&&this[p].length&&this[p].forEach((function(e){this[D](e.key,e.value)}),this),this[d]=new n,this[p]=new i,this[o]=0},m.prototype.dump=function(){return this[p].map((function(e){if(!g(this,e))return{k:e.key,v:e.value,e:e.now+(e.maxAge||0)}}),this).toArray().filter((function(e){return e}))},m.prototype.dumpLru=function(){return this[p]},m.prototype.inspect=function(e,t){var r="LRUCache {",n=!1;this[c]&&(r+="\n  allowStale: true",n=!0);var i=this[s];i&&i!==1/0&&(n&&(r+=","),r+="\n  max: "+u.inspect(i,t),n=!0);var D=this[l];D&&(n&&(r+=","),r+="\n  maxAge: "+u.inspect(D,t),n=!0);var h=this[a];h&&h!==f&&(n&&(r+=","),r+="\n  length: "+u.inspect(this[o],t),n=!0);var d=!1;return this[p].forEach((function(e){d?r+=",\n  ":(n&&(r+=",\n"),d=!0,r+="\n  ");var i=u.inspect(e.key).split("\n").join("\n  "),s={value:e.value};e.maxAge!==D&&(s.maxAge=e.maxAge),h!==f&&(s.length=e.length),g(this,e)&&(s.stale=!0),s=u.inspect(s,t).split("\n").join("\n  "),r+=i+" => "+s})),(d||n)&&(r+="\n"),r+="}"},m.prototype.set=function(e,t,r){var n=(r=r||this[l])?Date.now():0,u=this[a](t,e);if(this[d].has(e)){if(u>this[s])return y(this,this[d].get(e)),!1;var i=this[d].get(e).value;return this[D]&&(this[h]||this[D](e,i.value)),i.now=n,i.maxAge=r,i.value=t,this[o]+=u-i.length,i.length=u,this.get(e),C(this),!0}var c=new A(e,t,u,n,r);return c.length>this[s]?(this[D]&&this[D](e,t),!1):(this[o]+=c.length,this[p].unshift(c),this[d].set(e,this[p].head),C(this),!0)},m.prototype.has=function(e){return!!this[d].has(e)&&!g(this,this[d].get(e).value)},m.prototype.get=function(e){return E(this,e,!0)},m.prototype.peek=function(e){return E(this,e,!1)},m.prototype.pop=function(){var e=this[p].tail;return e?(y(this,e),e.value):null},m.prototype.del=function(e){y(this,this[d].get(e))},m.prototype.load=function(e){this.reset();for(var t=Date.now(),r=e.length-1;r>=0;r--){var n=e[r],u=n.e||0;if(0===u)this.set(n.k,n.v);else{var i=u-t;i>0&&this.set(n.k,n.v,i)}}},m.prototype.prune=function(){var e=this;this[d].forEach((function(t,r){E(e,r,!1)}))}}}),rr=T({"node_modules/sigmund/sigmund.js"(e,t){t.exports=function(e,t){t=t||10;var r=[],n="",u=RegExp;return function e(i,s){if(s>t)return;if("function"==typeof i||void 0===i)return;if("object"!=typeof i||!i||i instanceof u)return void(n+=i);if(-1!==r.indexOf(i)||s===t)return;r.push(i),n+="{",Object.keys(i).forEach((function(t,r,u){if("_"!==t.charAt(0)){var o=typeof i[t];"function"!==o&&"undefined"!==o&&(n+=t,e(i[t],s+1))}}))}(e,0),n}}}),nr=T({"node_modules/editorconfig/src/lib/fnmatch.js"(e,t){var r="object"==typeof process?process.platform:"win32";t?t.exports=p:e.minimatch=p,p.Minimatch=d;var n=tr(),u=p.cache=new n({max:100}),i=p.GLOBSTAR=d.GLOBSTAR={},s=rr(),o=O("path"),a="[^/]",c=a+"*?",l="().*{}+?[]^$\\!".split("").reduce((function(e,t){return e[t]=!0,e}),{});var D=/\/+/;function h(e,t){e=e||{},t=t||{};var r={};return Object.keys(t).forEach((function(e){r[e]=t[e]})),Object.keys(e).forEach((function(t){r[t]=e[t]})),r}function p(e,t,r){if("string"!=typeof t)throw new TypeError("glob pattern string required");return r||(r={}),!(!r.nocomment&&"#"===t.charAt(0))&&(""===t.trim()?""===e:new d(t,r).match(e))}function d(e,t){if(!(this instanceof d))return new d(e,t,u);if("string"!=typeof e)throw new TypeError("glob pattern string required");t||(t={}),"win32"===r&&(e=e.split("\\").join("/"));var n=e+"\n"+s(t),i=p.cache.get(n);if(i)return i;p.cache.set(n,this),this.options=t,this.set=[],this.pattern=e,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.make()}p.monkeyPatch=function(){var e=Object.getOwnPropertyDescriptor(String.prototype,"match"),t=e.value;e.value=function(e){return e instanceof d?e.match(this):t.call(this,e)},Object.defineProperty(String.prototype,e)},p.filter=function(e,t){return t=t||{},function(r,n,u){return p(r,e,t)}},p.defaults=function(e){if(!e||!Object.keys(e).length)return p;var t=p,r=function(r,n,u){return t.minimatch(r,n,h(e,u))};return r.Minimatch=function(r,n){return new t.Minimatch(r,h(e,n))},r},d.defaults=function(e){return e&&Object.keys(e).length?p.defaults(e).Minimatch:d},d.prototype.make=function(){if(this._made)return;var e=this.pattern,t=this.options;if(!t.nocomment&&"#"===e.charAt(0))return void(this.comment=!0);if(!e)return void(this.empty=!0);this.parseNegate();var r=this.globSet=this.braceExpand();t.debug&&console.error(this.pattern,r);r=this.globParts=r.map((function(e){return e.split(D)})),t.debug&&console.error(this.pattern,r);r=r.map((function(e,t,r){return e.map(this.parse,this)}),this),t.debug&&console.error(this.pattern,r);r=r.filter((function(e){return-1===e.indexOf(!1)})),t.debug&&console.error(this.pattern,r);this.set=r},d.prototype.parseNegate=function(){var e=this.pattern,t=!1,r=this.options,n=0;if(r.nonegate)return;for(var u=0,i=e.length;u<i&&"!"===e.charAt(u);u++)t=!t,n++;n&&(this.pattern=e.substr(n));this.negate=t},p.braceExpand=function(e,t){return new d(e,t).braceExpand()},d.prototype.braceExpand=function e(t,r){if(r=r||this.options,void 0===(t=void 0===t?this.pattern:t))throw new Error("undefined pattern");if(r.nobrace||!t.match(/\{.*\}/))return[t];var n=!1;if("{"!==t.charAt(0)){for(var u=null,i=0,s=t.length;i<s;i++){if("\\"===(E=t.charAt(i)))n=!n;else if("{"===E&&!n){u=t.substr(0,i);break}}return null===u?[t]:e(t.substr(i),r).map((function(e){return u+e}))}var o=t.match(/^\{(-?[0-9]+)\.\.(-?[0-9]+)\}/);if(o){var a=e(t.substr(o[0].length),r),c=+o[1],l=+o[2],D=c>l?-1:1,h=[];for(i=c;i!=l+D;i+=D)for(var p=0,d=a.length;p<d;p++)h.push(i+a[p]);return h}i=1;var f=1,m=(h=[],"");n=!1;function F(){h.push(m),m=""}e:for(i=1,s=t.length;i<s;i++){var E=t.charAt(i);if(n)n=!1,m+="\\"+E;else switch(E){case"\\":n=!0;continue;case"{":f++,m+="{";continue;case"}":if(0===--f){F(),i++;break e}m+=E;continue;case",":1===f?F():m+=E;continue;default:m+=E;continue}}if(0!==f)return e("\\"+t,r);a=e(t.substr(i),r);var g=1===h.length;h=h.map((function(t){return e(t,r)})),h=h.reduce((function(e,t){return e.concat(t)})),g&&(h=h.map((function(e){return"{"+e+"}"})));var C=[];for(i=0,s=h.length;i<s;i++)for(p=0,d=a.length;p<d;p++)C.push(h[i]+a[p]);return C},d.prototype.parse=function(e,t){var r=this.options;if(!r.noglobstar&&"**"===e)return i;if(""===e)return"";var n,u,s,o="",D=!!r.nocase,h=!1,p=[],d=!1,m=-1,F=-1,E="."===e.charAt(0)?"":r.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)";function g(){if(u){switch(u){case"*":o+=c,D=!0;break;case"?":o+=a,D=!0;break;default:o+="\\"+u}u=!1}}for(var C,y=0,A=e.length;y<A&&(C=e.charAt(y));y++)if(r.debug&&console.error("%s\t%s %s %j",e,y,o,C),h&&l[C])o+="\\"+C,h=!1;else switch(C){case"/":return!1;case"\\":g(),h=!0;continue;case"?":case"*":case"+":case"@":case"!":if(r.debug&&console.error("%s\t%s %s %j <-- stateChar",e,y,o,C),d){"!"===C&&y===F+1&&(C="^"),o+=C;continue}g(),u=C,r.noext&&g();continue;case"(":if(d){o+="(";continue}if(!u){o+="\\(";continue}n=u,p.push({type:n,start:y-1,reStart:o.length}),o+="!"===u?"(?:(?!":"(?:",u=!1;continue;case")":if(d||!p.length){o+="\\)";continue}switch(D=!0,o+=")",n=p.pop().type){case"!":o+="[^/]*?)";break;case"?":case"+":case"*":o+=n}continue;case"|":if(d||!p.length||h){o+="\\|",h=!1;continue}o+="|";continue;case"[":if(g(),d){o+="\\"+C;continue}d=!0,F=y,m=o.length,o+=C;continue;case"]":if(y===F+1||!d){o+="\\"+C,h=!1;continue}D=!0,d=!1,o+=C;continue;default:g(),h?h=!1:!l[C]||"^"===C&&d||(o+="\\"),o+=C}if(d){var v=e.substr(F+1),b=this.parse(v,f);o=o.substr(0,m)+"\\["+b[0],D=D||b[1]}for(;s=p.pop();){var _=o.slice(s.reStart+3);_=_.replace(/((?:\\{2})*)(\\?)\|/g,(function(e,t,r){return r||(r="\\"),t+t+r+"|"}));var w="*"===s.type?c:"?"===s.type?a:"\\"+s.type;D=!0,o=o.slice(0,s.reStart)+w+"\\("+_}g(),h&&(o+="\\\\");var B=!1;switch(o.charAt(0)){case".":case"[":case"(":B=!0}""!==o&&D&&(o="(?=.)"+o);B&&(o=E+o);if(t===f)return[o,D];if(!D)return function(e){return e.replace(/\\(.)/g,"$1")}(e);var S=r.nocase?"i":"",x=new RegExp("^"+o+"$",S);return x._glob=e,x._src=o,x};var f={};p.makeRe=function(e,t){return new d(e,t||{}).makeRe()},d.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var e=this.set;if(!e.length)return this.regexp=!1;var t=this.options,r=t.noglobstar?c:t.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",n=t.nocase?"i":"",u=e.map((function(e){return e.map((function(e){return e===i?r:"string"==typeof e?function(e){return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}(e):e._src})).join("\\/")})).join("|");u="^(?:"+u+")$",this.negate&&(u="^(?!"+u+").*$");try{return this.regexp=new RegExp(u,n)}catch(e){return this.regexp=!1}},p.match=function(e,t,r){var n=new d(t,r);return e=e.filter((function(e){return n.match(e)})),r.nonull&&!e.length&&e.push(t),e},d.prototype.match=function(e,t){if(this.comment)return!1;if(this.empty)return""===e;if("/"===e&&t)return!0;var n=this.options;"win32"===r&&(e=e.split("\\").join("/"));e=e.split(D),n.debug&&console.error(this.pattern,"split",e);for(var u=this.set,i=0,s=u.length;i<s;i++){var o=u[i];if(this.matchOne(e,o,t))return!!n.flipNegate||!this.negate}return!n.flipNegate&&this.negate},d.prototype.matchOne=function(e,t,r){var n=this.options;n.debug&&console.error("matchOne",{this:this,file:e,pattern:t}),n.matchBase&&1===t.length&&(e=o.basename(e.join("/")).split("/")),n.debug&&console.error("matchOne",e.length,t.length);for(var u=0,s=0,a=e.length,c=t.length;u<a&&s<c;u++,s++){n.debug&&console.error("matchOne loop");var l,D=t[s],h=e[u];if(n.debug&&console.error(t,D,h),!1===D)return!1;if(D===i){n.debug&&console.error("GLOBSTAR",[t,D,h]);var p=u,d=s+1;if(d===c){for(n.debug&&console.error("** at the end");u<a;u++)if("."===e[u]||".."===e[u]||!n.dot&&"."===e[u].charAt(0))return!1;return!0}e:for(;p<a;){var f=e[p];if(n.debug&&console.error("\nglobstar while",e,p,t,d,f),this.matchOne(e.slice(p),t.slice(d),r))return n.debug&&console.error("globstar found match!",p,a,f),!0;if("."===f||".."===f||!n.dot&&"."===f.charAt(0)){n.debug&&console.error("dot detected!",e,p,t,d);break e}n.debug&&console.error("globstar swallow a segment, and continue"),p++}return!(!r||p!==a)}if("string"==typeof D?(l=n.nocase?h.toLowerCase()===D.toLowerCase():h===D,n.debug&&console.error("string match",D,h,l)):(l=h.match(D),n.debug&&console.error("pattern match",D,h,l)),!l)return!1}if(u===a&&s===c)return!0;if(u===a)return r;if(s===c)return u===a-1&&""===e[u];throw new Error("wtf?")}}}),ur=T({"node_modules/editorconfig/src/lib/ini.js"(e){var t=e&&e.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(u,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){e.done?u(e.value):new r((function(t){t(e.value)})).then(s,o)}a((n=n.apply(e,t||[])).next())}))},r=e&&e.__generator||function(e,t){var r,n,u,i,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(u=2&i[0]?n.return:i[0]?n.throw||((u=n.return)&&u.call(n),0):n.next)&&!(u=u.call(n,i[1])).done)return u;switch(n=0,u&&(i=[2&i[0],u.value]),i[0]){case 0:case 1:u=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(u=s.trys,(u=u.length>0&&u[u.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!u||i[1]>u[0]&&i[1]<u[3])){s.label=i[1];break}if(6===i[0]&&s.label<u[1]){s.label=u[1],u=i;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(i);break}u[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=u=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},n=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(e,"__esModule",{value:!0});var u=n(O("fs")),i={section:/^\s*\[(([^#;]|\\#|\\;)+)\]\s*([#;].*)?$/,param:/^\s*([\w\.\-\_]+)\s*[=:]\s*(.*?)\s*([#;].*)?$/,comment:/^\s*[#;].*$/};function s(e){var t={},r=null,n=[[r,t]];return e.split(/\r\n|\r|\n/).forEach((function(e){var u;i.comment.test(e)||(i.param.test(e)?(u=e.match(i.param),t[u[1]]=u[2]):i.section.test(e)&&(u=e.match(i.section),r=u[1],t={},n.push([r,t])))})),n}e.parse=function(e){return t(this,void 0,void 0,(function(){return r(this,(function(t){return[2,new Promise((function(t,r){u.readFile(e,"utf8",(function(e,n){e?r(e):t(s(n))}))}))]}))}))},e.parseSync=function(e){return s(u.readFileSync(e,"utf8"))},e.parseString=s}}),ir=T({"node_modules/editorconfig/package.json"(e,t){t.exports={name:"editorconfig",version:"0.15.3",description:"EditorConfig File Locator and Interpreter for Node.js",keywords:["editorconfig","core"],main:"src/index.js",contributors:["Hong Xu (topbug.net)","Jed Mao (https://github.com/jedmao/)","Trey Hunner (http://treyhunner.com)"],directories:{bin:"./bin",lib:"./lib"},scripts:{clean:"rimraf dist",prebuild:"npm run clean",build:"tsc",pretest:"npm run lint && npm run build && npm run copy && cmake .",test:"ctest .","pretest:ci":"npm run pretest","test:ci":"ctest -VV --output-on-failure .",lint:"npm run eclint && npm run tslint",eclint:'eclint check --indent_size ignore "src/**"',tslint:"tslint --project tsconfig.json --exclude package.json",copy:"cpy .npmignore LICENSE README.md CHANGELOG.md dist && cpy bin/* dist/bin && cpy src/lib/fnmatch*.* dist/src/lib",prepub:"npm run lint && npm run build && npm run copy",pub:"npm publish ./dist"},repository:{type:"git",url:"git://github.com/editorconfig/editorconfig-core-js.git"},bugs:"https://github.com/editorconfig/editorconfig-core-js/issues",author:"EditorConfig Team",license:"MIT",dependencies:{commander:"^2.19.0","lru-cache":"^4.1.5",semver:"^5.6.0",sigmund:"^1.0.1"},devDependencies:{"@types/mocha":"^5.2.6","@types/node":"^10.12.29","@types/semver":"^5.5.0","cpy-cli":"^2.0.0",eclint:"^2.8.1",mocha:"^5.2.0",rimraf:"^2.6.3",should:"^13.2.3",tslint:"^5.13.1",typescript:"^3.3.3333"}}}}),sr=T({"node_modules/editorconfig/src/index.js"(e){var t=e&&e.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(u,i){function s(e){try{a(n.next(e))}catch(e){i(e)}}function o(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){e.done?u(e.value):new r((function(t){t(e.value)})).then(s,o)}a((n=n.apply(e,t||[])).next())}))},r=e&&e.__generator||function(e,t){var r,n,u,i,s={label:0,sent:function(){if(1&u[0])throw u[1];return u[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(u=2&i[0]?n.return:i[0]?n.throw||((u=n.return)&&u.call(n),0):n.next)&&!(u=u.call(n,i[1])).done)return u;switch(n=0,u&&(i=[2&i[0],u.value]),i[0]){case 0:case 1:u=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(u=s.trys,(u=u.length>0&&u[u.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!u||i[1]>u[0]&&i[1]<u[3])){s.label=i[1];break}if(6===i[0]&&s.label<u[1]){s.label=u[1],u=i;break}if(u&&s.label<u[2]){s.label=u[2],s.ops.push(i);break}u[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=u=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},n=e&&e.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t},u=e&&e.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(O("fs")),s=n(O("path")),o={gte:Qt()},a=u(nr()),c=ur();e.parseString=c.parseString;var l=u(ir()),D={end_of_line:!0,indent_style:!0,indent_size:!0,insert_final_newline:!0,trim_trailing_whitespace:!0,charset:!0};function h(e,t){var r=[];do{e=s.dirname(e),r.push(s.join(e,t.config))}while(e!==t.root);return r}function p(e,t){return void 0===e&&(e={}),{config:e.config||".editorconfig",version:e.version||l.default.version,root:s.resolve(e.root||s.parse(t).root)}}function d(e,t,r){return n=e.reverse().reduce((function(e,r){var n=s.dirname(r.name);return r.contents.forEach((function(r){var u=r[0],i=r[1];if(u){var o=function(e,t){switch(t.indexOf("/")){case-1:t="**/"+t;break;case 0:t=t.substring(1)}return s.join(e,t)}(n,u);(function(e,t){return t=t.replace(/\*\*/g,"{*,**/**/**}"),a.default(e,t,{matchBase:!0,dot:!0,noext:!0})})(t,o)&&(e=function(e,t){for(var r in void 0===e&&(e={}),void 0===t&&(t={}),t)if(t.hasOwnProperty(r)){var n=t[r],u=r.toLowerCase(),i=n;D[u]&&(i=n.toLowerCase());try{i=JSON.parse(n)}catch(e){}null==n&&(i=String(n)),e[u]=i}return e}(e,i))}})),e}),{}),u=r.version,"indent_style"in n&&"tab"===n.indent_style&&!("indent_size"in n)&&o.gte(u,"0.10.0")&&(n.indent_size="tab"),"indent_size"in n&&!("tab_width"in n)&&"tab"!==n.indent_size&&(n.tab_width=n.indent_size),"indent_size"in n&&"tab_width"in n&&"tab"===n.indent_size&&(n.indent_size=n.tab_width),n;var n,u}function f(e){var t=[];for(var r in e)if(e.hasOwnProperty(r)){var n=e[r],u=c.parseString(n.contents);if(t.push({name:n.name,contents:u}),"true"===(u[0][1].root||"").toLowerCase())break}return t}function m(e){return t(this,void 0,void 0,(function(){return r(this,(function(t){return[2,Promise.all(e.map((function(e){return new Promise((function(t){i.readFile(e,"utf8",(function(r,n){t({name:e,contents:r?"":n})}))}))})))]}))}))}function F(e,t){void 0===t&&(t={});var r=s.resolve(e);return[r,p(t,r)]}e.parseFromFiles=function(e,n,u){return void 0===u&&(u={}),t(this,void 0,void 0,(function(){var t,i,s;return r(this,(function(r){return t=F(e,u),i=t[0],s=t[1],[2,n.then(f).then((function(e){return d(e,i,s)}))]}))}))},e.parseFromFilesSync=function(e,t,r){void 0===r&&(r={});var n=F(e,r),u=n[0],i=n[1];return d(f(t),u,i)},e.parse=function(e,n){return void 0===n&&(n={}),t(this,void 0,void 0,(function(){var t,u,i;return r(this,(function(r){return t=F(e,n),u=t[0],i=t[1],[2,m(h(u,i)).then(f).then((function(e){return d(e,u,i)}))]}))}))},e.parseSync=function(e,t){void 0===t&&(t={});var r=F(e,t),n=r[0],u=r[1];return d(f(function(e){var t,r=[];return e.forEach((function(e){try{t=i.readFileSync(e,"utf8")}catch(e){t=""}r.push({name:e,contents:t})})),r}(h(n,u))),n,u)}}}),or=T({"node_modules/ci-info/vendors.json"(e,t){t.exports=[{name:"Agola CI",constant:"AGOLA",env:"AGOLA_GIT_REF",pr:"AGOLA_PULL_REQUEST_ID"},{name:"Appcircle",constant:"APPCIRCLE",env:"AC_APPCIRCLE"},{name:"AppVeyor",constant:"APPVEYOR",env:"APPVEYOR",pr:"APPVEYOR_PULL_REQUEST_NUMBER"},{name:"AWS CodeBuild",constant:"CODEBUILD",env:"CODEBUILD_BUILD_ARN"},{name:"Azure Pipelines",constant:"AZURE_PIPELINES",env:"TF_BUILD",pr:{BUILD_REASON:"PullRequest"}},{name:"Bamboo",constant:"BAMBOO",env:"bamboo_planKey"},{name:"Bitbucket Pipelines",constant:"BITBUCKET",env:"BITBUCKET_COMMIT",pr:"BITBUCKET_PR_ID"},{name:"Bitrise",constant:"BITRISE",env:"BITRISE_IO",pr:"BITRISE_PULL_REQUEST"},{name:"Buddy",constant:"BUDDY",env:"BUDDY_WORKSPACE_ID",pr:"BUDDY_EXECUTION_PULL_REQUEST_ID"},{name:"Buildkite",constant:"BUILDKITE",env:"BUILDKITE",pr:{env:"BUILDKITE_PULL_REQUEST",ne:"false"}},{name:"CircleCI",constant:"CIRCLE",env:"CIRCLECI",pr:"CIRCLE_PULL_REQUEST"},{name:"Cirrus CI",constant:"CIRRUS",env:"CIRRUS_CI",pr:"CIRRUS_PR"},{name:"Codefresh",constant:"CODEFRESH",env:"CF_BUILD_ID",pr:{any:["CF_PULL_REQUEST_NUMBER","CF_PULL_REQUEST_ID"]}},{name:"Codemagic",constant:"CODEMAGIC",env:"CM_BUILD_ID",pr:"CM_PULL_REQUEST"},{name:"Codeship",constant:"CODESHIP",env:{CI_NAME:"codeship"}},{name:"Drone",constant:"DRONE",env:"DRONE",pr:{DRONE_BUILD_EVENT:"pull_request"}},{name:"dsari",constant:"DSARI",env:"DSARI"},{name:"Earthly",constant:"EARTHLY",env:"EARTHLY_CI"},{name:"Expo Application Services",constant:"EAS",env:"EAS_BUILD"},{name:"Gerrit",constant:"GERRIT",env:"GERRIT_PROJECT"},{name:"Gitea Actions",constant:"GITEA_ACTIONS",env:"GITEA_ACTIONS"},{name:"GitHub Actions",constant:"GITHUB_ACTIONS",env:"GITHUB_ACTIONS",pr:{GITHUB_EVENT_NAME:"pull_request"}},{name:"GitLab CI",constant:"GITLAB",env:"GITLAB_CI",pr:"CI_MERGE_REQUEST_ID"},{name:"GoCD",constant:"GOCD",env:"GO_PIPELINE_LABEL"},{name:"Google Cloud Build",constant:"GOOGLE_CLOUD_BUILD",env:"BUILDER_OUTPUT"},{name:"Harness CI",constant:"HARNESS",env:"HARNESS_BUILD_ID"},{name:"Heroku",constant:"HEROKU",env:{env:"NODE",includes:"/app/.heroku/node/bin/node"}},{name:"Hudson",constant:"HUDSON",env:"HUDSON_URL"},{name:"Jenkins",constant:"JENKINS",env:["JENKINS_URL","BUILD_ID"],pr:{any:["ghprbPullId","CHANGE_ID"]}},{name:"LayerCI",constant:"LAYERCI",env:"LAYERCI",pr:"LAYERCI_PULL_REQUEST"},{name:"Magnum CI",constant:"MAGNUM",env:"MAGNUM"},{name:"Netlify CI",constant:"NETLIFY",env:"NETLIFY",pr:{env:"PULL_REQUEST",ne:"false"}},{name:"Nevercode",constant:"NEVERCODE",env:"NEVERCODE",pr:{env:"NEVERCODE_PULL_REQUEST",ne:"false"}},{name:"Prow",constant:"PROW",env:"PROW_JOB_ID"},{name:"ReleaseHub",constant:"RELEASEHUB",env:"RELEASE_BUILD_ID"},{name:"Render",constant:"RENDER",env:"RENDER",pr:{IS_PULL_REQUEST:"true"}},{name:"Sail CI",constant:"SAIL",env:"SAILCI",pr:"SAIL_PULL_REQUEST_NUMBER"},{name:"Screwdriver",constant:"SCREWDRIVER",env:"SCREWDRIVER",pr:{env:"SD_PULL_REQUEST",ne:"false"}},{name:"Semaphore",constant:"SEMAPHORE",env:"SEMAPHORE",pr:"PULL_REQUEST_NUMBER"},{name:"Sourcehut",constant:"SOURCEHUT",env:{CI_NAME:"sourcehut"}},{name:"Strider CD",constant:"STRIDER",env:"STRIDER"},{name:"TaskCluster",constant:"TASKCLUSTER",env:["TASK_ID","RUN_ID"]},{name:"TeamCity",constant:"TEAMCITY",env:"TEAMCITY_VERSION"},{name:"Travis CI",constant:"TRAVIS",env:"TRAVIS",pr:{env:"TRAVIS_PULL_REQUEST",ne:"false"}},{name:"Vela",constant:"VELA",env:"VELA",pr:{VELA_PULL_REQUEST:"1"}},{name:"Vercel",constant:"VERCEL",env:{any:["NOW_BUILDER","VERCEL"]},pr:"VERCEL_GIT_PULL_REQUEST_ID"},{name:"Visual Studio App Center",constant:"APPCENTER",env:"APPCENTER_BUILD_ID"},{name:"Woodpecker",constant:"WOODPECKER",env:{CI:"woodpecker"},pr:{CI_BUILD_EVENT:"pull_request"}},{name:"Xcode Cloud",constant:"XCODE_CLOUD",env:"CI_XCODE_PROJECT",pr:"CI_PULL_REQUEST_NUMBER"},{name:"Xcode Server",constant:"XCODE_SERVER",env:"XCS"}]}}),ar=T({"node_modules/ci-info/index.js"(e){var t=or(),r=process.env;function n(e){return"string"==typeof e?!!r[e]:"env"in e?r[e.env]&&r[e.env].includes(e.includes):"any"in e?e.any.some((function(e){return!!r[e]})):Object.keys(e).every((function(t){return r[t]===e[t]}))}Object.defineProperty(e,"_vendors",{value:t.map((function(e){return e.constant}))}),e.name=null,e.isPR=null,t.forEach((function(t){const u=(Array.isArray(t.env)?t.env:[t.env]).every((function(e){return n(e)}));if(e[t.constant]=u,u)switch(e.name=t.name,typeof t.pr){case"string":e.isPR=!!r[t.pr];break;case"object":"env"in t.pr?e.isPR=t.pr.env in r&&r[t.pr.env]!==t.pr.ne:"any"in t.pr?e.isPR=t.pr.any.some((function(e){return!!r[e]})):e.isPR=n(t.pr);break;default:e.isPR=null}})),e.isCI=!("false"===r.CI||!(r.BUILD_ID||r.BUILD_NUMBER||r.CI||r.CI_APP_ID||r.CI_BUILD_ID||r.CI_BUILD_NUMBER||r.CI_NAME||r.CONTINUOUS_INTEGRATION||r.RUN_ID||e.name))}}),cr=T({"node_modules/@iarna/toml/lib/parser.js"(e,t){var r=1114112,n=class e extends Error{constructor(t,r,n){super("[ParserError] "+t,r,n),this.name="ParserError",this.code="ParserError",Error.captureStackTrace&&Error.captureStackTrace(this,e)}},u=class{constructor(e){this.parser=e,this.buf="",this.returned=null,this.result=null,this.resultTable=null,this.resultArr=null}},i=class{constructor(){this.pos=0,this.col=0,this.line=0,this.obj={},this.ctx=this.obj,this.stack=[],this._buf="",this.char=null,this.ii=0,this.state=new u(this.parseStart)}parse(e){if(0===e.length||null==e.length)return;let t;for(this._buf=String(e),this.ii=-1,this.char=-1;!1===t||this.nextChar();)t=this.runOne();this._buf=null}nextChar(){return 10===this.char&&(++this.line,this.col=-1),++this.ii,this.char=this._buf.codePointAt(this.ii),++this.pos,++this.col,this.haveBuffer()}haveBuffer(){return this.ii<this._buf.length}runOne(){return this.state.parser.call(this,this.state.returned)}finish(){let e;this.char=r;do{e=this.state.parser,this.runOne()}while(this.state.parser!==e);return this.ctx=null,this.state=null,this._buf=null,this.obj}next(e){if("function"!=typeof e)throw new n("Tried to set state to non-existent state: "+JSON.stringify(e));this.state.parser=e}goto(e){return this.next(e),this.runOne()}call(e,t){t&&this.next(t),this.stack.push(this.state),this.state=new u(e)}callNow(e,t){return this.call(e,t),this.runOne()}return(e){if(0===this.stack.length)throw this.error(new n("Stack underflow"));void 0===e&&(e=this.state.buf),this.state=this.stack.pop(),this.state.returned=e}returnNow(e){return this.return(e),this.runOne()}consume(){if(this.char===r)throw this.error(new n("Unexpected end-of-buffer"));this.state.buf+=this._buf[this.ii]}error(e){return e.line=this.line,e.col=this.col,e.pos=this.pos,e}parseStart(){throw new n("Must declare a parseStart method")}};i.END=r,i.Error=n,t.exports=i}}),lr=T({"node_modules/@iarna/toml/lib/create-datetime.js"(e,t){t.exports=e=>{const t=new Date(e);if(isNaN(t))throw new TypeError("Invalid Datetime");return t}}}),Dr=T({"node_modules/@iarna/toml/lib/format-num.js"(e,t){t.exports=(e,t)=>{for(t=String(t);t.length<e;)t="0"+t;return t}}}),hr=T({"node_modules/@iarna/toml/lib/create-datetime-float.js"(e,t){var r=Dr(),n=class extends Date{constructor(e){super(e+"Z"),this.isFloating=!0}toISOString(){return`${`${this.getUTCFullYear()}-${r(2,this.getUTCMonth()+1)}-${r(2,this.getUTCDate())}`}T${`${r(2,this.getUTCHours())}:${r(2,this.getUTCMinutes())}:${r(2,this.getUTCSeconds())}.${r(3,this.getUTCMilliseconds())}`}`}};t.exports=e=>{const t=new n(e);if(isNaN(t))throw new TypeError("Invalid Datetime");return t}}}),pr=T({"node_modules/@iarna/toml/lib/create-date.js"(e,t){var r=Dr(),n=global.Date,u=class extends n{constructor(e){super(e),this.isDate=!0}toISOString(){return`${this.getUTCFullYear()}-${r(2,this.getUTCMonth()+1)}-${r(2,this.getUTCDate())}`}};t.exports=e=>{const t=new u(e);if(isNaN(t))throw new TypeError("Invalid Datetime");return t}}}),dr=T({"node_modules/@iarna/toml/lib/create-time.js"(e,t){var r=Dr(),n=class extends Date{constructor(e){super(`0000-01-01T${e}Z`),this.isTime=!0}toISOString(){return`${r(2,this.getUTCHours())}:${r(2,this.getUTCMinutes())}:${r(2,this.getUTCSeconds())}.${r(3,this.getUTCMilliseconds())}`}};t.exports=e=>{const t=new n(e);if(isNaN(t))throw new TypeError("Invalid Datetime");return t}}}),fr=T({"node_modules/@iarna/toml/lib/toml-parser.js"(e,t){t.exports=Z(cr()),t.exports.makeParserClass=Z;var r=class e extends Error{constructor(t){super(t),this.name="TomlError",Error.captureStackTrace&&Error.captureStackTrace(this,e),this.fromTOML=!0,this.wrapped=null}};r.wrap=e=>{const t=new r(e.message);return t.code=e.code,t.wrapped=e,t},t.exports.TomlError=r;var n=lr(),u=hr(),i=pr(),s=dr(),o=10,a=13,c=32,l=34,D=35,h=39,p=45,d=46,f=48,m=58,F=95,E=101,g=102,C=110,y=127,A={98:"\b",116:"\t",[C]:"\n",[g]:"\f",114:"\r",[l]:'"',92:"\\"};function v(e){return e>=f&&e<=57}function b(e){return e>=65&&e<=70||e>=97&&e<=g||e>=f&&e<=57}var _=Symbol("type"),w=Symbol("declared"),B=Object.prototype.hasOwnProperty,S=Object.defineProperty,x={configurable:!0,enumerable:!0,writable:!0,value:void 0};function R(e,t){return!!B.call(e,t)||("__proto__"===t&&S(e,"__proto__",x),!1)}var T=Symbol("inline-table");function k(){return Object.defineProperties({},{[_]:{value:T}})}var I=Symbol("table");function N(){return Object.defineProperties({},{[_]:{value:I},[w]:{value:!1,writable:!0}})}function L(e){return null!==e&&"object"==typeof e&&e[_]===I}var j=Symbol("content-type"),P=Symbol("inline-list");function $(e){return Object.defineProperties([],{[_]:{value:P},[j]:{value:e}})}function M(e){return null!==e&&"object"==typeof e&&e[_]===P}var U,H=Symbol("list");function G(e){return null!==e&&"object"==typeof e&&e[_]===H}try{U=O("util").inspect.custom}catch(e){}var W=U||"inspect",V=class{constructor(e){try{this.value=global.BigInt.asIntN(64,e)}catch(e){this.value=null}Object.defineProperty(this,_,{value:K})}isNaN(){return null===this.value}toString(){return String(this.value)}[W](){return`[BigInt: ${this.toString()}]}`}valueOf(){return this.value}},K=Symbol("integer");function q(e){let t=Number(e);return Object.is(t,-0)&&(t=0),global.BigInt&&!Number.isSafeInteger(t)?new V(e):Object.defineProperties(new Number(t),{isNaN:{value:function(){return isNaN(this)}},[_]:{value:K},[W]:{value:()=>`[Integer: ${e}]`}})}function Y(e){return null!==e&&"object"==typeof e&&e[_]===K}var X=Symbol("float");function z(e){return Object.defineProperties(new Number(e),{[_]:{value:X},[W]:{value:()=>`[Float: ${e}]`}})}function Q(e){return null!==e&&"object"==typeof e&&e[_]===X}function J(e){const t=typeof e;if("object"===t){if(null===e)return"null";if(e instanceof Date)return"datetime";if(_ in e)switch(e[_]){case T:return"inline-table";case P:return"inline-list";case I:return"table";case H:return"list";case X:return"float";case K:return"integer"}}return t}function Z(e){return class extends e{constructor(){super(),this.ctx=this.obj=N()}atEndOfWord(){return this.char===D||9===this.char||this.char===c||this.atEndOfLine()}atEndOfLine(){return this.char===e.END||this.char===o||this.char===a}parseStart(){if(this.char===e.END)return null;if(91===this.char)return this.call(this.parseTableOrList);if(this.char===D)return this.call(this.parseComment);if(this.char===o||this.char===c||9===this.char||this.char===a)return null;if((t=this.char)>=65&&t<=90||t>=97&&t<=122||t>=f&&t<=57||t===h||t===l||t===F||t===p)return this.callNow(this.parseAssignStatement);throw this.error(new r(`Unknown character "${this.char}"`));var t}parseWhitespaceToEOL(){if(this.char===c||9===this.char||this.char===a)return null;if(this.char===D)return this.goto(this.parseComment);if(this.char===e.END||this.char===o)return this.return();throw this.error(new r("Unexpected character, expected only whitespace or comments till end of line"))}parseAssignStatement(){return this.callNow(this.parseAssign,this.recordAssignStatement)}recordAssignStatement(e){let t=this.ctx,n=e.key.pop();for(let n of e.key){if(R(t,n)&&(!L(t[n])||t[n][w]))throw this.error(new r("Can't redefine existing key"));t=t[n]=t[n]||N()}if(R(t,n))throw this.error(new r("Can't redefine existing key"));return Y(e.value)||Q(e.value)?t[n]=e.value.valueOf():t[n]=e.value,this.goto(this.parseWhitespaceToEOL)}parseAssign(){return this.callNow(this.parseKeyword,this.recordAssignKeyword)}recordAssignKeyword(e){return this.state.resultTable?this.state.resultTable.push(e):this.state.resultTable=[e],this.goto(this.parseAssignKeywordPreDot)}parseAssignKeywordPreDot(){return this.char===d?this.next(this.parseAssignKeywordPostDot):this.char!==c&&9!==this.char?this.goto(this.parseAssignEqual):void 0}parseAssignKeywordPostDot(){if(this.char!==c&&9!==this.char)return this.callNow(this.parseKeyword,this.recordAssignKeyword)}parseAssignEqual(){if(61===this.char)return this.next(this.parseAssignPreValue);throw this.error(new r('Invalid character, expected "="'))}parseAssignPreValue(){return this.char===c||9===this.char?null:this.callNow(this.parseValue,this.recordAssignValue)}recordAssignValue(e){return this.returnNow({key:this.state.resultTable,value:e})}parseComment(){do{if(this.char===e.END||this.char===o)return this.return()}while(this.nextChar())}parseTableOrList(){if(91!==this.char)return this.goto(this.parseTable);this.next(this.parseList)}parseTable(){return this.ctx=this.obj,this.goto(this.parseTableNext)}parseTableNext(){return this.char===c||9===this.char?null:this.callNow(this.parseKeyword,this.parseTableMore)}parseTableMore(e){if(this.char===c||9===this.char)return null;if(93===this.char){if(R(this.ctx,e)&&(!L(this.ctx[e])||this.ctx[e][w]))throw this.error(new r("Can't redefine existing key"));return this.ctx=this.ctx[e]=this.ctx[e]||N(),this.ctx[w]=!0,this.next(this.parseWhitespaceToEOL)}if(this.char===d){if(R(this.ctx,e))if(L(this.ctx[e]))this.ctx=this.ctx[e];else{if(!G(this.ctx[e]))throw this.error(new r("Can't redefine existing key"));this.ctx=this.ctx[e][this.ctx[e].length-1]}else this.ctx=this.ctx[e]=N();return this.next(this.parseTableNext)}throw this.error(new r("Unexpected character, expected whitespace, . or ]"))}parseList(){return this.ctx=this.obj,this.goto(this.parseListNext)}parseListNext(){return this.char===c||9===this.char?null:this.callNow(this.parseKeyword,this.parseListMore)}parseListMore(e){if(this.char===c||9===this.char)return null;if(93===this.char){if(R(this.ctx,e)||(this.ctx[e]=Object.defineProperties([],{[_]:{value:H}})),M(this.ctx[e]))throw this.error(new r("Can't extend an inline array"));if(!G(this.ctx[e]))throw this.error(new r("Can't redefine an existing key"));{const t=N();this.ctx[e].push(t),this.ctx=t}return this.next(this.parseListEnd)}if(this.char===d){if(R(this.ctx,e)){if(M(this.ctx[e]))throw this.error(new r("Can't extend an inline array"));if(null!==(t=this.ctx[e])&&"object"==typeof t&&t[_]===T)throw this.error(new r("Can't extend an inline table"));if(G(this.ctx[e]))this.ctx=this.ctx[e][this.ctx[e].length-1];else{if(!L(this.ctx[e]))throw this.error(new r("Can't redefine an existing key"));this.ctx=this.ctx[e]}}else this.ctx=this.ctx[e]=N();return this.next(this.parseListNext)}throw this.error(new r("Unexpected character, expected whitespace, . or ]"));var t}parseListEnd(e){if(93===this.char)return this.next(this.parseWhitespaceToEOL);throw this.error(new r("Unexpected character, expected whitespace, . or ]"))}parseValue(){if(this.char===e.END)throw this.error(new r("Key without value"));if(this.char===l)return this.next(this.parseDoubleString);if(this.char===h)return this.next(this.parseSingleString);if(this.char===p||43===this.char)return this.goto(this.parseNumberSign);if(105===this.char)return this.next(this.parseInf);if(this.char===C)return this.next(this.parseNan);if(v(this.char))return this.goto(this.parseNumberOrDateTime);if(116===this.char||this.char===g)return this.goto(this.parseBoolean);if(91===this.char)return this.call(this.parseInlineList,this.recordValue);if(123===this.char)return this.call(this.parseInlineTable,this.recordValue);throw this.error(new r("Unexpected character, expecting string, number, datetime, boolean, inline array or inline table"))}recordValue(e){return this.returnNow(e)}parseInf(){if(this.char===C)return this.next(this.parseInf2);throw this.error(new r('Unexpected character, expected "inf", "+inf" or "-inf"'))}parseInf2(){if(this.char===g)return"-"===this.state.buf?this.return(-1/0):this.return(1/0);throw this.error(new r('Unexpected character, expected "inf", "+inf" or "-inf"'))}parseNan(){if(97===this.char)return this.next(this.parseNan2);throw this.error(new r('Unexpected character, expected "nan"'))}parseNan2(){if(this.char===C)return this.return(NaN);throw this.error(new r('Unexpected character, expected "nan"'))}parseKeyword(){return this.char===l?this.next(this.parseBasicString):this.char===h?this.next(this.parseLiteralString):this.goto(this.parseBareKey)}parseBareKey(){do{if(this.char===e.END)throw this.error(new r("Key ended without value"));if(!((t=this.char)>=65&&t<=90||t>=97&&t<=122||t>=f&&t<=57||t===F||t===p)){if(0===this.state.buf.length)throw this.error(new r("Empty bare keys are not allowed"));return this.returnNow()}this.consume()}while(this.nextChar());var t}parseSingleString(){return this.char===h?this.next(this.parseLiteralMultiStringMaybe):this.goto(this.parseLiteralString)}parseLiteralString(){do{if(this.char===h)return this.return();if(this.atEndOfLine())throw this.error(new r("Unterminated string"));if(this.char===y||this.char<=31&&9!==this.char)throw this.errorControlCharInString();this.consume()}while(this.nextChar())}parseLiteralMultiStringMaybe(){return this.char===h?this.next(this.parseLiteralMultiString):this.returnNow()}parseLiteralMultiString(){return this.char===a?null:this.char===o?this.next(this.parseLiteralMultiStringContent):this.goto(this.parseLiteralMultiStringContent)}parseLiteralMultiStringContent(){do{if(this.char===h)return this.next(this.parseLiteralMultiEnd);if(this.char===e.END)throw this.error(new r("Unterminated multi-line string"));if(this.char===y||this.char<=31&&9!==this.char&&this.char!==o&&this.char!==a)throw this.errorControlCharInString();this.consume()}while(this.nextChar())}parseLiteralMultiEnd(){return this.char===h?this.next(this.parseLiteralMultiEnd2):(this.state.buf+="'",this.goto(this.parseLiteralMultiStringContent))}parseLiteralMultiEnd2(){return this.char===h?this.return():(this.state.buf+="''",this.goto(this.parseLiteralMultiStringContent))}parseDoubleString(){return this.char===l?this.next(this.parseMultiStringMaybe):this.goto(this.parseBasicString)}parseBasicString(){do{if(92===this.char)return this.call(this.parseEscape,this.recordEscapeReplacement);if(this.char===l)return this.return();if(this.atEndOfLine())throw this.error(new r("Unterminated string"));if(this.char===y||this.char<=31&&9!==this.char)throw this.errorControlCharInString();this.consume()}while(this.nextChar())}recordEscapeReplacement(e){return this.state.buf+=e,this.goto(this.parseBasicString)}parseMultiStringMaybe(){return this.char===l?this.next(this.parseMultiString):this.returnNow()}parseMultiString(){return this.char===a?null:this.char===o?this.next(this.parseMultiStringContent):this.goto(this.parseMultiStringContent)}parseMultiStringContent(){do{if(92===this.char)return this.call(this.parseMultiEscape,this.recordMultiEscapeReplacement);if(this.char===l)return this.next(this.parseMultiEnd);if(this.char===e.END)throw this.error(new r("Unterminated multi-line string"));if(this.char===y||this.char<=31&&9!==this.char&&this.char!==o&&this.char!==a)throw this.errorControlCharInString();this.consume()}while(this.nextChar())}errorControlCharInString(){let e="\\u00";return this.char<16&&(e+="0"),e+=this.char.toString(16),this.error(new r(`Control characters (codes < 0x1f and 0x7f) are not allowed in strings, use ${e} instead`))}recordMultiEscapeReplacement(e){return this.state.buf+=e,this.goto(this.parseMultiStringContent)}parseMultiEnd(){return this.char===l?this.next(this.parseMultiEnd2):(this.state.buf+='"',this.goto(this.parseMultiStringContent))}parseMultiEnd2(){return this.char===l?this.return():(this.state.buf+='""',this.goto(this.parseMultiStringContent))}parseMultiEscape(){return this.char===a||this.char===o?this.next(this.parseMultiTrim):this.char===c||9===this.char?this.next(this.parsePreMultiTrim):this.goto(this.parseEscape)}parsePreMultiTrim(){if(this.char===c||9===this.char)return null;if(this.char===a||this.char===o)return this.next(this.parseMultiTrim);throw this.error(new r("Can't escape whitespace"))}parseMultiTrim(){return this.char===o||this.char===c||9===this.char||this.char===a?null:this.returnNow()}parseEscape(){if(this.char in A)return this.return(A[this.char]);if(117===this.char)return this.call(this.parseSmallUnicode,this.parseUnicodeReturn);if(85===this.char)return this.call(this.parseLargeUnicode,this.parseUnicodeReturn);throw this.error(new r("Unknown escape character: "+this.char))}parseUnicodeReturn(e){try{const t=parseInt(e,16);if(t>=55296&&t<=57343)throw this.error(new r("Invalid unicode, character in range 0xD800 - 0xDFFF is reserved"));return this.returnNow(String.fromCodePoint(t))}catch(e){throw this.error(r.wrap(e))}}parseSmallUnicode(){if(!b(this.char))throw this.error(new r("Invalid character in unicode sequence, expected hex"));if(this.consume(),this.state.buf.length>=4)return this.return()}parseLargeUnicode(){if(!b(this.char))throw this.error(new r("Invalid character in unicode sequence, expected hex"));if(this.consume(),this.state.buf.length>=8)return this.return()}parseNumberSign(){return this.consume(),this.next(this.parseMaybeSignedInfOrNan)}parseMaybeSignedInfOrNan(){return 105===this.char?this.next(this.parseInf):this.char===C?this.next(this.parseNan):this.callNow(this.parseNoUnder,this.parseNumberIntegerStart)}parseNumberIntegerStart(){return this.char===f?(this.consume(),this.next(this.parseNumberIntegerExponentOrDecimal)):this.goto(this.parseNumberInteger)}parseNumberIntegerExponentOrDecimal(){return this.char===d?(this.consume(),this.call(this.parseNoUnder,this.parseNumberFloat)):69===this.char||this.char===E?(this.consume(),this.next(this.parseNumberExponentSign)):this.returnNow(q(this.state.buf))}parseNumberInteger(){if(!v(this.char)){if(this.char===F)return this.call(this.parseNoUnder);if(69===this.char||this.char===E)return this.consume(),this.next(this.parseNumberExponentSign);if(this.char===d)return this.consume(),this.call(this.parseNoUnder,this.parseNumberFloat);{const e=q(this.state.buf);if(e.isNaN())throw this.error(new r("Invalid number"));return this.returnNow(e)}}this.consume()}parseNoUnder(){if(this.char===F||this.char===d||69===this.char||this.char===E)throw this.error(new r("Unexpected character, expected digit"));if(this.atEndOfWord())throw this.error(new r("Incomplete number"));return this.returnNow()}parseNoUnderHexOctBinLiteral(){if(this.char===F||this.char===d)throw this.error(new r("Unexpected character, expected digit"));if(this.atEndOfWord())throw this.error(new r("Incomplete number"));return this.returnNow()}parseNumberFloat(){return this.char===F?this.call(this.parseNoUnder,this.parseNumberFloat):v(this.char)?void this.consume():69===this.char||this.char===E?(this.consume(),this.next(this.parseNumberExponentSign)):this.returnNow(z(this.state.buf))}parseNumberExponentSign(){if(v(this.char))return this.goto(this.parseNumberExponent);if(this.char!==p&&43!==this.char)throw this.error(new r("Unexpected character, expected -, + or digit"));this.consume(),this.call(this.parseNoUnder,this.parseNumberExponent)}parseNumberExponent(){if(!v(this.char))return this.char===F?this.call(this.parseNoUnder):this.returnNow(z(this.state.buf));this.consume()}parseNumberOrDateTime(){return this.char===f?(this.consume(),this.next(this.parseNumberBaseOrDateTime)):this.goto(this.parseNumberOrDateTimeOnly)}parseNumberOrDateTimeOnly(){return this.char===F?this.call(this.parseNoUnder,this.parseNumberInteger):v(this.char)?(this.consume(),void(this.state.buf.length>4&&this.next(this.parseNumberInteger))):69===this.char||this.char===E?(this.consume(),this.next(this.parseNumberExponentSign)):this.char===d?(this.consume(),this.call(this.parseNoUnder,this.parseNumberFloat)):this.char===p?this.goto(this.parseDateTime):this.char===m?this.goto(this.parseOnlyTimeHour):this.returnNow(q(this.state.buf))}parseDateTimeOnly(){if(this.state.buf.length<4){if(v(this.char))return this.consume();if(this.char===m)return this.goto(this.parseOnlyTimeHour);throw this.error(new r("Expected digit while parsing year part of a date"))}if(this.char===p)return this.goto(this.parseDateTime);throw this.error(new r("Expected hyphen (-) while parsing year part of date"))}parseNumberBaseOrDateTime(){return 98===this.char?(this.consume(),this.call(this.parseNoUnderHexOctBinLiteral,this.parseIntegerBin)):111===this.char?(this.consume(),this.call(this.parseNoUnderHexOctBinLiteral,this.parseIntegerOct)):120===this.char?(this.consume(),this.call(this.parseNoUnderHexOctBinLiteral,this.parseIntegerHex)):this.char===d?this.goto(this.parseNumberInteger):v(this.char)?this.goto(this.parseDateTimeOnly):this.returnNow(q(this.state.buf))}parseIntegerHex(){if(!b(this.char)){if(this.char===F)return this.call(this.parseNoUnderHexOctBinLiteral);{const e=q(this.state.buf);if(e.isNaN())throw this.error(new r("Invalid number"));return this.returnNow(e)}}this.consume()}parseIntegerOct(){if(!((e=this.char)>=f&&e<=55)){if(this.char===F)return this.call(this.parseNoUnderHexOctBinLiteral);{const e=q(this.state.buf);if(e.isNaN())throw this.error(new r("Invalid number"));return this.returnNow(e)}}var e;this.consume()}parseIntegerBin(){if(49!==(e=this.char)&&e!==f){if(this.char===F)return this.call(this.parseNoUnderHexOctBinLiteral);{const e=q(this.state.buf);if(e.isNaN())throw this.error(new r("Invalid number"));return this.returnNow(e)}}var e;this.consume()}parseDateTime(){if(this.state.buf.length<4)throw this.error(new r("Years less than 1000 must be zero padded to four characters"));return this.state.result=this.state.buf,this.state.buf="",this.next(this.parseDateMonth)}parseDateMonth(){if(this.char===p){if(this.state.buf.length<2)throw this.error(new r("Months less than 10 must be zero padded to two characters"));return this.state.result+="-"+this.state.buf,this.state.buf="",this.next(this.parseDateDay)}if(!v(this.char))throw this.error(new r("Incomplete datetime"));this.consume()}parseDateDay(){if(84===this.char||this.char===c){if(this.state.buf.length<2)throw this.error(new r("Days less than 10 must be zero padded to two characters"));return this.state.result+="-"+this.state.buf,this.state.buf="",this.next(this.parseStartTimeHour)}if(this.atEndOfWord())return this.returnNow(i(this.state.result+"-"+this.state.buf));if(!v(this.char))throw this.error(new r("Incomplete datetime"));this.consume()}parseStartTimeHour(){return this.atEndOfWord()?this.returnNow(i(this.state.result)):this.goto(this.parseTimeHour)}parseTimeHour(){if(this.char===m){if(this.state.buf.length<2)throw this.error(new r("Hours less than 10 must be zero padded to two characters"));return this.state.result+="T"+this.state.buf,this.state.buf="",this.next(this.parseTimeMin)}if(!v(this.char))throw this.error(new r("Incomplete datetime"));this.consume()}parseTimeMin(){if(!(this.state.buf.length<2&&v(this.char))){if(2===this.state.buf.length&&this.char===m)return this.state.result+=":"+this.state.buf,this.state.buf="",this.next(this.parseTimeSec);throw this.error(new r("Incomplete datetime"))}this.consume()}parseTimeSec(){if(!v(this.char))throw this.error(new r("Incomplete datetime"));if(this.consume(),2===this.state.buf.length)return this.state.result+=":"+this.state.buf,this.state.buf="",this.next(this.parseTimeZoneOrFraction)}parseOnlyTimeHour(){if(this.char===m){if(this.state.buf.length<2)throw this.error(new r("Hours less than 10 must be zero padded to two characters"));return this.state.result=this.state.buf,this.state.buf="",this.next(this.parseOnlyTimeMin)}throw this.error(new r("Incomplete time"))}parseOnlyTimeMin(){if(!(this.state.buf.length<2&&v(this.char))){if(2===this.state.buf.length&&this.char===m)return this.state.result+=":"+this.state.buf,this.state.buf="",this.next(this.parseOnlyTimeSec);throw this.error(new r("Incomplete time"))}this.consume()}parseOnlyTimeSec(){if(!v(this.char))throw this.error(new r("Incomplete time"));if(this.consume(),2===this.state.buf.length)return this.next(this.parseOnlyTimeFractionMaybe)}parseOnlyTimeFractionMaybe(){if(this.state.result+=":"+this.state.buf,this.char!==d)return this.return(s(this.state.result));this.state.buf="",this.next(this.parseOnlyTimeFraction)}parseOnlyTimeFraction(){if(!v(this.char)){if(this.atEndOfWord()){if(0===this.state.buf.length)throw this.error(new r("Expected digit in milliseconds"));return this.returnNow(s(this.state.result+"."+this.state.buf))}throw this.error(new r("Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z"))}this.consume()}parseTimeZoneOrFraction(){if(this.char===d)this.consume(),this.next(this.parseDateTimeFraction);else{if(this.char!==p&&43!==this.char){if(90===this.char)return this.consume(),this.return(n(this.state.result+this.state.buf));if(this.atEndOfWord())return this.returnNow(u(this.state.result+this.state.buf));throw this.error(new r("Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z"))}this.consume(),this.next(this.parseTimeZoneHour)}}parseDateTimeFraction(){if(v(this.char))this.consume();else{if(1===this.state.buf.length)throw this.error(new r("Expected digit in milliseconds"));if(this.char!==p&&43!==this.char){if(90===this.char)return this.consume(),this.return(n(this.state.result+this.state.buf));if(this.atEndOfWord())return this.returnNow(u(this.state.result+this.state.buf));throw this.error(new r("Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z"))}this.consume(),this.next(this.parseTimeZoneHour)}}parseTimeZoneHour(){if(!v(this.char))throw this.error(new r("Unexpected character in datetime, expected digit"));if(this.consume(),/\d\d$/.test(this.state.buf))return this.next(this.parseTimeZoneSep)}parseTimeZoneSep(){if(this.char!==m)throw this.error(new r("Unexpected character in datetime, expected colon"));this.consume(),this.next(this.parseTimeZoneMin)}parseTimeZoneMin(){if(!v(this.char))throw this.error(new r("Unexpected character in datetime, expected digit"));if(this.consume(),/\d\d$/.test(this.state.buf))return this.return(n(this.state.result+this.state.buf))}parseBoolean(){return 116===this.char?(this.consume(),this.next(this.parseTrue_r)):this.char===g?(this.consume(),this.next(this.parseFalse_a)):void 0}parseTrue_r(){if(114===this.char)return this.consume(),this.next(this.parseTrue_u);throw this.error(new r("Invalid boolean, expected true or false"))}parseTrue_u(){if(117===this.char)return this.consume(),this.next(this.parseTrue_e);throw this.error(new r("Invalid boolean, expected true or false"))}parseTrue_e(){if(this.char===E)return this.return(!0);throw this.error(new r("Invalid boolean, expected true or false"))}parseFalse_a(){if(97===this.char)return this.consume(),this.next(this.parseFalse_l);throw this.error(new r("Invalid boolean, expected true or false"))}parseFalse_l(){if(108===this.char)return this.consume(),this.next(this.parseFalse_s);throw this.error(new r("Invalid boolean, expected true or false"))}parseFalse_s(){if(115===this.char)return this.consume(),this.next(this.parseFalse_e);throw this.error(new r("Invalid boolean, expected true or false"))}parseFalse_e(){if(this.char===E)return this.return(!1);throw this.error(new r("Invalid boolean, expected true or false"))}parseInlineList(){if(this.char===c||9===this.char||this.char===a||this.char===o)return null;if(this.char===e.END)throw this.error(new r("Unterminated inline array"));return this.char===D?this.call(this.parseComment):93===this.char?this.return(this.state.resultArr||$()):this.callNow(this.parseValue,this.recordInlineListValue)}recordInlineListValue(e){if(this.state.resultArr){const t=this.state.resultArr[j],n=J(e);if(t!==n)throw this.error(new r(`Inline lists must be a single type, not a mix of ${t} and ${n}`))}else this.state.resultArr=$(J(e));return Q(e)||Y(e)?this.state.resultArr.push(e.valueOf()):this.state.resultArr.push(e),this.goto(this.parseInlineListNext)}parseInlineListNext(){if(this.char===c||9===this.char||this.char===a||this.char===o)return null;if(this.char===D)return this.call(this.parseComment);if(44===this.char)return this.next(this.parseInlineList);if(93===this.char)return this.goto(this.parseInlineList);throw this.error(new r("Invalid character, expected whitespace, comma (,) or close bracket (])"))}parseInlineTable(){if(this.char===c||9===this.char)return null;if(this.char===e.END||this.char===D||this.char===o||this.char===a)throw this.error(new r("Unterminated inline array"));return 125===this.char?this.return(this.state.resultTable||k()):(this.state.resultTable||(this.state.resultTable=k()),this.callNow(this.parseAssign,this.recordInlineTableValue))}recordInlineTableValue(e){let t=this.state.resultTable,n=e.key.pop();for(let n of e.key){if(R(t,n)&&(!L(t[n])||t[n][w]))throw this.error(new r("Can't redefine existing key"));t=t[n]=t[n]||N()}if(R(t,n))throw this.error(new r("Can't redefine existing key"));return Y(e.value)||Q(e.value)?t[n]=e.value.valueOf():t[n]=e.value,this.goto(this.parseInlineTableNext)}parseInlineTableNext(){if(this.char===c||9===this.char)return null;if(this.char===e.END||this.char===D||this.char===o||this.char===a)throw this.error(new r("Unterminated inline array"));if(44===this.char)return this.next(this.parseInlineTable);if(125===this.char)return this.goto(this.parseInlineTable);throw this.error(new r("Invalid character, expected whitespace, comma (,) or close bracket (])"))}}}}}),mr=T({"node_modules/@iarna/toml/parse-pretty-error.js"(e,t){t.exports=function(e,t){if(null==e.pos||null==e.line)return e;let r=e.message;if(r+=` at row ${e.line+1}, col ${e.col+1}, pos ${e.pos}:\n`,t&&t.split){const n=t.split(/\n/),u=String(Math.min(n.length,e.line+3)).length;let i=" ";for(;i.length<u;)i+=" ";for(let t=Math.max(0,e.line-1);t<Math.min(n.length,e.line+2);++t){let s=String(t+1);if(s.length<u&&(s=" "+s),e.line===t){r+=s+"> "+n[t]+"\n",r+=i+"  ";for(let t=0;t<e.col;++t)r+=" ";r+="^\n"}else r+=s+": "+n[t]+"\n"}}return e.message=r+"\n",e}}}),Fr=T({"node_modules/@iarna/toml/parse-async.js"(e,t){t.exports=function(e,t){t||(t={});const u=t.blocksize||40960,i=new r;return new Promise(((e,t)=>{setImmediate(s,0,u,e,t)}));function s(t,r,u,o){if(t>=e.length)try{return u(i.finish())}catch(t){return o(n(t,e))}try{i.parse(e.slice(t,t+r)),setImmediate(s,t+r,r,u,o)}catch(t){o(n(t,e))}}};var r=fr(),n=mr()}}),Er=T({"node_modules/js-tokens/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=/((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g,e.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}}}),gr=T({"node_modules/@babel/helper-validator-identifier/lib/identifier.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.isIdentifierChar=c,e.isIdentifierName=function(e){let t=!0;for(let r=0;r<e.length;r++){let n=e.charCodeAt(r);if(55296==(64512&n)&&r+1<e.length){const t=e.charCodeAt(++r);56320==(64512&t)&&(n=65536+((1023&n)<<10)+(1023&t))}if(t){if(t=!1,!a(n))return!1}else if(!c(n))return!1}return!t},e.isIdentifierStart=a;var t="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",r="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‌‍‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯・꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿･",n=new RegExp("["+t+"]"),u=new RegExp("["+t+r+"]");t=r=null;var i=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,16,621,2467,541,1507,4938,6,4191],s=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];function o(e,t){let r=65536;for(let n=0,u=t.length;n<u;n+=2){if(r+=t[n],r>e)return!1;if(r+=t[n+1],r>=e)return!0}return!1}function a(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&n.test(String.fromCharCode(e)):o(e,i)))}function c(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&u.test(String.fromCharCode(e)):o(e,i)||o(e,s))))}}}),Cr=T({"node_modules/@babel/helper-validator-identifier/lib/keyword.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.isKeyword=function(e){return n.has(e)},e.isReservedWord=s,e.isStrictBindOnlyReservedWord=a,e.isStrictBindReservedWord=function(e,t){return o(e,t)||a(e)},e.isStrictReservedWord=o;var t=["implements","interface","let","package","private","protected","public","static","yield"],r=["eval","arguments"],n=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),u=new Set(t),i=new Set(r);function s(e,t){return t&&"await"===e||"enum"===e}function o(e,t){return s(e,t)||u.has(e)}function a(e){return i.has(e)}}}),yr=T({"node_modules/@babel/helper-validator-identifier/lib/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"isIdentifierChar",{enumerable:!0,get:function(){return t.isIdentifierChar}}),Object.defineProperty(e,"isIdentifierName",{enumerable:!0,get:function(){return t.isIdentifierName}}),Object.defineProperty(e,"isIdentifierStart",{enumerable:!0,get:function(){return t.isIdentifierStart}}),Object.defineProperty(e,"isKeyword",{enumerable:!0,get:function(){return r.isKeyword}}),Object.defineProperty(e,"isReservedWord",{enumerable:!0,get:function(){return r.isReservedWord}}),Object.defineProperty(e,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return r.isStrictBindOnlyReservedWord}}),Object.defineProperty(e,"isStrictBindReservedWord",{enumerable:!0,get:function(){return r.isStrictBindReservedWord}}),Object.defineProperty(e,"isStrictReservedWord",{enumerable:!0,get:function(){return r.isStrictReservedWord}});var t=gr(),r=Cr()}}),Ar=T({"node_modules/picocolors/picocolors.js"(e,t){var r=process.argv||[],n=process.env,u=!("NO_COLOR"in n||r.includes("--no-color"))&&("FORCE_COLOR"in n||r.includes("--color")||"win32"===process.platform||null!=O&&O("tty").isatty(1)&&"dumb"!==n.TERM||"CI"in n),i=(e,t,r=e)=>n=>{let u=""+n,i=u.indexOf(t,e.length);return~i?e+s(u,t,r,i)+t:e+u+t},s=(e,t,r,n)=>{let u="",i=0;do{u+=e.substring(i,n)+r,i=n+t.length,n=e.indexOf(t,i)}while(~n);return u+e.substring(i)},o=(e=u)=>{let t=e?i:()=>String;return{isColorSupported:e,reset:t("[0m","[0m"),bold:t("[1m","[22m","[22m[1m"),dim:t("[2m","[22m","[22m[2m"),italic:t("[3m","[23m"),underline:t("[4m","[24m"),inverse:t("[7m","[27m"),hidden:t("[8m","[28m"),strikethrough:t("[9m","[29m"),black:t("[30m","[39m"),red:t("[31m","[39m"),green:t("[32m","[39m"),yellow:t("[33m","[39m"),blue:t("[34m","[39m"),magenta:t("[35m","[39m"),cyan:t("[36m","[39m"),white:t("[37m","[39m"),gray:t("[90m","[39m"),bgBlack:t("[40m","[49m"),bgRed:t("[41m","[49m"),bgGreen:t("[42m","[49m"),bgYellow:t("[43m","[49m"),bgBlue:t("[44m","[49m"),bgMagenta:t("[45m","[49m"),bgCyan:t("[46m","[49m"),bgWhite:t("[47m","[49m")}};t.exports=o(),t.exports.createColors=o}}),vr=T({"node_modules/@babel/highlight/lib/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(e,t={}){if(""!==e&&D(t)){return function(e,t){let r="";for(const{type:n,value:u}of a(t)){const t=e[n];r+=t?u.split(c).map((e=>t(e))).join("\n"):u}return r}((r=t.forceColor,{keyword:(u=r?(null!=h||(h=(0,n.createColors)(!0)),h):i).cyan,capitalized:u.yellow,jsxIdentifier:u.yellow,punctuator:u.yellow,number:u.magenta,string:u.green,regex:u.magenta,comment:u.gray,invalid:s(s(u.white,u.bgRed),u.bold)}),e)}return e;var r;var u},e.shouldHighlight=D;var t=Er(),r=yr(),n=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=u(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&{}.hasOwnProperty.call(e,s)){var o=i?Object.getOwnPropertyDescriptor(e,s):null;o&&(o.get||o.set)?Object.defineProperty(n,s,o):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}(Ar(),!0);function u(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(u=function(e){return e?r:t})(e)}var i="object"!=typeof process||"0"!==process.env.FORCE_COLOR&&"false"!==process.env.FORCE_COLOR?n.default:(0,n.createColors)(!1),s=(e,t)=>r=>e(t(r)),o=new Set(["as","async","from","get","of","set"]);var a,c=/\r\n|[\n\r\u2028\u2029]/,l=/^[()[\]{}]$/;{const e=/^[a-z][\w-]*$/i,n=function(t,n,u){if("name"===t.type){if((0,r.isKeyword)(t.value)||(0,r.isStrictReservedWord)(t.value,!0)||o.has(t.value))return"keyword";if(e.test(t.value)&&("<"===u[n-1]||"</"===u.slice(n-2,n)))return"jsxIdentifier";if(t.value[0]!==t.value[0].toLowerCase())return"capitalized"}return"punctuator"===t.type&&l.test(t.value)?"bracket":"invalid"!==t.type||"@"!==t.value&&"#"!==t.value?t.type:"punctuator"};a=function*(e){let r;for(;r=t.default.exec(e);){const u=t.matchToToken(r);yield{type:n(u,r.index,e),value:u.value}}}}function D(e){return i.isColorSupported||e.forceColor}var h=void 0;{let t,r;e.getChalk=({forceColor:e})=>{var n;return null!=t||(Gt(),n=Ut,t=I(b({},"__esModule",{value:!0}),n)),e?(null!=r||(r=new t.constructor({enabled:!0,level:1})),r):t}}}}),br=T({"node_modules/@babel/code-frame/lib/index.js"(e){Object.defineProperty(e,"__esModule",{value:!0}),e.codeFrameColumns=c,e.default=function(e,t,r,n={}){if(!o){o=!0;const e="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(process.emitWarning)process.emitWarning(e,"DeprecationWarning");else{new Error(e).name="DeprecationWarning",console.warn(new Error(e))}}r=Math.max(r,0);return c(e,{start:{column:r,line:t}},n)};var t=vr(),r=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=n(t);if(r&&r.has(e))return r.get(e);var u={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&{}.hasOwnProperty.call(e,s)){var o=i?Object.getOwnPropertyDescriptor(e,s):null;o&&(o.get||o.set)?Object.defineProperty(u,s,o):u[s]=e[s]}return u.default=e,r&&r.set(e,u),u}(Ar(),!0);function n(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(n=function(e){return e?r:t})(e)}var u="object"!=typeof process||"0"!==process.env.FORCE_COLOR&&"false"!==process.env.FORCE_COLOR?r.default:(0,r.createColors)(!1),i=(e,t)=>r=>e(t(r)),s=void 0;var o=!1;var a=/\r\n|[\n\r\u2028\u2029]/;function c(e,n,o={}){const c=(o.highlightCode||o.forceColor)&&(0,t.shouldHighlight)(o),l=o.forceColor?(null!=s||(s=(0,r.createColors)(!0)),s):u;const D=function(e){return{gutter:e.gray,marker:i(e.red,e.bold),message:i(e.red,e.bold)}}(l),h=(e,t)=>c?e(t):t,p=e.split(a),{start:d,end:f,markerLines:m}=function(e,t,r){const n=Object.assign({column:0,line:-1},e.start),u=Object.assign({},n,e.end),{linesAbove:i=2,linesBelow:s=3}=r||{},o=n.line,a=n.column,c=u.line,l=u.column;let D=Math.max(o-(i+1),0),h=Math.min(t.length,c+s);-1===o&&(D=0),-1===c&&(h=t.length);const p=c-o,d={};if(p)for(let e=0;e<=p;e++){const r=e+o;if(a)if(0===e){const e=t[r-1].length;d[r]=[a,e-a+1]}else if(e===p)d[r]=[0,l];else{const n=t[r-e].length;d[r]=[0,n]}else d[r]=!0}else d[o]=a===l?!a||[a,0]:[a,l-a];return{start:D,end:h,markerLines:d}}(n,p,o),F=n.start&&"number"==typeof n.start.column,E=String(f).length;let g=(c?(0,t.default)(e,o):e).split(a,f).slice(d,f).map(((e,t)=>{const r=d+1+t,n=` ${` ${r}`.slice(-E)} |`,u=m[r],i=!m[r+1];if(u){let t="";if(Array.isArray(u)){const r=e.slice(0,Math.max(u[0]-1,0)).replace(/[^\t]/g," "),s=u[1]||1;t=["\n ",h(D.gutter,n.replace(/\d/g," "))," ",r,h(D.marker,"^").repeat(s)].join(""),i&&o.message&&(t+=" "+h(D.message,o.message))}return[h(D.marker,">"),h(D.gutter,n),e.length>0?` ${e}`:"",t].join("")}return` ${h(D.gutter,n)}${e.length>0?` ${e}`:""}`})).join("\n");return o.message&&!F&&(g=`${" ".repeat(E+1)}${o.message}\n${g}`),c?l.reset(g):g}}}),_r=T({"node_modules/ignore/index.js"(e,t){function r(e){return Array.isArray(e)?e:[e]}var n=/^\s+$/,u=/(?:[^\\]|^)\\$/,i=/^\\!/,s=/^\\#/,o=/\r?\n/g,a=/^\.*\/|^\.+$/,c="node-ignore";"undefined"!=typeof Symbol&&(c=Symbol.for("node-ignore"));var l=c,D=/([0-z])-([0-z])/g,h=()=>!1,p=[[/^\uFEFF/,()=>""],[/\\?\s+$/,e=>0===e.indexOf("\\")?" ":""],[/\\\s/g,()=>" "],[/[\\$.|*+(){^]/g,e=>`\\${e}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(e,t,r)=>t+6<r.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)(\\\*)+(?=.+)/g,(e,t,r)=>t+r.replace(/\\\*/g,"[^\\/]*")],[/\\\\\\(?=[$.|*+(){^])/g,()=>"\\"],[/\\\\/g,()=>"\\"],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(e,t,r,n,u)=>"\\"===t?`\\[${r}${(e=>{const{length:t}=e;return e.slice(0,t-t%2)})(n)}${u}`:"]"===u&&n.length%2==0?`[${(e=>e.replace(D,((e,t,r)=>t.charCodeAt(0)<=r.charCodeAt(0)?e:"")))(r)}${n}]`:"[]"],[/(?:[^*])$/,e=>/\/$/.test(e)?`${e}$`:`${e}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,(e,t)=>`${t?`${t}[^/]+`:"[^/]*"}(?=$|\\/$)`]],d=Object.create(null),f=e=>"string"==typeof e,m=class{constructor(e,t,r,n){this.origin=e,this.pattern=t,this.negative=r,this.regex=n}},F=(e,t)=>{const r=e;let n=!1;0===e.indexOf("!")&&(n=!0,e=e.substr(1));const u=((e,t)=>{let r=d[e];return r||(r=p.reduce(((t,r)=>t.replace(r[0],r[1].bind(e))),e),d[e]=r),t?new RegExp(r,"i"):new RegExp(r)})(e=e.replace(i,"!").replace(s,"#"),t);return new m(r,e,n,u)},E=(e,t)=>{throw new t(e)},g=(e,t,r)=>{if(!f(e))return r(`path must be a string, but got \`${t}\``,TypeError);if(!e)return r("path must not be empty",TypeError);if(g.isNotRelative(e)){return r(`path should be a ${"`path.relative()`d"} string, but got "${t}"`,RangeError)}return!0},C=e=>a.test(e);g.isNotRelative=C,g.convert=e=>e;var y=class{constructor({ignorecase:e=!0,ignoreCase:t=e,allowRelativePaths:r=!1}={}){var n,u,i;n=this,u=l,i=!0,Object.defineProperty(n,u,{value:i}),this._rules=[],this._ignoreCase=t,this._allowRelativePaths=r,this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(e){if(e&&e[l])return this._rules=this._rules.concat(e._rules),void(this._added=!0);if((e=>e&&f(e)&&!n.test(e)&&!u.test(e)&&0!==e.indexOf("#"))(e)){const t=F(e,this._ignoreCase);this._added=!0,this._rules.push(t)}}add(e){return this._added=!1,r(f(e)?(e=>e.split(o))(e):e).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(e){return this.add(e)}_testOne(e,t){let r=!1,n=!1;return this._rules.forEach((u=>{const{negative:i}=u;if(n===i&&r!==n||i&&!r&&!n&&!t)return;u.regex.test(e)&&(r=!i,n=i)})),{ignored:r,unignored:n}}_test(e,t,r,n){const u=e&&g.convert(e);return g(u,e,this._allowRelativePaths?h:E),this._t(u,t,r,n)}_t(e,t,r,n){if(e in t)return t[e];if(n||(n=e.split("/")),n.pop(),!n.length)return t[e]=this._testOne(e,r);const u=this._t(n.join("/")+"/",t,r,n);return t[e]=u.ignored?u:this._testOne(e,r)}ignores(e){return this._test(e,this._ignoreCache,!1).ignored}createFilter(){return e=>!this.ignores(e)}filter(e){return r(e).filter(this.createFilter())}test(e){return this._test(e,this._testCache,!0)}},A=e=>new y(e);if(A.isPathValid=e=>g(e&&g.convert(e),e,h),A.default=A,t.exports=A,"undefined"!=typeof process&&(process.env&&process.env.IGNORE_TEST_WIN32||"win32"===process.platform)){const e=e=>/^\\\\\?\\/.test(e)||/["<>|\u0000-\u001F]+/u.test(e)?e:e.replace(/\\/g,"/");g.convert=e;const t=/^[a-z]:\//i;g.isNotRelative=e=>t.test(e)||C(e)}}}),wr=T({"node_modules/n-readlines/readlines.js"(e,t){var r=O("fs");t.exports=class{constructor(e,t){(t=t||{}).readChunk||(t.readChunk=1024),t.newLineCharacter?t.newLineCharacter=t.newLineCharacter.charCodeAt(0):t.newLineCharacter=10,this.fd="number"==typeof e?e:r.openSync(e,"r"),this.options=t,this.newLineCharacter=t.newLineCharacter,this.reset()}_searchInBuffer(e,t){let r=-1;for(let n=0;n<=e.length;n++){if(e[n]===t){r=n;break}}return r}reset(){this.eofReached=!1,this.linesCache=[],this.fdPosition=0}close(){r.closeSync(this.fd),this.fd=null}_extractLines(e){let t;const r=[];let n=0,u=0;for(;;){let i=e[n++];if(i===this.newLineCharacter)t=e.slice(u,n),r.push(t),u=n;else if(void 0===i)break}let i=e.slice(u,n);return i.length&&r.push(i),r}_readChunk(e){let t,n=0;const u=[];do{const e=Buffer.alloc(this.options.readChunk);t=r.readSync(this.fd,e,0,this.options.readChunk,this.fdPosition),n+=t,this.fdPosition=this.fdPosition+t,u.push(e)}while(t&&-1===this._searchInBuffer(u[u.length-1],this.options.newLineCharacter));let i=Buffer.concat(u);return t<this.options.readChunk&&(this.eofReached=!0,i=i.slice(0,n)),n&&(this.linesCache=this._extractLines(i),e&&(this.linesCache[0]=Buffer.concat([e,this.linesCache[0]]))),n}next(){if(!this.fd)return!1;let e,t=!1;if(this.eofReached&&0===this.linesCache.length)return t;if(this.linesCache.length||(e=this._readChunk()),this.linesCache.length){t=this.linesCache.shift();t[t.length-1]!==this.newLineCharacter&&(e=this._readChunk(t),e&&(t=this.linesCache.shift()))}return this.eofReached&&0===this.linesCache.length&&this.close(),t&&t[t.length-1]===this.newLineCharacter&&(t=t.slice(0,t.length-1)),t}}}}),Br=T({"node_modules/diff/lib/diff/array.js"(e){var t;Object.defineProperty(e,"__esModule",{value:!0}),e.diffArrays=function(e,t,n){return r.diff(e,t,n)},e.arrayDiff=void 0;var r=new(((t=H())&&t.__esModule?t:{default:t}).default);e.arrayDiff=r,r.tokenize=function(e){return e.slice()},r.join=r.removeEmpty=function(e){return e}}}),Sr={};k(Sr,{__debug:()=>hD,__internal:()=>DD,check:()=>oD,clearConfigCache:()=>aD,doc:()=>c,format:()=>sD,formatWithCursor:()=>iD,getFileInfo:()=>cD,getSupportInfo:()=>lD,resolveConfig:()=>Mo,resolveConfigFile:()=>Uo,util:()=>Wl,version:()=>Gl});var xr=N(V(),1),Or=N(lt(),1),Rr={key:e=>/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e)?e:JSON.stringify(e),value(e){if(null===e||"object"!=typeof e)return JSON.stringify(e);if(Array.isArray(e))return`[${e.map((e=>Rr.value(e))).join(", ")}]`;const t=Object.keys(e);return 0===t.length?"{}":`{ ${t.map((t=>`${Rr.key(t)}: ${Rr.value(e[t])}`)).join(", ")} }`},pair:({key:e,value:t})=>Rr.value({[e]:t})};Gt();Gt();var Tr=Symbol.for("vnopts.VALUE_NOT_EXIST"),kr=Symbol.for("vnopts.VALUE_UNCHANGED"),Ir=" ".repeat(2);function Nr(e,t,r,n){return[`Invalid ${$t.red(n.key(e))} value.`,`Expected ${$t.blue(r)},`,`but received ${t===Tr?$t.gray("nothing"):$t.red(n.value(t))}.`].join(" ")}function Lr({text:e,list:t},r){const n=[];return e&&n.push(`- ${$t.blue(e)}`),t&&n.push([`- ${$t.blue(t.title)}:`].concat(t.values.map((e=>Lr(e,r-Ir.length).replace(/^|\n/g,`$&${Ir}`)))).join("\n")),jr(n,r)}function jr(e,t){if(1===e.length)return e[0];const[r,n]=e,[u,i]=e.map((e=>e.split("\n",1)[0].length));return u>t&&u>i?n:r}Gt();var Pr=[],$r=[];var Mr=(e,t,{descriptor:r,logger:n,schemas:u})=>{const i=[`Ignored unknown option ${$t.yellow(r.pair({key:e,value:t}))}.`],s=Object.keys(u).sort().find((t=>function(e,t){if(e===t)return 0;const r=e;e.length>t.length&&(e=t,t=r);let n=e.length,u=t.length;for(;n>0&&e.charCodeAt(~-n)===t.charCodeAt(~-u);)n--,u--;let i,s,o,a,c=0;for(;c<n&&e.charCodeAt(c)===t.charCodeAt(c);)c++;if(n-=c,u-=c,0===n)return u;let l=0,D=0;for(;l<n;)$r[l]=e.charCodeAt(c+l),Pr[l]=++l;for(;D<u;)for(i=t.charCodeAt(c+D),o=D++,s=D,l=0;l<n;l++)a=i===$r[l]?o:o+1,o=Pr[l],s=Pr[l]=o>s?a>s?s+1:a:a>o?o+1:a;return s}(e,t)<3));s&&i.push(`Did you mean ${$t.blue(r.key(s))}?`),n.warn(i.join(" "))},Ur=["default","expected","validate","deprecated","forward","redirect","overlap","preprocess","postprocess"];var Hr=class{static create(e){return function(e,t){const r=new e(t),n=Object.create(r);for(const e of Ur)e in t&&(n[e]=Gr(t[e],r,Hr.prototype[e].length));return n}(this,e)}constructor(e){this.name=e.name}default(e){}expected(e){return"nothing"}validate(e,t){return!1}deprecated(e,t){return!1}forward(e,t){}redirect(e,t){}overlap(e,t,r){return e}preprocess(e,t){return e}postprocess(e,t){return kr}};function Gr(e,t,r){return"function"==typeof e?(...n)=>e(...n.slice(0,r-1),t,...n.slice(r-1)):()=>e}var Wr=class extends Hr{constructor(e){super(e),this._sourceName=e.sourceName}expected(e){return e.schemas[this._sourceName].expected(e)}validate(e,t){return t.schemas[this._sourceName].validate(e,t)}redirect(e,t){return this._sourceName}},Vr=class extends Hr{expected(){return"anything"}validate(){return!0}},Kr=class extends Hr{constructor({valueSchema:e,name:t=e.name,...r}){super({...r,name:t}),this._valueSchema=e}expected(e){const{text:t,list:r}=e.normalizeExpectedResult(this._valueSchema.expected(e));return{text:t&&`an array of ${t}`,list:r&&{title:"an array of the following values",values:[{list:r}]}}}validate(e,t){if(!Array.isArray(e))return!1;const r=[];for(const n of e){const e=t.normalizeValidateResult(this._valueSchema.validate(n,t),n);!0!==e&&r.push(e.value)}return 0===r.length||{value:r}}deprecated(e,t){const r=[];for(const n of e){const e=t.normalizeDeprecatedResult(this._valueSchema.deprecated(n,t),n);!1!==e&&r.push(...e.map((({value:e})=>({value:[e]}))))}return r}forward(e,t){const r=[];for(const n of e){const e=t.normalizeForwardResult(this._valueSchema.forward(n,t),n);r.push(...e.map(qr))}return r}redirect(e,t){const r=[],n=[];for(const u of e){const e=t.normalizeRedirectResult(this._valueSchema.redirect(u,t),u);"remain"in e&&r.push(e.remain),n.push(...e.redirect.map(qr))}return 0===r.length?{redirect:n}:{redirect:n,remain:r}}overlap(e,t){return e.concat(t)}};function qr({from:e,to:t}){return{from:[e],to:t}}var Yr=class extends Hr{expected(){return"true or false"}validate(e){return"boolean"==typeof e}};function Xr(e,t){const r=Object.create(null);for(const n of e){const e=n[t];if(r[e])throw new Error(`Duplicate ${t} ${JSON.stringify(e)}`);r[e]=n}return r}function zr(e,t){if(e===t)return 0;const r=typeof e,n=typeof t,u=["undefined","object","boolean","number","string"];return r!==n?u.indexOf(r)-u.indexOf(n):"string"!==r?Number(e)-Number(t):e.localeCompare(t)}function Qr(e){return void 0===e?{}:e}function Jr(e){if("string"==typeof e)return{text:e};const{text:t,list:r}=e;return function(e,t){if(!e)throw new Error(t)}(void 0!==(t||r),"Unexpected `expected` result, there should be at least one field."),r?{text:t,list:{title:r.title,values:r.values.map(Jr)}}:{text:t}}function Zr(e,t){return!0===e||(!1===e?{value:t}:e)}function en(e,t,r=!1){return!1!==e&&(!0===e?!!r||[{value:t}]:"value"in e?[e]:0!==e.length&&e)}function tn(e,t){return"string"==typeof e||"key"in e?{from:t,to:e}:"from"in e?{from:e.from,to:e.to}:{from:t,to:e.to}}function rn(e,t){return void 0===e?[]:Array.isArray(e)?e.map((e=>tn(e,t))):[tn(e,t)]}function nn(e,t){const r=rn("object"==typeof e&&"redirect"in e?e.redirect:e,t);return 0===r.length?{remain:t,redirect:r}:"object"==typeof e&&"remain"in e?{remain:e.remain,redirect:r}:{redirect:r}}var un=class extends Hr{constructor(e){super(e),this._choices=function(e,t){const r=new Map;for(const n of e){const e=n[t];if(r.has(e))throw new Error(`Duplicate ${t} ${JSON.stringify(e)}`);r.set(e,n)}return r}(e.choices.map((e=>e&&"object"==typeof e?e:{value:e})),"value")}expected({descriptor:e}){const t=Array.from(this._choices.keys()).map((e=>this._choices.get(e))).filter((({hidden:e})=>!e)).map((e=>e.value)).sort(zr).map(e.value),r=t.slice(0,-2),n=t.slice(-2);return{text:r.concat(n.join(" or ")).join(", "),list:{title:"one of the following values",values:t}}}validate(e){return this._choices.has(e)}deprecated(e){const t=this._choices.get(e);return!(!t||!t.deprecated)&&{value:e}}forward(e){const t=this._choices.get(e);return t?t.forward:void 0}redirect(e){const t=this._choices.get(e);return t?t.redirect:void 0}},sn=class extends Hr{expected(){return"a number"}validate(e,t){return"number"==typeof e}},on=class extends sn{expected(){return"an integer"}validate(e,t){return!0===t.normalizeValidateResult(super.validate(e,t),e)&&function(e){return e===Math.floor(e)}(e)}},an=class extends Hr{expected(){return"a string"}validate(e){return"string"==typeof e}},cn=Rr,ln=Mr,Dn=(e,t,r)=>{const{text:n,list:u}=r.normalizeExpectedResult(r.schemas[e].expected(r)),i=[];return n&&i.push(Nr(e,t,n,r.descriptor)),u&&i.push([Nr(e,t,u.title,r.descriptor)].concat(u.values.map((e=>Lr(e,r.loggerPrintWidth)))).join("\n")),jr(i,r.loggerPrintWidth)},hn=(e,t,{descriptor:r})=>{const n=[`${$t.yellow("string"==typeof e?r.key(e):r.pair(e))} is deprecated`];return t&&n.push(`we now treat it as ${$t.blue("string"==typeof t?r.key(t):r.pair(t))}`),n.join("; ")+"."},pn=class{constructor(e,t){const{logger:r=console,loggerPrintWidth:n=80,descriptor:u=cn,unknown:i=ln,invalid:s=Dn,deprecated:o=hn,missing:a=(()=>!1),required:c=(()=>!1),preprocess:l=(e=>e),postprocess:D=(()=>kr)}=t||{};var h;this._utils={descriptor:u,logger:r||{warn:()=>{}},loggerPrintWidth:n,schemas:Xr(e,"name"),normalizeDefaultResult:Qr,normalizeExpectedResult:Jr,normalizeDeprecatedResult:en,normalizeForwardResult:rn,normalizeRedirectResult:nn,normalizeValidateResult:Zr},this._unknownHandler=i,this._invalidHandler=(h=s,(...e)=>{const t=h(...e);return"string"==typeof t?new Error(t):t}),this._deprecatedHandler=o,this._identifyMissing=(e,t)=>!(e in t)||a(e,t),this._identifyRequired=c,this._preprocess=l,this._postprocess=D,this.cleanHistory()}cleanHistory(){this._hasDeprecationWarned=function(){const e=Object.create(null);return t=>{const r=JSON.stringify(t);return!!e[r]||(e[r]=!0,!1)}}()}normalize(e){const t={},r=[this._preprocess(e,this._utils)],n=()=>{for(;0!==r.length;){const e=r.shift(),n=this._applyNormalization(e,t);r.push(...n)}};n();for(const e of Object.keys(this._utils.schemas)){const n=this._utils.schemas[e];if(!(e in t)){const t=Qr(n.default(this._utils));"value"in t&&r.push({[e]:t.value})}}n();for(const e of Object.keys(this._utils.schemas)){if(!(e in t))continue;const r=this._utils.schemas[e],n=t[e],u=r.postprocess(n,this._utils);u!==kr&&(this._applyValidation(u,e,r),t[e]=u)}return this._applyPostprocess(t),this._applyRequiredCheck(t),t}_applyNormalization(e,t){const r=[],{knownKeys:n,unknownKeys:u}=this._partitionOptionKeys(e);for(const u of n){const n=this._utils.schemas[u],i=n.preprocess(e[u],this._utils);this._applyValidation(i,u,n);const s=({from:e,to:t})=>{r.push("string"==typeof t?{[t]:e}:{[t.key]:t.value})},o=({value:e,redirectTo:t})=>{const r=en(n.deprecated(e,this._utils),i,!0);if(!1!==r)if(!0===r)this._hasDeprecationWarned(u)||this._utils.logger.warn(this._deprecatedHandler(u,t,this._utils));else for(const{value:e}of r){const r={key:u,value:e};if(!this._hasDeprecationWarned(r)){const n="string"==typeof t?{key:t,value:e}:t;this._utils.logger.warn(this._deprecatedHandler(r,n,this._utils))}}};rn(n.forward(i,this._utils),i).forEach(s);const a=nn(n.redirect(i,this._utils),i);if(a.redirect.forEach(s),"remain"in a){const e=a.remain;t[u]=u in t?n.overlap(t[u],e,this._utils):e,o({value:e})}for(const{from:e,to:t}of a.redirect)o({value:e,redirectTo:t})}for(const n of u){const u=e[n];this._applyUnknownHandler(n,u,t,((e,t)=>{r.push({[e]:t})}))}return r}_applyRequiredCheck(e){for(const t of Object.keys(this._utils.schemas))if(this._identifyMissing(t,e)&&this._identifyRequired(t))throw this._invalidHandler(t,Tr,this._utils)}_partitionOptionKeys(e){const[t,r]=function(e,t){const r=[],n=[];for(const u of e)t(u)?r.push(u):n.push(u);return[r,n]}(Object.keys(e).filter((t=>!this._identifyMissing(t,e))),(e=>e in this._utils.schemas));return{knownKeys:t,unknownKeys:r}}_applyValidation(e,t,r){const n=Zr(r.validate(e,this._utils),e);if(!0!==n)throw this._invalidHandler(t,n.value,this._utils)}_applyUnknownHandler(e,t,r,n){const u=this._unknownHandler(e,t,this._utils);if(u)for(const e of Object.keys(u)){if(this._identifyMissing(e,u))continue;const t=u[e];e in this._utils.schemas?n(e,t):r[e]=t}}_applyPostprocess(e){const t=this._postprocess(e,this._utils);if(t!==kr){if(t.delete)for(const r of t.delete)delete e[r];if(t.override){const{knownKeys:r,unknownKeys:n}=this._partitionOptionKeys(t.override);for(const n of r){const r=t.override[n];this._applyValidation(r,n,this._utils.schemas[n]),e[n]=r}for(const r of n){const n=t.override[r];this._applyUnknownHandler(r,n,e,((t,r)=>{const n=this._utils.schemas[t];this._applyValidation(r,t,n),e[t]=r}))}}}}},dn={};k(dn,{ArgExpansionBailout:()=>Fn,ConfigError:()=>fn,UndefinedParserError:()=>mn});var fn=class extends Error{name="ConfigError"},mn=class extends Error{name="UndefinedParserError"},Fn=class extends Error{name="ArgExpansionBailout"},En=N(fe(),1),gn=e=>"string"==typeof e&&e.startsWith("file://"),Cn=e=>e instanceof URL||gn(e),yn=e=>Cn(e)?(0,n.fileURLToPath)(e):e;var An=function(e,t){const r=[[],[]];for(const n of e)r[t(n)?0:1].push(n);return r},vn=N(sr(),1);var bn=async function(e,t){const r=(null==t?void 0:t.allowSymlinks)??!0;let n;try{n=await(r?s.stat:s.lstat)(yn(e))}catch{return!1}return n.isDirectory()},_n=e=>u.resolve(yn(e));var wn,Bn,Sn,xn,On,Rn,Tn=function*(e,t){e=_n(e);const{root:r}=u.parse(e);if(e===(t=t?_n(t):r)||e.startsWith(t)){for(let r=e;r!==t;r=u.dirname(r))yield r;yield t}};wn=new WeakMap,Bn=new WeakMap,Sn=new WeakMap,xn=new WeakMap,On=new WeakSet,Rn=async function(e,t){const r=P(this,xn);if(t&&r.has(e))return r.get(e);for(const t of P(this,wn)){const r=u.join(e,t);if(await P(this,Bn).call(this,{name:t,path:r}))return r}};var kn,In=class{constructor({names:e,filter:t,stopDirectory:r}){$(this,On),$(this,wn),$(this,Bn),$(this,Sn),$(this,xn,new Map),M(this,wn,e),M(this,Bn,t),M(this,Sn,r)}async search(e,{shouldCache:t}){const r=P(this,xn);if(t&&r.has(e))return r.get(e);const n=[];let u;for(const r of Tn(e,P(this,Sn)))if(n.push(r),u=await U(this,On,Rn).call(this,r,t),u)break;for(const e of n)r.set(e,u);return u}clearCache(){P(this,xn).clear()}},Nn={names:[".git",".hg"],filter:({path:e})=>bn(e,{allowSymlinks:!1})};var Ln=function(e){if(!e)return null;if(e=function(e){const t={},r=Object.keys(e);for(let n=0;n<r.length;n++){const u=r[n];"unset"!==e[u]&&(t[u]=e[u])}return t}(e),0===Object.keys(e).length)return null;const t={};return e.indent_style&&(t.useTabs="tab"===e.indent_style),"tab"===e.indent_size&&(t.useTabs=!0),t.useTabs&&e.tab_width?t.tabWidth=e.tab_width:"space"===e.indent_style&&e.indent_size&&"tab"!==e.indent_size?t.tabWidth=e.indent_size:void 0!==e.tab_width&&(t.tabWidth=e.tab_width),e.max_line_length&&("off"===e.max_line_length?t.printWidth=Number.POSITIVE_INFINITY:t.printWidth=e.max_line_length),"single"===e.quote_type?t.singleQuote=!0:"double"===e.quote_type&&(t.singleQuote=!1),["cr","crlf","lf"].includes(e.end_of_line)&&(t.endOfLine=e.end_of_line),t},jn=new Map;function Pn(){null==kn||kn.clearCache(),jn.clear()}async function $n(e,{shouldCache:t}){const r=u.dirname(e),n=await async function(e,t){kn??(kn=new In(Nn));const r=await kn.search(e,t);return r?u.dirname(r):void 0}(r,{shouldCache:t}),i=await vn.default.parse(e,{root:n});return Ln(i)}var Mn=N(ar(),1),{stdin:Un}=process;async function Hn(){let e="";if(Un.isTTY)return e;Un.setEncoding("utf8");for await(const t of Un)e+=t;return e}Hn.buffer=async()=>{const e=[];let t=0;if(Un.isTTY)return Buffer.concat([]);for await(const r of Un)e.push(r),t+=r.length;return Buffer.concat(e,t)};var Gn={getPrettierConfigSearchStopDirectory:()=>{},getStdin:Hn,isCI:()=>Mn.isCI,writeFormattedFile:function(e,t){return s.writeFile(e,t)}};var Wn=async function(e,t){const r=(null==t?void 0:t.allowSymlinks)??!0;let n;try{n=await(r?s.stat:s.lstat)(yn(e))}catch{return!1}return n.isFile()},Vn=N(Fr(),1);function Kn(e){return null==e}var qn={isNothing:Kn,isObject:function(e){return"object"==typeof e&&null!==e},toArray:function(e){return Array.isArray(e)?e:Kn(e)?[]:[e]},repeat:function(e,t){var r,n="";for(r=0;r<t;r+=1)n+=e;return n},isNegativeZero:function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},extend:function(e,t){var r,n,u,i;if(t)for(r=0,n=(i=Object.keys(t)).length;r<n;r+=1)e[u=i[r]]=t[u];return e}};function Yn(e,t){var r="",n=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(r+='in "'+e.mark.name+'" '),r+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(r+="\n\n"+e.mark.snippet),n+" "+r):n}function Xn(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=Yn(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}Xn.prototype=Object.create(Error.prototype),Xn.prototype.constructor=Xn,Xn.prototype.toString=function(e){return this.name+": "+Yn(this,e)};var zn=Xn;function Qn(e,t,r,n,u){var i="",s="",o=Math.floor(u/2)-1;return n-t>o&&(t=n-o+(i=" ... ").length),r-n>o&&(r=n+o-(s=" ...").length),{str:i+e.slice(t,r).replace(/\t/g,"→")+s,pos:n-t+i.length}}function Jn(e,t){return qn.repeat(" ",t-e.length)+e}var Zn=function(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),"number"!=typeof t.indent&&(t.indent=1),"number"!=typeof t.linesBefore&&(t.linesBefore=3),"number"!=typeof t.linesAfter&&(t.linesAfter=2);for(var r,n=/\r?\n|\r|\0/g,u=[0],i=[],s=-1;r=n.exec(e.buffer);)i.push(r.index),u.push(r.index+r[0].length),e.position<=r.index&&s<0&&(s=u.length-2);s<0&&(s=u.length-1);var o,a,c="",l=Math.min(e.line+t.linesAfter,i.length).toString().length,D=t.maxLength-(t.indent+l+3);for(o=1;o<=t.linesBefore&&!(s-o<0);o++)a=Qn(e.buffer,u[s-o],i[s-o],e.position-(u[s]-u[s-o]),D),c=qn.repeat(" ",t.indent)+Jn((e.line-o+1).toString(),l)+" | "+a.str+"\n"+c;for(a=Qn(e.buffer,u[s],i[s],e.position,D),c+=qn.repeat(" ",t.indent)+Jn((e.line+1).toString(),l)+" | "+a.str+"\n",c+=qn.repeat("-",t.indent+l+3+a.pos)+"^\n",o=1;o<=t.linesAfter&&!(s+o>=i.length);o++)a=Qn(e.buffer,u[s+o],i[s+o],e.position-(u[s]-u[s+o]),D),c+=qn.repeat(" ",t.indent)+Jn((e.line+o+1).toString(),l)+" | "+a.str+"\n";return c.replace(/\n$/,"")},eu=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],tu=["scalar","sequence","mapping"];var ru=function(e,t){var r,n;if(t=t||{},Object.keys(t).forEach((function(t){if(-1===eu.indexOf(t))throw new zn('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')})),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=(r=t.styleAliases||null,n={},null!==r&&Object.keys(r).forEach((function(e){r[e].forEach((function(t){n[String(t)]=e}))})),n),-1===tu.indexOf(this.kind))throw new zn('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')};function nu(e,t){var r=[];return e[t].forEach((function(e){var t=r.length;r.forEach((function(r,n){r.tag===e.tag&&r.kind===e.kind&&r.multi===e.multi&&(t=n)})),r[t]=e})),r}function uu(e){return this.extend(e)}uu.prototype.extend=function(e){var t=[],r=[];if(e instanceof ru)r.push(e);else if(Array.isArray(e))r=r.concat(e);else{if(!e||!Array.isArray(e.implicit)&&!Array.isArray(e.explicit))throw new zn("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");e.implicit&&(t=t.concat(e.implicit)),e.explicit&&(r=r.concat(e.explicit))}t.forEach((function(e){if(!(e instanceof ru))throw new zn("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(e.loadKind&&"scalar"!==e.loadKind)throw new zn("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(e.multi)throw new zn("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")})),r.forEach((function(e){if(!(e instanceof ru))throw new zn("Specified list of YAML types (or a single Type object) contains a non-Type object.")}));var n=Object.create(uu.prototype);return n.implicit=(this.implicit||[]).concat(t),n.explicit=(this.explicit||[]).concat(r),n.compiledImplicit=nu(n,"implicit"),n.compiledExplicit=nu(n,"explicit"),n.compiledTypeMap=function(){var e,t,r={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}};function n(e){e.multi?(r.multi[e.kind].push(e),r.multi.fallback.push(e)):r[e.kind][e.tag]=r.fallback[e.tag]=e}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(n);return r}(n.compiledImplicit,n.compiledExplicit),n};var iu=new uu({explicit:[new ru("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}}),new ru("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}}),new ru("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}})]});var su=new ru("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"});var ou=new ru("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"});function au(e){return 48<=e&&e<=55}function cu(e){return 48<=e&&e<=57}var lu=new ru("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,r,n=e.length,u=0,i=!1;if(!n)return!1;if("-"!==(t=e[u])&&"+"!==t||(t=e[++u]),"0"===t){if(u+1===n)return!0;if("b"===(t=e[++u])){for(u++;u<n;u++)if("_"!==(t=e[u])){if("0"!==t&&"1"!==t)return!1;i=!0}return i&&"_"!==t}if("x"===t){for(u++;u<n;u++)if("_"!==(t=e[u])){if(!(48<=(r=e.charCodeAt(u))&&r<=57||65<=r&&r<=70||97<=r&&r<=102))return!1;i=!0}return i&&"_"!==t}if("o"===t){for(u++;u<n;u++)if("_"!==(t=e[u])){if(!au(e.charCodeAt(u)))return!1;i=!0}return i&&"_"!==t}}if("_"===t)return!1;for(;u<n;u++)if("_"!==(t=e[u])){if(!cu(e.charCodeAt(u)))return!1;i=!0}return!(!i||"_"===t)},construct:function(e){var t,r=e,n=1;if(-1!==r.indexOf("_")&&(r=r.replace(/_/g,"")),"-"!==(t=r[0])&&"+"!==t||("-"===t&&(n=-1),t=(r=r.slice(1))[0]),"0"===r)return 0;if("0"===t){if("b"===r[1])return n*parseInt(r.slice(2),2);if("x"===r[1])return n*parseInt(r.slice(2),16);if("o"===r[1])return n*parseInt(r.slice(2),8)}return n*parseInt(r,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1==0&&!qn.isNegativeZero(e)},represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),Du=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");var hu=/^[-+]?[0-9]+e/;var pu=new ru("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!Du.test(e)||"_"===e[e.length-1])},construct:function(e){var t,r;return r="-"===(t=e.replace(/_/g,"").toLowerCase())[0]?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===r?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:r*parseFloat(t,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!=0||qn.isNegativeZero(e))},represent:function(e,t){var r;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(qn.isNegativeZero(e))return"-0.0";return r=e.toString(10),hu.test(r)?r.replace("e",".e"):r},defaultStyle:"lowercase"}),du=iu.extend({implicit:[su,ou,lu,pu]}),fu=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),mu=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");var Fu=new ru("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==fu.exec(e)||null!==mu.exec(e))},construct:function(e){var t,r,n,u,i,s,o,a,c=0,l=null;if(null===(t=fu.exec(e))&&(t=mu.exec(e)),null===t)throw new Error("Date resolve error");if(r=+t[1],n=+t[2]-1,u=+t[3],!t[4])return new Date(Date.UTC(r,n,u));if(i=+t[4],s=+t[5],o=+t[6],t[7]){for(c=t[7].slice(0,3);c.length<3;)c+="0";c=+c}return t[9]&&(l=6e4*(60*+t[10]+ +(t[11]||0)),"-"===t[9]&&(l=-l)),a=new Date(Date.UTC(r,n,u,i,s,o,c)),l&&a.setTime(a.getTime()-l),a},instanceOf:Date,represent:function(e){return e.toISOString()}});var Eu=new ru("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}}),gu="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";var Cu=new ru("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,r,n=0,u=e.length,i=gu;for(r=0;r<u;r++)if(!((t=i.indexOf(e.charAt(r)))>64)){if(t<0)return!1;n+=6}return n%8==0},construct:function(e){var t,r,n=e.replace(/[\r\n=]/g,""),u=n.length,i=gu,s=0,o=[];for(t=0;t<u;t++)t%4==0&&t&&(o.push(s>>16&255),o.push(s>>8&255),o.push(255&s)),s=s<<6|i.indexOf(n.charAt(t));return 0===(r=u%4*6)?(o.push(s>>16&255),o.push(s>>8&255),o.push(255&s)):18===r?(o.push(s>>10&255),o.push(s>>2&255)):12===r&&o.push(s>>4&255),new Uint8Array(o)},predicate:function(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)},represent:function(e){var t,r,n="",u=0,i=e.length,s=gu;for(t=0;t<i;t++)t%3==0&&t&&(n+=s[u>>18&63],n+=s[u>>12&63],n+=s[u>>6&63],n+=s[63&u]),u=(u<<8)+e[t];return 0===(r=i%3)?(n+=s[u>>18&63],n+=s[u>>12&63],n+=s[u>>6&63],n+=s[63&u]):2===r?(n+=s[u>>10&63],n+=s[u>>4&63],n+=s[u<<2&63],n+=s[64]):1===r&&(n+=s[u>>2&63],n+=s[u<<4&63],n+=s[64],n+=s[64]),n}}),yu=Object.prototype.hasOwnProperty,Au=Object.prototype.toString;var vu=new ru("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,r,n,u,i,s=[],o=e;for(t=0,r=o.length;t<r;t+=1){if(n=o[t],i=!1,"[object Object]"!==Au.call(n))return!1;for(u in n)if(yu.call(n,u)){if(i)return!1;i=!0}if(!i)return!1;if(-1!==s.indexOf(u))return!1;s.push(u)}return!0},construct:function(e){return null!==e?e:[]}}),bu=Object.prototype.toString;var _u=new ru("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,r,n,u,i,s=e;for(i=new Array(s.length),t=0,r=s.length;t<r;t+=1){if(n=s[t],"[object Object]"!==bu.call(n))return!1;if(1!==(u=Object.keys(n)).length)return!1;i[t]=[u[0],n[u[0]]]}return!0},construct:function(e){if(null===e)return[];var t,r,n,u,i,s=e;for(i=new Array(s.length),t=0,r=s.length;t<r;t+=1)n=s[t],u=Object.keys(n),i[t]=[u[0],n[u[0]]];return i}}),wu=Object.prototype.hasOwnProperty;var Bu=new ru("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var t,r=e;for(t in r)if(wu.call(r,t)&&null!==r[t])return!1;return!0},construct:function(e){return null!==e?e:{}}}),Su=du.extend({implicit:[Fu,Eu],explicit:[Cu,vu,_u,Bu]}),xu=Object.prototype.hasOwnProperty,Ou=1,Ru=2,Tu=3,ku=4,Iu=1,Nu=2,Lu=3,ju=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,Pu=/[\x85\u2028\u2029]/,$u=/[,\[\]\{\}]/,Mu=/^(?:!|!!|![a-z\-]+!)$/i,Uu=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function Hu(e){return Object.prototype.toString.call(e)}function Gu(e){return 10===e||13===e}function Wu(e){return 9===e||32===e}function Vu(e){return 9===e||32===e||10===e||13===e}function Ku(e){return 44===e||91===e||93===e||123===e||125===e}function qu(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function Yu(e){return 48===e?"\0":97===e?"":98===e?"\b":116===e||9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function Xu(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}var zu,Qu=new Array(256),Ju=new Array(256);for(zu=0;zu<256;zu++)Qu[zu]=Yu(zu)?1:0,Ju[zu]=Yu(zu);function Zu(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||Su,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function ei(e,t){var r={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return r.snippet=Zn(r),new zn(t,r)}function ti(e,t){throw ei(e,t)}function ri(e,t){e.onWarning&&e.onWarning.call(null,ei(e,t))}var ni={YAML:function(e,t,r){var n,u,i;null!==e.version&&ti(e,"duplication of %YAML directive"),1!==r.length&&ti(e,"YAML directive accepts exactly one argument"),null===(n=/^([0-9]+)\.([0-9]+)$/.exec(r[0]))&&ti(e,"ill-formed argument of the YAML directive"),u=parseInt(n[1],10),i=parseInt(n[2],10),1!==u&&ti(e,"unacceptable YAML version of the document"),e.version=r[0],e.checkLineBreaks=i<2,1!==i&&2!==i&&ri(e,"unsupported YAML version of the document")},TAG:function(e,t,r){var n,u;2!==r.length&&ti(e,"TAG directive accepts exactly two arguments"),n=r[0],u=r[1],Mu.test(n)||ti(e,"ill-formed tag handle (first argument) of the TAG directive"),xu.call(e.tagMap,n)&&ti(e,'there is a previously declared suffix for "'+n+'" tag handle'),Uu.test(u)||ti(e,"ill-formed tag prefix (second argument) of the TAG directive");try{u=decodeURIComponent(u)}catch(t){ti(e,"tag prefix is malformed: "+u)}e.tagMap[n]=u}};function ui(e,t,r,n){var u,i,s,o;if(t<r){if(o=e.input.slice(t,r),n)for(u=0,i=o.length;u<i;u+=1)9===(s=o.charCodeAt(u))||32<=s&&s<=1114111||ti(e,"expected valid JSON character");else ju.test(o)&&ti(e,"the stream contains non-printable characters");e.result+=o}}function ii(e,t,r,n){var u,i,s,o;for(qn.isObject(r)||ti(e,"cannot merge mappings; the provided source object is unacceptable"),s=0,o=(u=Object.keys(r)).length;s<o;s+=1)i=u[s],xu.call(t,i)||(t[i]=r[i],n[i]=!0)}function si(e,t,r,n,u,i,s,o,a){var c,l;if(Array.isArray(u))for(c=0,l=(u=Array.prototype.slice.call(u)).length;c<l;c+=1)Array.isArray(u[c])&&ti(e,"nested arrays are not supported inside keys"),"object"==typeof u&&"[object Object]"===Hu(u[c])&&(u[c]="[object Object]");if("object"==typeof u&&"[object Object]"===Hu(u)&&(u="[object Object]"),u=String(u),null===t&&(t={}),"tag:yaml.org,2002:merge"===n)if(Array.isArray(i))for(c=0,l=i.length;c<l;c+=1)ii(e,t,i[c],r);else ii(e,t,i,r);else e.json||xu.call(r,u)||!xu.call(t,u)||(e.line=s||e.line,e.lineStart=o||e.lineStart,e.position=a||e.position,ti(e,"duplicated mapping key")),"__proto__"===u?Object.defineProperty(t,u,{configurable:!0,enumerable:!0,writable:!0,value:i}):t[u]=i,delete r[u];return t}function oi(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):ti(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function ai(e,t,r){for(var n=0,u=e.input.charCodeAt(e.position);0!==u;){for(;Wu(u);)9===u&&-1===e.firstTabInLine&&(e.firstTabInLine=e.position),u=e.input.charCodeAt(++e.position);if(t&&35===u)do{u=e.input.charCodeAt(++e.position)}while(10!==u&&13!==u&&0!==u);if(!Gu(u))break;for(oi(e),u=e.input.charCodeAt(e.position),n++,e.lineIndent=0;32===u;)e.lineIndent++,u=e.input.charCodeAt(++e.position)}return-1!==r&&0!==n&&e.lineIndent<r&&ri(e,"deficient indentation"),n}function ci(e){var t,r=e.position;return!(45!==(t=e.input.charCodeAt(r))&&46!==t||t!==e.input.charCodeAt(r+1)||t!==e.input.charCodeAt(r+2)||(r+=3,0!==(t=e.input.charCodeAt(r))&&!Vu(t)))}function li(e,t){1===t?e.result+=" ":t>1&&(e.result+=qn.repeat("\n",t-1))}function Di(e,t){var r,n,u=e.tag,i=e.anchor,s=[],o=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=s),n=e.input.charCodeAt(e.position);0!==n&&(-1!==e.firstTabInLine&&(e.position=e.firstTabInLine,ti(e,"tab characters must not be used in indentation")),45===n)&&Vu(e.input.charCodeAt(e.position+1));)if(o=!0,e.position++,ai(e,!0,-1)&&e.lineIndent<=t)s.push(null),n=e.input.charCodeAt(e.position);else if(r=e.line,di(e,t,Tu,!1,!0),s.push(e.result),ai(e,!0,-1),n=e.input.charCodeAt(e.position),(e.line===r||e.lineIndent>t)&&0!==n)ti(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return!!o&&(e.tag=u,e.anchor=i,e.kind="sequence",e.result=s,!0)}function hi(e){var t,r,n,u,i=!1,s=!1;if(33!==(u=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&ti(e,"duplication of a tag property"),60===(u=e.input.charCodeAt(++e.position))?(i=!0,u=e.input.charCodeAt(++e.position)):33===u?(s=!0,r="!!",u=e.input.charCodeAt(++e.position)):r="!",t=e.position,i){do{u=e.input.charCodeAt(++e.position)}while(0!==u&&62!==u);e.position<e.length?(n=e.input.slice(t,e.position),u=e.input.charCodeAt(++e.position)):ti(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==u&&!Vu(u);)33===u&&(s?ti(e,"tag suffix cannot contain exclamation marks"):(r=e.input.slice(t-1,e.position+1),Mu.test(r)||ti(e,"named tag handle cannot contain such characters"),s=!0,t=e.position+1)),u=e.input.charCodeAt(++e.position);n=e.input.slice(t,e.position),$u.test(n)&&ti(e,"tag suffix cannot contain flow indicator characters")}n&&!Uu.test(n)&&ti(e,"tag name cannot contain such characters: "+n);try{n=decodeURIComponent(n)}catch(t){ti(e,"tag name is malformed: "+n)}return i?e.tag=n:xu.call(e.tagMap,r)?e.tag=e.tagMap[r]+n:"!"===r?e.tag="!"+n:"!!"===r?e.tag="tag:yaml.org,2002:"+n:ti(e,'undeclared tag handle "'+r+'"'),!0}function pi(e){var t,r;if(38!==(r=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&ti(e,"duplication of an anchor property"),r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!Vu(r)&&!Ku(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&ti(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function di(e,t,r,n,u){var i,s,o,a,c,l,D,h,p,d=1,f=!1,m=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,i=s=o=ku===r||Tu===r,n&&ai(e,!0,-1)&&(f=!0,e.lineIndent>t?d=1:e.lineIndent===t?d=0:e.lineIndent<t&&(d=-1)),1===d)for(;hi(e)||pi(e);)ai(e,!0,-1)?(f=!0,o=i,e.lineIndent>t?d=1:e.lineIndent===t?d=0:e.lineIndent<t&&(d=-1)):o=!1;if(o&&(o=f||u),1!==d&&ku!==r||(h=Ou===r||Ru===r?t:t+1,p=e.position-e.lineStart,1===d?o&&(Di(e,p)||function(e,t,r){var n,u,i,s,o,a,c,l=e.tag,D=e.anchor,h={},p=Object.create(null),d=null,f=null,m=null,F=!1,E=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=h),c=e.input.charCodeAt(e.position);0!==c;){if(F||-1===e.firstTabInLine||(e.position=e.firstTabInLine,ti(e,"tab characters must not be used in indentation")),n=e.input.charCodeAt(e.position+1),i=e.line,63!==c&&58!==c||!Vu(n)){if(s=e.line,o=e.lineStart,a=e.position,!di(e,r,Ru,!1,!0))break;if(e.line===i){for(c=e.input.charCodeAt(e.position);Wu(c);)c=e.input.charCodeAt(++e.position);if(58===c)Vu(c=e.input.charCodeAt(++e.position))||ti(e,"a whitespace character is expected after the key-value separator within a block mapping"),F&&(si(e,h,p,d,f,null,s,o,a),d=f=m=null),E=!0,F=!1,u=!1,d=e.tag,f=e.result;else{if(!E)return e.tag=l,e.anchor=D,!0;ti(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!E)return e.tag=l,e.anchor=D,!0;ti(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===c?(F&&(si(e,h,p,d,f,null,s,o,a),d=f=m=null),E=!0,F=!0,u=!0):F?(F=!1,u=!0):ti(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,c=n;if((e.line===i||e.lineIndent>t)&&(F&&(s=e.line,o=e.lineStart,a=e.position),di(e,t,ku,!0,u)&&(F?f=e.result:m=e.result),F||(si(e,h,p,d,f,m,s,o,a),d=f=m=null),ai(e,!0,-1),c=e.input.charCodeAt(e.position)),(e.line===i||e.lineIndent>t)&&0!==c)ti(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return F&&si(e,h,p,d,f,null,s,o,a),E&&(e.tag=l,e.anchor=D,e.kind="mapping",e.result=h),E}(e,p,h))||function(e,t){var r,n,u,i,s,o,a,c,l,D,h,p,d=!0,f=e.tag,m=e.anchor,F=Object.create(null);if(91===(p=e.input.charCodeAt(e.position)))s=93,c=!1,i=[];else{if(123!==p)return!1;s=125,c=!0,i={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=i),p=e.input.charCodeAt(++e.position);0!==p;){if(ai(e,!0,t),(p=e.input.charCodeAt(e.position))===s)return e.position++,e.tag=f,e.anchor=m,e.kind=c?"mapping":"sequence",e.result=i,!0;d?44===p&&ti(e,"expected the node content, but found ','"):ti(e,"missed comma between flow collection entries"),h=null,o=a=!1,63===p&&Vu(e.input.charCodeAt(e.position+1))&&(o=a=!0,e.position++,ai(e,!0,t)),r=e.line,n=e.lineStart,u=e.position,di(e,t,Ou,!1,!0),D=e.tag,l=e.result,ai(e,!0,t),p=e.input.charCodeAt(e.position),!a&&e.line!==r||58!==p||(o=!0,p=e.input.charCodeAt(++e.position),ai(e,!0,t),di(e,t,Ou,!1,!0),h=e.result),c?si(e,i,F,D,l,h,r,n,u):o?i.push(si(e,null,F,D,l,h,r,n,u)):i.push(l),ai(e,!0,t),44===(p=e.input.charCodeAt(e.position))?(d=!0,p=e.input.charCodeAt(++e.position)):d=!1}ti(e,"unexpected end of the stream within a flow collection")}(e,h)?m=!0:(s&&function(e,t){var r,n,u,i,s,o=Iu,a=!1,c=!1,l=t,D=0,h=!1;if(124===(i=e.input.charCodeAt(e.position)))n=!1;else{if(62!==i)return!1;n=!0}for(e.kind="scalar",e.result="";0!==i;)if(43===(i=e.input.charCodeAt(++e.position))||45===i)Iu===o?o=43===i?Lu:Nu:ti(e,"repeat of a chomping mode identifier");else{if(!((u=48<=(s=i)&&s<=57?s-48:-1)>=0))break;0===u?ti(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):c?ti(e,"repeat of an indentation width identifier"):(l=t+u-1,c=!0)}if(Wu(i)){do{i=e.input.charCodeAt(++e.position)}while(Wu(i));if(35===i)do{i=e.input.charCodeAt(++e.position)}while(!Gu(i)&&0!==i)}for(;0!==i;){for(oi(e),e.lineIndent=0,i=e.input.charCodeAt(e.position);(!c||e.lineIndent<l)&&32===i;)e.lineIndent++,i=e.input.charCodeAt(++e.position);if(!c&&e.lineIndent>l&&(l=e.lineIndent),Gu(i))D++;else{if(e.lineIndent<l){o===Lu?e.result+=qn.repeat("\n",a?1+D:D):o===Iu&&a&&(e.result+="\n");break}for(n?Wu(i)?(h=!0,e.result+=qn.repeat("\n",a?1+D:D)):h?(h=!1,e.result+=qn.repeat("\n",D+1)):0===D?a&&(e.result+=" "):e.result+=qn.repeat("\n",D):e.result+=qn.repeat("\n",a?1+D:D),a=!0,c=!0,D=0,r=e.position;!Gu(i)&&0!==i;)i=e.input.charCodeAt(++e.position);ui(e,r,e.position,!1)}}return!0}(e,h)||function(e,t){var r,n,u;if(39!==(r=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,n=u=e.position;0!==(r=e.input.charCodeAt(e.position));)if(39===r){if(ui(e,n,e.position,!0),39!==(r=e.input.charCodeAt(++e.position)))return!0;n=e.position,e.position++,u=e.position}else Gu(r)?(ui(e,n,u,!0),li(e,ai(e,!1,t)),n=u=e.position):e.position===e.lineStart&&ci(e)?ti(e,"unexpected end of the document within a single quoted scalar"):(e.position++,u=e.position);ti(e,"unexpected end of the stream within a single quoted scalar")}(e,h)||function(e,t){var r,n,u,i,s,o,a;if(34!==(o=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,r=n=e.position;0!==(o=e.input.charCodeAt(e.position));){if(34===o)return ui(e,r,e.position,!0),e.position++,!0;if(92===o){if(ui(e,r,e.position,!0),Gu(o=e.input.charCodeAt(++e.position)))ai(e,!1,t);else if(o<256&&Qu[o])e.result+=Ju[o],e.position++;else if((s=120===(a=o)?2:117===a?4:85===a?8:0)>0){for(u=s,i=0;u>0;u--)(s=qu(o=e.input.charCodeAt(++e.position)))>=0?i=(i<<4)+s:ti(e,"expected hexadecimal character");e.result+=Xu(i),e.position++}else ti(e,"unknown escape sequence");r=n=e.position}else Gu(o)?(ui(e,r,n,!0),li(e,ai(e,!1,t)),r=n=e.position):e.position===e.lineStart&&ci(e)?ti(e,"unexpected end of the document within a double quoted scalar"):(e.position++,n=e.position)}ti(e,"unexpected end of the stream within a double quoted scalar")}(e,h)?m=!0:!function(e){var t,r,n;if(42!==(n=e.input.charCodeAt(e.position)))return!1;for(n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!Vu(n)&&!Ku(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&ti(e,"name of an alias node must contain at least one character"),r=e.input.slice(t,e.position),xu.call(e.anchorMap,r)||ti(e,'unidentified alias "'+r+'"'),e.result=e.anchorMap[r],ai(e,!0,-1),!0}(e)?function(e,t,r){var n,u,i,s,o,a,c,l,D=e.kind,h=e.result;if(Vu(l=e.input.charCodeAt(e.position))||Ku(l)||35===l||38===l||42===l||33===l||124===l||62===l||39===l||34===l||37===l||64===l||96===l)return!1;if((63===l||45===l)&&(Vu(n=e.input.charCodeAt(e.position+1))||r&&Ku(n)))return!1;for(e.kind="scalar",e.result="",u=i=e.position,s=!1;0!==l;){if(58===l){if(Vu(n=e.input.charCodeAt(e.position+1))||r&&Ku(n))break}else if(35===l){if(Vu(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&ci(e)||r&&Ku(l))break;if(Gu(l)){if(o=e.line,a=e.lineStart,c=e.lineIndent,ai(e,!1,-1),e.lineIndent>=t){s=!0,l=e.input.charCodeAt(e.position);continue}e.position=i,e.line=o,e.lineStart=a,e.lineIndent=c;break}}s&&(ui(e,u,i,!1),li(e,e.line-o),u=i=e.position,s=!1),Wu(l)||(i=e.position+1),l=e.input.charCodeAt(++e.position)}return ui(e,u,i,!1),!!e.result||(e.kind=D,e.result=h,!1)}(e,h,Ou===r)&&(m=!0,null===e.tag&&(e.tag="?")):(m=!0,null===e.tag&&null===e.anchor||ti(e,"alias node should not have any properties")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===d&&(m=o&&Di(e,p))),null===e.tag)null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);else if("?"===e.tag){for(null!==e.result&&"scalar"!==e.kind&&ti(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),a=0,c=e.implicitTypes.length;a<c;a+=1)if((D=e.implicitTypes[a]).resolve(e.result)){e.result=D.construct(e.result),e.tag=D.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else if("!"!==e.tag){if(xu.call(e.typeMap[e.kind||"fallback"],e.tag))D=e.typeMap[e.kind||"fallback"][e.tag];else for(D=null,a=0,c=(l=e.typeMap.multi[e.kind||"fallback"]).length;a<c;a+=1)if(e.tag.slice(0,l[a].tag.length)===l[a].tag){D=l[a];break}D||ti(e,"unknown tag !<"+e.tag+">"),null!==e.result&&D.kind!==e.kind&&ti(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+D.kind+'", not "'+e.kind+'"'),D.resolve(e.result,e.tag)?(e.result=D.construct(e.result,e.tag),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):ti(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||m}function fi(e){var t,r,n,u,i=e.position,s=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);0!==(u=e.input.charCodeAt(e.position))&&(ai(e,!0,-1),u=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==u));){for(s=!0,u=e.input.charCodeAt(++e.position),t=e.position;0!==u&&!Vu(u);)u=e.input.charCodeAt(++e.position);for(n=[],(r=e.input.slice(t,e.position)).length<1&&ti(e,"directive name must not be less than one character in length");0!==u;){for(;Wu(u);)u=e.input.charCodeAt(++e.position);if(35===u){do{u=e.input.charCodeAt(++e.position)}while(0!==u&&!Gu(u));break}if(Gu(u))break;for(t=e.position;0!==u&&!Vu(u);)u=e.input.charCodeAt(++e.position);n.push(e.input.slice(t,e.position))}0!==u&&oi(e),xu.call(ni,r)?ni[r](e,r,n):ri(e,'unknown document directive "'+r+'"')}ai(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,ai(e,!0,-1)):s&&ti(e,"directives end mark is expected"),di(e,e.lineIndent-1,ku,!1,!0),ai(e,!0,-1),e.checkLineBreaks&&Pu.test(e.input.slice(i,e.position))&&ri(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&ci(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,ai(e,!0,-1)):e.position<e.length-1&&ti(e,"end of the stream or a document separator is expected")}function mi(e,t){t=t||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var r=new Zu(e,t),n=e.indexOf("\0");for(-1!==n&&(r.position=n,ti(r,"null byte is not allowed in input")),r.input+="\0";32===r.input.charCodeAt(r.position);)r.lineIndent+=1,r.position+=1;for(;r.position<r.length-1;)fi(r);return r.documents}var Fi={loadAll:function(e,t,r){null!==t&&"object"==typeof t&&void 0===r&&(r=t,t=null);var n=mi(e,r);if("function"!=typeof t)return n;for(var u=0,i=n.length;u<i;u+=1)t(n[u])},load:function(e,t){var r=mi(e,t);if(0!==r.length){if(1===r.length)return r[0];throw new zn("expected a single document in the stream, but found more")}}},Ei={};function gi(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}Ei[0]="\\0",Ei[7]="\\a",Ei[8]="\\b",Ei[9]="\\t",Ei[10]="\\n",Ei[11]="\\v",Ei[12]="\\f",Ei[13]="\\r",Ei[27]="\\e",Ei[34]='\\"',Ei[92]="\\\\",Ei[133]="\\N",Ei[160]="\\_",Ei[8232]="\\L",Ei[8233]="\\P";var Ci,yi,Ai,vi,bi,_i,wi,Bi,Si,xi,Oi,Ri,Ti,ki,Ii=Fi.load,Ni=(gi("safeLoad","load"),gi("safeLoadAll","loadAll"),gi("safeDump","dump"),{Space_Separator:/[\u1680\u2000-\u200A\u202F\u205F\u3000]/,ID_Start:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,ID_Continue:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/}),Li={isSpaceSeparator:e=>"string"==typeof e&&Ni.Space_Separator.test(e),isIdStartChar:e=>"string"==typeof e&&(e>="a"&&e<="z"||e>="A"&&e<="Z"||"$"===e||"_"===e||Ni.ID_Start.test(e)),isIdContinueChar:e=>"string"==typeof e&&(e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"$"===e||"_"===e||"‌"===e||"‍"===e||Ni.ID_Continue.test(e)),isDigit:e=>"string"==typeof e&&/[0-9]/.test(e),isHexDigit:e=>"string"==typeof e&&/[0-9A-Fa-f]/.test(e)};function ji(e,t,r){const n=e[t];if(null!=n&&"object"==typeof n)if(Array.isArray(n))for(let e=0;e<n.length;e++){const t=String(e),u=ji(n,t,r);void 0===u?delete n[t]:Object.defineProperty(n,t,{value:u,writable:!0,enumerable:!0,configurable:!0})}else for(const e in n){const t=ji(n,e,r);void 0===t?delete n[e]:Object.defineProperty(n,e,{value:t,writable:!0,enumerable:!0,configurable:!0})}return r.call(e,t,n)}function Pi(){for(xi="default",Oi="",Ri=!1,Ti=1;;){ki=$i();const e=Ui[xi]();if(e)return e}}function $i(){if(Ci[vi])return String.fromCodePoint(Ci.codePointAt(vi))}function Mi(){const e=$i();return"\n"===e?(bi++,_i=0):e?_i+=e.length:_i++,e&&(vi+=e.length),e}var Ui={default(){switch(ki){case"\t":case"\v":case"\f":case" ":case" ":case"\ufeff":case"\n":case"\r":case"\u2028":case"\u2029":return void Mi();case"/":return Mi(),void(xi="comment");case void 0:return Mi(),Hi("eof")}if(!Li.isSpaceSeparator(ki))return Ui[yi]();Mi()},comment(){switch(ki){case"*":return Mi(),void(xi="multiLineComment");case"/":return Mi(),void(xi="singleLineComment")}throw Yi(Mi())},multiLineComment(){switch(ki){case"*":return Mi(),void(xi="multiLineCommentAsterisk");case void 0:throw Yi(Mi())}Mi()},multiLineCommentAsterisk(){switch(ki){case"*":return void Mi();case"/":return Mi(),void(xi="default");case void 0:throw Yi(Mi())}Mi(),xi="multiLineComment"},singleLineComment(){switch(ki){case"\n":case"\r":case"\u2028":case"\u2029":return Mi(),void(xi="default");case void 0:return Mi(),Hi("eof")}Mi()},value(){switch(ki){case"{":case"[":return Hi("punctuator",Mi());case"n":return Mi(),Gi("ull"),Hi("null",null);case"t":return Mi(),Gi("rue"),Hi("boolean",!0);case"f":return Mi(),Gi("alse"),Hi("boolean",!1);case"-":case"+":return"-"===Mi()&&(Ti=-1),void(xi="sign");case".":return Oi=Mi(),void(xi="decimalPointLeading");case"0":return Oi=Mi(),void(xi="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return Oi=Mi(),void(xi="decimalInteger");case"I":return Mi(),Gi("nfinity"),Hi("numeric",1/0);case"N":return Mi(),Gi("aN"),Hi("numeric",NaN);case'"':case"'":return Ri='"'===Mi(),Oi="",void(xi="string")}throw Yi(Mi())},identifierNameStartEscape(){if("u"!==ki)throw Yi(Mi());Mi();const e=Wi();switch(e){case"$":case"_":break;default:if(!Li.isIdStartChar(e))throw zi()}Oi+=e,xi="identifierName"},identifierName(){switch(ki){case"$":case"_":case"‌":case"‍":return void(Oi+=Mi());case"\\":return Mi(),void(xi="identifierNameEscape")}if(!Li.isIdContinueChar(ki))return Hi("identifier",Oi);Oi+=Mi()},identifierNameEscape(){if("u"!==ki)throw Yi(Mi());Mi();const e=Wi();switch(e){case"$":case"_":case"‌":case"‍":break;default:if(!Li.isIdContinueChar(e))throw zi()}Oi+=e,xi="identifierName"},sign(){switch(ki){case".":return Oi=Mi(),void(xi="decimalPointLeading");case"0":return Oi=Mi(),void(xi="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return Oi=Mi(),void(xi="decimalInteger");case"I":return Mi(),Gi("nfinity"),Hi("numeric",Ti*(1/0));case"N":return Mi(),Gi("aN"),Hi("numeric",NaN)}throw Yi(Mi())},zero(){switch(ki){case".":return Oi+=Mi(),void(xi="decimalPoint");case"e":case"E":return Oi+=Mi(),void(xi="decimalExponent");case"x":case"X":return Oi+=Mi(),void(xi="hexadecimal")}return Hi("numeric",0*Ti)},decimalInteger(){switch(ki){case".":return Oi+=Mi(),void(xi="decimalPoint");case"e":case"E":return Oi+=Mi(),void(xi="decimalExponent")}if(!Li.isDigit(ki))return Hi("numeric",Ti*Number(Oi));Oi+=Mi()},decimalPointLeading(){if(Li.isDigit(ki))return Oi+=Mi(),void(xi="decimalFraction");throw Yi(Mi())},decimalPoint(){switch(ki){case"e":case"E":return Oi+=Mi(),void(xi="decimalExponent")}return Li.isDigit(ki)?(Oi+=Mi(),void(xi="decimalFraction")):Hi("numeric",Ti*Number(Oi))},decimalFraction(){switch(ki){case"e":case"E":return Oi+=Mi(),void(xi="decimalExponent")}if(!Li.isDigit(ki))return Hi("numeric",Ti*Number(Oi));Oi+=Mi()},decimalExponent(){switch(ki){case"+":case"-":return Oi+=Mi(),void(xi="decimalExponentSign")}if(Li.isDigit(ki))return Oi+=Mi(),void(xi="decimalExponentInteger");throw Yi(Mi())},decimalExponentSign(){if(Li.isDigit(ki))return Oi+=Mi(),void(xi="decimalExponentInteger");throw Yi(Mi())},decimalExponentInteger(){if(!Li.isDigit(ki))return Hi("numeric",Ti*Number(Oi));Oi+=Mi()},hexadecimal(){if(Li.isHexDigit(ki))return Oi+=Mi(),void(xi="hexadecimalInteger");throw Yi(Mi())},hexadecimalInteger(){if(!Li.isHexDigit(ki))return Hi("numeric",Ti*Number(Oi));Oi+=Mi()},string(){switch(ki){case"\\":return Mi(),void(Oi+=function(){switch($i()){case"b":return Mi(),"\b";case"f":return Mi(),"\f";case"n":return Mi(),"\n";case"r":return Mi(),"\r";case"t":return Mi(),"\t";case"v":return Mi(),"\v";case"0":if(Mi(),Li.isDigit($i()))throw Yi(Mi());return"\0";case"x":return Mi(),function(){let e="",t=$i();if(!Li.isHexDigit(t))throw Yi(Mi());if(e+=Mi(),t=$i(),!Li.isHexDigit(t))throw Yi(Mi());return e+=Mi(),String.fromCodePoint(parseInt(e,16))}();case"u":return Mi(),Wi();case"\n":case"\u2028":case"\u2029":return Mi(),"";case"\r":return Mi(),"\n"===$i()&&Mi(),"";case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case void 0:throw Yi(Mi())}return Mi()}());case'"':return Ri?(Mi(),Hi("string",Oi)):void(Oi+=Mi());case"'":return Ri?void(Oi+=Mi()):(Mi(),Hi("string",Oi));case"\n":case"\r":throw Yi(Mi());case"\u2028":case"\u2029":e=ki,console.warn(`JSON5: '${Qi(e)}' in strings is not valid ECMAScript; consider escaping`);break;case void 0:throw Yi(Mi())}var e;Oi+=Mi()},start(){switch(ki){case"{":case"[":return Hi("punctuator",Mi())}xi="value"},beforePropertyName(){switch(ki){case"$":case"_":return Oi=Mi(),void(xi="identifierName");case"\\":return Mi(),void(xi="identifierNameStartEscape");case"}":return Hi("punctuator",Mi());case'"':case"'":return Ri='"'===Mi(),void(xi="string")}if(Li.isIdStartChar(ki))return Oi+=Mi(),void(xi="identifierName");throw Yi(Mi())},afterPropertyName(){if(":"===ki)return Hi("punctuator",Mi());throw Yi(Mi())},beforePropertyValue(){xi="value"},afterPropertyValue(){switch(ki){case",":case"}":return Hi("punctuator",Mi())}throw Yi(Mi())},beforeArrayValue(){if("]"===ki)return Hi("punctuator",Mi());xi="value"},afterArrayValue(){switch(ki){case",":case"]":return Hi("punctuator",Mi())}throw Yi(Mi())},end(){throw Yi(Mi())}};function Hi(e,t){return{type:e,value:t,line:bi,column:_i}}function Gi(e){for(const t of e){if($i()!==t)throw Yi(Mi());Mi()}}function Wi(){let e="",t=4;for(;t-- >0;){const t=$i();if(!Li.isHexDigit(t))throw Yi(Mi());e+=Mi()}return String.fromCodePoint(parseInt(e,16))}var Vi={start(){if("eof"===wi.type)throw Xi();Ki()},beforePropertyName(){switch(wi.type){case"identifier":case"string":return Bi=wi.value,void(yi="afterPropertyName");case"punctuator":return void qi();case"eof":throw Xi()}},afterPropertyName(){if("eof"===wi.type)throw Xi();yi="beforePropertyValue"},beforePropertyValue(){if("eof"===wi.type)throw Xi();Ki()},beforeArrayValue(){if("eof"===wi.type)throw Xi();"punctuator"!==wi.type||"]"!==wi.value?Ki():qi()},afterPropertyValue(){if("eof"===wi.type)throw Xi();switch(wi.value){case",":return void(yi="beforePropertyName");case"}":qi()}},afterArrayValue(){if("eof"===wi.type)throw Xi();switch(wi.value){case",":return void(yi="beforeArrayValue");case"]":qi()}},end(){}};function Ki(){let e;switch(wi.type){case"punctuator":switch(wi.value){case"{":e={};break;case"[":e=[]}break;case"null":case"boolean":case"numeric":case"string":e=wi.value}if(void 0===Si)Si=e;else{const t=Ai[Ai.length-1];Array.isArray(t)?t.push(e):Object.defineProperty(t,Bi,{value:e,writable:!0,enumerable:!0,configurable:!0})}if(null!==e&&"object"==typeof e)Ai.push(e),yi=Array.isArray(e)?"beforeArrayValue":"beforePropertyName";else{const e=Ai[Ai.length-1];yi=null==e?"end":Array.isArray(e)?"afterArrayValue":"afterPropertyValue"}}function qi(){Ai.pop();const e=Ai[Ai.length-1];yi=null==e?"end":Array.isArray(e)?"afterArrayValue":"afterPropertyValue"}function Yi(e){return Ji(void 0===e?`JSON5: invalid end of input at ${bi}:${_i}`:`JSON5: invalid character '${Qi(e)}' at ${bi}:${_i}`)}function Xi(){return Ji(`JSON5: invalid end of input at ${bi}:${_i}`)}function zi(){return Ji(`JSON5: invalid identifier character at ${bi}:${_i-=5}`)}function Qi(e){const t={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"};if(t[e])return t[e];if(e<" "){const t=e.charCodeAt(0).toString(16);return"\\x"+("00"+t).substring(t.length)}return e}function Ji(e){const t=new SyntaxError(e);return t.lineNumber=bi,t.columnNumber=_i,t}var Zi=function(e,t){Ci=String(e),yi="start",Ai=[],vi=0,bi=1,_i=0,wi=void 0,Bi=void 0,Si=void 0;do{wi=Pi(),Vi[yi]()}while("eof"!==wi.type);return"function"==typeof t?ji({"":Si},"",t):Si},es=N(br(),1),ts=(e,t,r)=>r<0?-1:e.lastIndexOf(t,r);function rs(e,t,{oneBased:r=!1}={}){if(t<0||t>=e.length&&e.length>0)throw new RangeError("Index out of bounds");const n=function(e,t){const r=ts(e,"\n",t-1),n=t-r-1;let u=0;for(let t=r;t>=0;t=ts(e,"\n",t-1))u++;return{line:u,column:n}}(e,t);return r?{line:n.line+1,column:n.column+1}:n}var ns,us=class e extends Error{constructor(t){var r;super(),L(this,"name","JSONError"),L(this,"fileName"),L(this,"codeFrame"),L(this,"rawCodeFrame"),$(this,ns),M(this,ns,t),null==(r=Error.captureStackTrace)||r.call(Error,this,e)}get message(){const{fileName:e,codeFrame:t}=this;return`${P(this,ns)}${e?` in ${e}`:""}${t?`\n\n${t}\n`:""}`}set message(e){M(this,ns,e)}};ns=new WeakMap;var is=us,ss=(e,t,r=!0)=>(0,es.codeFrameColumns)(e,{start:t},{highlightCode:r}),os=(e,t)=>{const r=t.match(/in JSON at position (?<index>\d+)(?: \(line (?<line>\d+) column (?<column>\d+)\))?$/);if(!r)return;let{index:n,line:u,column:i}=r.groups;if(u&&i)return{line:Number(u),column:Number(i)};if(n=Number(n),n===e.length){const{line:t,column:r}=rs(e,e.length-1,{oneBased:!0});return{line:t,column:r+1}}return rs(e,n,{oneBased:!0})},as=e=>e.replace(/(?<=^Unexpected token )(?<quote>')?(.)\k<quote>/,((e,t,r)=>{return`"${r}"(${n=r,`\\u{${n.codePointAt(0).toString(16)}}`})`;var n}));var cs=async function(e){gn(e)&&(e=new URL(e));try{return await s.readFile(e,"utf8")}catch(t){if("ENOENT"===t.code)return;throw new Error(`Unable to read '${e}': ${t.message}`)}};async function ls(e){const t=await cs(e);try{return function(e,t,r){let n,u;"string"==typeof t&&(r=t,t=void 0);try{return JSON.parse(e,t)}catch(e){n=e.message}e?(u=os(e,n),n=as(n)):n+=" while parsing empty string";const i=new is(n);throw i.fileName=r,u&&(i.codeFrame=ss(e,u),i.rawCodeFrame=ss(e,u,!1)),i}(t)}catch(t){throw t.message=`JSON Error in ${e}:\n${t.message}`,t}}async function Ds(e){return(await r("./node_modules/json-schema-to-typescript/node_modules/prettier lazy recursive")((0,n.pathToFileURL)(e).href)).default}async function hs(e){const{prettier:t}=await ls(e);return t}async function ps(e){const{prettier:t}=await ds(e);return t}async function ds(e){const t=await cs(e);try{return Ii(t)}catch(t){throw t.message=`YAML Error in ${e}:\n${t.message}`,t}}var fs={async".toml"(e){const t=await cs(e);try{return await(0,Vn.default)(t)}catch(t){throw t.message=`TOML Error in ${e}:\n${t.message}`,t}},async".json5"(e){const t=await cs(e);try{return Zi(t)}catch(t){throw t.message=`JSON5 Error in ${e}:\n${t.message}`,t}},".json":ls,".js":Ds,".mjs":Ds,".cjs":Ds,".yaml":ds,".yml":ds,"":ds},ms=["package.json","package.yaml",".prettierrc",".prettierrc.json",".prettierrc.yaml",".prettierrc.yml",".prettierrc.json5",".prettierrc.js",".prettierrc.mjs",".prettierrc.cjs","prettier.config.js","prettier.config.mjs","prettier.config.cjs",".prettierrc.toml"];async function Fs({name:e,path:t}){if(!await Wn(t))return!1;if("package.json"===e)try{return Boolean(await hs(t))}catch{return!1}if("package.yaml"===e)try{return Boolean(await ps(t))}catch{return!1}return!0}var Es=function(e){return new In({names:ms,filter:Fs,stopDirectory:e})},gs={}.hasOwnProperty,Cs=/^([A-Z][a-z\d]*)+$/,ys=new Set(["string","function","number","object","Function","Object","boolean","bigint","symbol"]),As={};function vs(e,t="and"){return e.length<3?e.join(` ${t} `):`${e.slice(0,-1).join(", ")}, ${t} ${e[e.length-1]}`}var bs,_s=new Map;function ws(e,t,r){return _s.set(e,t),function(e,t){return r;function r(...r){const n=Error.stackTraceLimit;Bs()&&(Error.stackTraceLimit=0);const u=new e;Bs()&&(Error.stackTraceLimit=n);const i=function(e,t,r){const n=_s.get(e);if(Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(void 0!==n,"expected `message` to be found"),"function"==typeof n)return Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(n.length<=t.length,`Code: ${e}; The provided arguments length (${t.length}) does not match the required ones (${n.length}).`),Reflect.apply(n,r,t);const u=/%[dfijoOs]/g;let i=0;for(;null!==u.exec(n);)i++;return Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(i===t.length,`Code: ${e}; The provided arguments length (${t.length}) does not match the required ones (${i}).`),0===t.length?n:(t.unshift(n),Reflect.apply(a.format,null,t))}(t,r,u);return Object.defineProperties(u,{message:{value:i,enumerable:!1,writable:!0,configurable:!0},toString:{value(){return`${this.name} [${t}]: ${this.message}`},enumerable:!1,writable:!0,configurable:!0}}),Ss(u),u.code=t,u}}(r,e)}function Bs(){try{if(Object(function(){var e=new Error("Cannot find module 'v8'");throw e.code="MODULE_NOT_FOUND",e}()).isBuildingSnapshot())return!1}catch{}const e=Object.getOwnPropertyDescriptor(Error,"stackTraceLimit");return void 0===e?Object.isExtensible(Error):gs.call(e,"writable")&&void 0!==e.writable?e.writable:void 0!==e.set}As.ERR_INVALID_ARG_TYPE=ws("ERR_INVALID_ARG_TYPE",((e,t,r)=>{Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())("string"==typeof e,"'name' must be a string"),Array.isArray(t)||(t=[t]);let n="The ";if(e.endsWith(" argument"))n+=`${e} `;else{const t=e.includes(".")?"property":"argument";n+=`"${e}" ${t} `}n+="must be ";const u=[],i=[],s=[];for(const e of t)Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())("string"==typeof e,"All expected entries have to be of type string"),ys.has(e)?u.push(e.toLowerCase()):null===Cs.exec(e)?(Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())("object"!==e,'The value "object" should be written as "Object"'),s.push(e)):i.push(e);if(i.length>0){const e=u.indexOf("object");-1!==e&&(u.slice(e,1),i.push("Object"))}return u.length>0&&(n+=`${u.length>1?"one of type":"of type"} ${vs(u,"or")}`,(i.length>0||s.length>0)&&(n+=" or ")),i.length>0&&(n+=`an instance of ${vs(i,"or")}`,s.length>0&&(n+=" or ")),s.length>0&&(s.length>1?n+=`one of ${vs(s,"or")}`:(s[0].toLowerCase()!==s[0]&&(n+="an "),n+=`${s[0]}`)),n+=`. Received ${function(e){if(null==e)return String(e);if("function"==typeof e&&e.name)return`function ${e.name}`;if("object"==typeof e)return e.constructor&&e.constructor.name?`an instance of ${e.constructor.name}`:`${(0,a.inspect)(e,{depth:-1})}`;let t=(0,a.inspect)(e,{colors:!1});t.length>28&&(t=`${t.slice(0,25)}...`);return`type ${typeof e} (${t})`}(r)}`,n}),TypeError),As.ERR_INVALID_MODULE_SPECIFIER=ws("ERR_INVALID_MODULE_SPECIFIER",((e,t,r=void 0)=>`Invalid module "${e}" ${t}${r?` imported from ${r}`:""}`),TypeError),As.ERR_INVALID_PACKAGE_CONFIG=ws("ERR_INVALID_PACKAGE_CONFIG",((e,t,r)=>`Invalid package config ${e}${t?` while importing ${t}`:""}${r?`. ${r}`:""}`),Error),As.ERR_INVALID_PACKAGE_TARGET=ws("ERR_INVALID_PACKAGE_TARGET",((e,t,r,n=!1,u=void 0)=>{const i="string"==typeof r&&!n&&r.length>0&&!r.startsWith("./");return"."===t?(Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(!1===n),`Invalid "exports" main target ${JSON.stringify(r)} defined in the package config ${e}package.json${u?` imported from ${u}`:""}${i?'; targets must start with "./"':""}`):`Invalid "${n?"imports":"exports"}" target ${JSON.stringify(r)} defined for '${t}' in the package config ${e}package.json${u?` imported from ${u}`:""}${i?'; targets must start with "./"':""}`}),Error),As.ERR_MODULE_NOT_FOUND=ws("ERR_MODULE_NOT_FOUND",((e,t,r=!1)=>`Cannot find ${r?"module":"package"} '${e}' imported from ${t}`),Error),As.ERR_NETWORK_IMPORT_DISALLOWED=ws("ERR_NETWORK_IMPORT_DISALLOWED","import of '%s' by %s is not supported: %s",Error),As.ERR_PACKAGE_IMPORT_NOT_DEFINED=ws("ERR_PACKAGE_IMPORT_NOT_DEFINED",((e,t,r)=>`Package import specifier "${e}" is not defined${t?` in package ${t}package.json`:""} imported from ${r}`),TypeError),As.ERR_PACKAGE_PATH_NOT_EXPORTED=ws("ERR_PACKAGE_PATH_NOT_EXPORTED",((e,t,r=void 0)=>"."===t?`No "exports" main defined in ${e}package.json${r?` imported from ${r}`:""}`:`Package subpath '${t}' is not defined by "exports" in ${e}package.json${r?` imported from ${r}`:""}`),Error),As.ERR_UNSUPPORTED_DIR_IMPORT=ws("ERR_UNSUPPORTED_DIR_IMPORT","Directory import '%s' is not supported resolving ES modules imported from %s",Error),As.ERR_UNSUPPORTED_RESOLVE_REQUEST=ws("ERR_UNSUPPORTED_RESOLVE_REQUEST",'Failed to resolve module specifier "%s" from "%s": Invalid relative URL or base scheme is not hierarchical.',TypeError),As.ERR_UNKNOWN_FILE_EXTENSION=ws("ERR_UNKNOWN_FILE_EXTENSION",((e,t)=>`Unknown file extension "${e}" for ${t}`),TypeError),As.ERR_INVALID_ARG_VALUE=ws("ERR_INVALID_ARG_VALUE",((e,t,r="is invalid")=>{let n=(0,a.inspect)(t);n.length>128&&(n=`${n.slice(0,128)}...`);return`The ${e.includes(".")?"property":"argument"} '${e}' ${r}. Received ${n}`}),TypeError);var Ss=function(e){const t="__node_internal_"+e.name;return Object.defineProperty(e,"name",{value:t}),e}((function(e){const t=Bs();return t&&(bs=Error.stackTraceLimit,Error.stackTraceLimit=Number.POSITIVE_INFINITY),Error.captureStackTrace(e),t&&(Error.stackTraceLimit=bs),e}));var xs={}.hasOwnProperty,{ERR_INVALID_PACKAGE_CONFIG:Os}=As,Rs=new Map;function Ts(e,{base:t,specifier:r}){const i=Rs.get(e);if(i)return i;let s;try{s=o.readFileSync(u.toNamespacedPath(e),"utf8")}catch(e){const t=e;if("ENOENT"!==t.code)throw t}const a={exists:!1,pjsonPath:e,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};if(void 0!==s){let u;try{u=JSON.parse(s)}catch(u){const i=u,s=new Os(e,(t?`"${r}" from `:"")+(0,n.fileURLToPath)(t||r),i.message);throw s.cause=i,s}a.exists=!0,xs.call(u,"name")&&"string"==typeof u.name&&(a.name=u.name),xs.call(u,"main")&&"string"==typeof u.main&&(a.main=u.main),xs.call(u,"exports")&&(a.exports=u.exports),xs.call(u,"imports")&&(a.imports=u.imports),!xs.call(u,"type")||"commonjs"!==u.type&&"module"!==u.type||(a.type=u.type)}return Rs.set(e,a),a}function ks(e){let t=new URL("package.json",e);for(;;){if(t.pathname.endsWith("node_modules/package.json"))break;const r=Ts((0,n.fileURLToPath)(t),{specifier:e});if(r.exists)return r;const u=t;if(t=new URL("../package.json",t),t.pathname===u.pathname)break}return{pjsonPath:(0,n.fileURLToPath)(t),exists:!1,type:"none"}}function Is(e){return ks(e).type}var{ERR_UNKNOWN_FILE_EXTENSION:Ns}=As,Ls={}.hasOwnProperty,js={__proto__:null,".cjs":"commonjs",".js":"module",".json":"json",".mjs":"module"};var Ps={__proto__:null,"data:":function(e){const{1:t}=/^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(e.pathname)||[null,null,null];return function(e){return e&&/\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(e)?"module":"application/json"===e?"json":null}(t)},"file:":function(e,t,r){const u=function(e){const t=e.pathname;let r=t.length;for(;r--;){const e=t.codePointAt(r);if(47===e)return"";if(46===e)return 47===t.codePointAt(r-1)?"":t.slice(r)}return""}(e);if(".js"===u){const t=Is(e);return"none"!==t?t:"commonjs"}if(""===u){const t=Is(e);return"none"===t||"commonjs"===t?"commonjs":"module"}const i=js[u];if(i)return i;if(r)return;const s=(0,n.fileURLToPath)(e);throw new Ns(u,s)},"http:":$s,"https:":$s,"node:":()=>"builtin"};function $s(){}function Ms(e,t){const r=e.protocol;return Ls.call(Ps,r)&&Ps[r](e,t,!0)||null}var{ERR_INVALID_ARG_VALUE:Us}=As,Hs=Object.freeze(["node","import"]),Gs=new Set(Hs);function Ws(e){if(void 0!==e&&e!==Hs){if(!Array.isArray(e))throw new Us("conditions",e,"expected an array");return new Set(e)}return Gs}var Vs=RegExp.prototype[Symbol.replace],{ERR_NETWORK_IMPORT_DISALLOWED:Ks,ERR_INVALID_MODULE_SPECIFIER:qs,ERR_INVALID_PACKAGE_CONFIG:Ys,ERR_INVALID_PACKAGE_TARGET:Xs,ERR_MODULE_NOT_FOUND:zs,ERR_PACKAGE_IMPORT_NOT_DEFINED:Qs,ERR_PACKAGE_PATH_NOT_EXPORTED:Js,ERR_UNSUPPORTED_DIR_IMPORT:Zs,ERR_UNSUPPORTED_RESOLVE_REQUEST:eo}=As,to={}.hasOwnProperty,ro=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i,no=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,uo=/^\.|%|\\/,io=/\*/g,so=/%2f|%5c/i,oo=new Set,ao=/[/\\]{2}/;function co(e,t,r,u,s,o,a){if(i.noDeprecation)return;const c=(0,n.fileURLToPath)(u),l=null!==ao.exec(a?e:t);i.emitWarning(`Use of deprecated ${l?"double slash":"leading or trailing slash matching"} resolving "${e}" for module request "${t}" ${t===r?"":`matched to "${r}" `}in the "${s?"imports":"exports"}" field module resolution of the package at ${c}${o?` imported from ${(0,n.fileURLToPath)(o)}`:""}.`,"DeprecationWarning","DEP0166")}function lo(e,t,r,s){if(i.noDeprecation)return;if("module"!==Ms(e,{parentURL:r.href}))return;const o=(0,n.fileURLToPath)(e.href),a=(0,n.fileURLToPath)(new n.URL(".",t)),c=(0,n.fileURLToPath)(r);s?u.resolve(a,s)!==o&&i.emitWarning(`Package ${a} has a "main" field set to "${s}", excluding the full filename and extension to the resolved file at "${o.slice(a.length)}", imported from ${c}.\n Automatic extension resolution of the "main" field is deprecated for ES modules.`,"DeprecationWarning","DEP0151"):i.emitWarning(`No "main" or "exports" field defined in the package.json for ${a} resolving the main entry point "${o.slice(a.length)}", imported from ${c}.\nDefault "index" lookups for the main are deprecated for ES modules.`,"DeprecationWarning","DEP0151")}function Do(e){try{return(0,o.statSync)(e)}catch{}}function ho(e){const t=(0,o.statSync)(e,{throwIfNoEntry:!1}),r=t?t.isFile():void 0;return null!=r&&r}function po(e,t,r){let u;if(void 0!==t.main){if(u=new n.URL(t.main,e),ho(u))return u;const i=[`./${t.main}.js`,`./${t.main}.json`,`./${t.main}.node`,`./${t.main}/index.js`,`./${t.main}/index.json`,`./${t.main}/index.node`];let s=-1;for(;++s<i.length&&(u=new n.URL(i[s],e),!ho(u));)u=void 0;if(u)return lo(u,e,r,t.main),u}const i=["./index.js","./index.json","./index.node"];let s=-1;for(;++s<i.length&&(u=new n.URL(i[s],e),!ho(u));)u=void 0;if(u)return lo(u,e,r,t.main),u;throw new zs((0,n.fileURLToPath)(new n.URL(".",e)),(0,n.fileURLToPath)(r))}function fo(e,t,r){return new Js((0,n.fileURLToPath)(new n.URL(".",t)),e,r&&(0,n.fileURLToPath)(r))}function mo(e,t,r,u,i){return t="object"==typeof t&&null!==t?JSON.stringify(t,null,""):`${t}`,new Xs((0,n.fileURLToPath)(new n.URL(".",r)),e,t,u,i&&(0,n.fileURLToPath)(i))}function Fo(e,t,r,u,i,s,o,a,c){if(""!==t&&!s&&"/"!==e[e.length-1])throw mo(r,e,u,o,i);if(!e.startsWith("./")){if(o&&!e.startsWith("../")&&!e.startsWith("/")){let r=!1;try{new n.URL(e),r=!0}catch{}if(!r){return bo(s?Vs.call(io,e,(()=>t)):e+t,u,c)}}throw mo(r,e,u,o,i)}if(null!==ro.exec(e.slice(2))){if(null!==no.exec(e.slice(2)))throw mo(r,e,u,o,i);if(!a){const n=s?r.replace("*",(()=>t)):r+t;co(s?Vs.call(io,e,(()=>t)):e,n,r,u,o,i,!0)}}const l=new n.URL(e,u),D=l.pathname,h=new n.URL(".",u).pathname;if(!D.startsWith(h))throw mo(r,e,u,o,i);if(""===t)return l;if(null!==ro.exec(t)){const c=s?r.replace("*",(()=>t)):r+t;if(null===no.exec(t)){if(!a){co(s?Vs.call(io,e,(()=>t)):e,c,r,u,o,i,!1)}}else!function(e,t,r,u,i){const s=`request is not a valid match in pattern "${t}" for the "${u?"imports":"exports"}" resolution of ${(0,n.fileURLToPath)(r)}`;throw new qs(e,s,i&&(0,n.fileURLToPath)(i))}(c,r,u,o,i)}return s?new n.URL(Vs.call(io,l.href,(()=>t))):new n.URL(t,l)}function Eo(e){const t=Number(e);return`${t}`===e&&(t>=0&&t<4294967295)}function go(e,t,r,u,i,s,o,a,c){if("string"==typeof t)return Fo(t,r,u,e,i,s,o,a,c);if(Array.isArray(t)){const n=t;if(0===n.length)return null;let l,D=-1;for(;++D<n.length;){const t=n[D];let h;try{h=go(e,t,r,u,i,s,o,a,c)}catch(e){if(l=e,"ERR_INVALID_PACKAGE_TARGET"===e.code)continue;throw e}if(void 0!==h){if(null!==h)return h;l=null}}if(null==l)return null;throw l}if("object"==typeof t&&null!==t){const l=Object.getOwnPropertyNames(t);let D=-1;for(;++D<l.length;){if(Eo(l[D]))throw new Ys((0,n.fileURLToPath)(e),i,'"exports" cannot contain numeric property keys.')}for(D=-1;++D<l.length;){const n=l[D];if("default"===n||c&&c.has(n)){const l=go(e,t[n],r,u,i,s,o,a,c);if(void 0===l)continue;return l}}return null}if(null===t)return null;throw mo(u,t,e,o,i)}function Co(e,t,r){if(i.noDeprecation)return;const u=(0,n.fileURLToPath)(t);oo.has(u+"|"+e)||(oo.add(u+"|"+e),i.emitWarning(`Use of deprecated trailing slash pattern mapping "${e}" in the "exports" field module resolution of the package at ${u}${r?` imported from ${(0,n.fileURLToPath)(r)}`:""}. Mapping specifiers ending in "/" is no longer supported.`,"DeprecationWarning","DEP0155"))}function yo(e,t,r,u,i){let s=r.exports;if(function(e,t,r){if("string"==typeof e||Array.isArray(e))return!0;if("object"!=typeof e||null===e)return!1;const u=Object.getOwnPropertyNames(e);let i=!1,s=0,o=-1;for(;++o<u.length;){const e=u[o],a=""===e||"."!==e[0];if(0==s++)i=a;else if(i!==a)throw new Ys((0,n.fileURLToPath)(t),r,"\"exports\" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.")}return i}(s,e,u)&&(s={".":s}),to.call(s,t)&&!t.includes("*")&&!t.endsWith("/")){const r=go(e,s[t],"",t,u,!1,!1,!1,i);if(null==r)throw fo(t,e,u);return r}let o="",a="";const c=Object.getOwnPropertyNames(s);let l=-1;for(;++l<c.length;){const r=c[l],n=r.indexOf("*");if(-1!==n&&t.startsWith(r.slice(0,n))){t.endsWith("/")&&Co(t,e,u);const i=r.slice(n+1);t.length>=r.length&&t.endsWith(i)&&1===Ao(o,r)&&r.lastIndexOf("*")===n&&(o=r,a=t.slice(n,t.length-i.length))}}if(o){const r=go(e,s[o],a,o,u,!0,!1,t.endsWith("/"),i);if(null==r)throw fo(t,e,u);return r}throw fo(t,e,u)}function Ao(e,t){const r=e.indexOf("*"),n=t.indexOf("*"),u=-1===r?e.length:r+1,i=-1===n?t.length:n+1;return u>i?-1:i>u||-1===r?1:-1===n||e.length>t.length?-1:t.length>e.length?1:0}function vo(e,t,r){if("#"===e||e.startsWith("#/")||e.endsWith("/")){throw new qs(e,"is not a valid internal imports specifier name",(0,n.fileURLToPath)(t))}let u;const i=ks(t);if(i.exists){u=(0,n.pathToFileURL)(i.pjsonPath);const s=i.imports;if(s)if(to.call(s,e)&&!e.includes("*")){const n=go(u,s[e],"",e,t,!1,!0,!1,r);if(null!=n)return n}else{let n="",i="";const o=Object.getOwnPropertyNames(s);let a=-1;for(;++a<o.length;){const t=o[a],r=t.indexOf("*");if(-1!==r&&e.startsWith(t.slice(0,-1))){const u=t.slice(r+1);e.length>=t.length&&e.endsWith(u)&&1===Ao(n,t)&&t.lastIndexOf("*")===r&&(n=t,i=e.slice(r,e.length-u.length))}}if(n){const e=go(u,s[n],i,n,t,!0,!0,!1,r);if(null!=e)return e}}}throw function(e,t,r){return new Qs(e,t&&(0,n.fileURLToPath)(new n.URL(".",t)),(0,n.fileURLToPath)(r))}(e,u,t)}function bo(e,t,r){if(Object(function(){var e=new Error("Cannot find module 'module'");throw e.code="MODULE_NOT_FOUND",e}()).includes(e))return new n.URL("node:"+e);const{packageName:u,packageSubpath:i,isScoped:s}=function(e,t){let r=e.indexOf("/"),u=!0,i=!1;"@"===e[0]&&(i=!0,-1===r||0===e.length?u=!1:r=e.indexOf("/",r+1));const s=-1===r?e:e.slice(0,r);if(null!==uo.exec(s)&&(u=!1),!u)throw new qs(e,"is not a valid package name",(0,n.fileURLToPath)(t));return{packageName:s,packageSubpath:"."+(-1===r?"":e.slice(r)),isScoped:i}}(e,t),o=ks(t);if(o.exists){const e=(0,n.pathToFileURL)(o.pjsonPath);if(o.name===u&&void 0!==o.exports&&null!==o.exports)return yo(e,i,o,t,r)}let a,c=new n.URL("./node_modules/"+u+"/package.json",t),l=(0,n.fileURLToPath)(c);do{const o=Do(l.slice(0,-13));if(!o||!o.isDirectory()){a=l,c=new n.URL((s?"../../../../node_modules/":"../../../node_modules/")+u+"/package.json",c),l=(0,n.fileURLToPath)(c);continue}const D=Ts(l,{base:t,specifier:e});return void 0!==D.exports&&null!==D.exports?yo(c,i,D,t,r):"."===i?po(c,D,t):new n.URL(i,c)}while(l.length!==a.length);throw new zs(u,(0,n.fileURLToPath)(t),!1)}function _o(e){return""!==e&&("/"===e[0]||function(e){if("."===e[0]){if(1===e.length||"/"===e[1])return!0;if("."===e[1]&&(2===e.length||"/"===e[2]))return!0}return!1}(e))}function wo(e,t,r,i){const s=t.protocol,a="data:"===s||"http:"===s||"https:"===s;let c;if(_o(e))try{c=new n.URL(e,t)}catch(r){const n=new eo(e,t);throw n.cause=r,n}else if("file:"===s&&"#"===e[0])c=vo(e,t,r);else try{c=new n.URL(e)}catch(n){if(a&&!Object(function(){var e=new Error("Cannot find module 'module'");throw e.code="MODULE_NOT_FOUND",e}()).includes(e)){const r=new eo(e,t);throw r.cause=n,r}c=bo(e,t,r)}return Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(void 0!==c,"expected to be defined"),"file:"!==c.protocol?c:function(e,t,r){if(null!==so.exec(e.pathname))throw new qs(e.pathname,'must not include encoded "/" or "\\" characters',(0,n.fileURLToPath)(t));let i;try{i=(0,n.fileURLToPath)(e)}catch(r){const n=r;throw Object.defineProperty(n,"input",{value:String(e)}),Object.defineProperty(n,"module",{value:String(t)}),n}const s=Do(i.endsWith("/")?i.slice(-1):i);if(s&&s.isDirectory()){const r=new Zs(i,(0,n.fileURLToPath)(t));throw r.url=String(e),r}if(!s||!s.isFile()){const r=new zs(i||e.pathname,t&&(0,n.fileURLToPath)(t),!0);throw r.url=String(e),r}if(!r){const t=(0,o.realpathSync)(i),{search:r,hash:s}=e;(e=(0,n.pathToFileURL)(t+(i.endsWith(u.sep)?"/":""))).search=r,e.hash=s}return e}(c,t,i)}function Bo(e){if(void 0!==e&&"string"!=typeof e&&!function(e){return Boolean(e&&"object"==typeof e&&"href"in e&&"string"==typeof e.href&&"protocol"in e&&"string"==typeof e.protocol&&e.href&&e.protocol)}(e))throw new As.ERR_INVALID_ARG_TYPE("parentURL",["string","URL"],e)}function So(e,t={}){const{parentURL:r}=t;let u,i,s;if(Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(void 0!==r,"expected `parentURL` to be defined"),Bo(r),r)try{u=new n.URL(r)}catch{}try{if(i=_o(e)?new n.URL(e,u):new n.URL(e),s=i.protocol,"data:"===s)return{url:i.href,format:null}}catch{}const o=function(e,t,r){if(r){const n=r.protocol;if("http:"===n||"https:"===n){if(_o(e)){const n=null==t?void 0:t.protocol;if(n&&"https:"!==n&&"http:"!==n)throw new Ks(e,r,"remote imports cannot import from a local location.");return{url:(null==t?void 0:t.href)||""}}if(Object(function(){var e=new Error("Cannot find module 'module'");throw e.code="MODULE_NOT_FOUND",e}()).includes(e))throw new Ks(e,r,"remote imports cannot import from a local location.");throw new Ks(e,r,"only relative and absolute specifiers are supported.")}}}(e,i,u);if(o)return o;if(void 0===s&&i&&(s=i.protocol),"node:"===s)return{url:e};if(i&&"node:"===i.protocol)return{url:e};const a=Ws(t.conditions),c=wo(e,new n.URL(r),a,!1);return{url:c.href,format:Ms(c,{parentURL:r})}}var xo=function(e,t){const u=function(e,t){if(!t)throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");try{return So(e,{parentURL:t}).url}catch(e){const t=e;if(("ERR_UNSUPPORTED_DIR_IMPORT"===t.code||"ERR_MODULE_NOT_FOUND"===t.code)&&"string"==typeof t.url)return t.url;throw e}}(e,(0,n.pathToFileURL)(t).href);return r("./node_modules/json-schema-to-typescript/node_modules/prettier lazy recursive")(u)};var Oo=function(e,t){return Object(function(){var e=new Error("Cannot find module 'module'");throw e.code="MODULE_NOT_FOUND",e}())(t)(e)},Ro=new Set(["MODULE_NOT_FOUND","ERR_REQUIRE_ESM","ERR_PACKAGE_PATH_NOT_EXPORTED"]);var To=async function(e,t){try{return Oo(e,t)}catch(e){if(!Ro.has(null==e?void 0:e.code))throw e}return(await xo(e,t)).default};var ko=async function(e){const{base:t,ext:r}=u.parse(e),n="package.json"===t?hs:"package.yaml"===t?ps:fs[r];if(!n)throw new Error(`No loader specified for extension "${r||"noExt"}"`);let i=await n(e);if(i){if("string"==typeof i&&(i=await To(i,e)),"object"!=typeof i)throw new TypeError(`Config is only allowed to be an object, but received ${typeof i} in "${e}"`);return delete i.$schema,i}},Io=new Map,No=new Map;function Lo(e,t={}){e=e?u.resolve(e):process.cwd();const r=function(e){if(e=e?u.resolve(e):void 0,!No.has(e)){const t=Es(e),r=t.search.bind(t);No.set(e,r)}return No.get(e)}(Gn.getPrettierConfigSearchStopDirectory());return r(e,{shouldCache:t.shouldCache})}function jo(){Io.clear(),No.clear(),Pn()}function Po(e,t){if(!e||!t.editorconfig)return;return function(e,{shouldCache:t}){return e=u.resolve(e),t&&jn.has(e)||jn.set(e,$n(e,{shouldCache:t})),jn.get(e)}(e,{shouldCache:t.useCache})}async function $o(e,t){const r=t.useCache;let n=t.config;if(!n){const t=e?u.dirname(u.resolve(e)):void 0;n=await Lo(t,{shouldCache:r})}if(!n)return;const i=await function(e,{shouldCache:t}){return e=u.resolve(e),t&&Io.has(e)||Io.set(e,ko(e)),Io.get(e)}(n,{shouldCache:r});return{config:i,configFile:n}}async function Mo(e,t){t={useCache:!0,...t};const r=yn(e),[n,i]=await Promise.all([$o(r,t),Po(r,t)]);if(!n&&!i)return null;const s={...i,...Ho(n,r)};return Array.isArray(s.plugins)&&(s.plugins=s.plugins.map((e=>"string"==typeof e&&e.startsWith(".")?u.resolve(u.dirname(n.configFile),e):e))),s}async function Uo(e){const t=e?u.dirname(u.resolve(yn(e))):void 0;return await Lo(t,{shouldCache:!1})??null}function Ho(e,t){const{config:r,configFile:n}=e||{},{overrides:i,...s}=r||{};if(t&&i){const e=u.relative(u.dirname(n),t);for(const t of i)Go(e,t.files,t.excludeFiles)&&Object.assign(s,t.options)}return s}function Go(e,t,r){const n=Array.isArray(t)?t:[t],[u,i]=An(n,(e=>e.includes("/")));return En.default.isMatch(e,i,{ignore:r,basename:!0,dot:!0})||En.default.isMatch(e,u,{ignore:r,basename:!1,dot:!0})}var Wo=(e,t,r,n)=>{if(!e||null!=t)return t.replaceAll?t.replaceAll(r,n):r.global?t.replace(r,n):t.split(r).join(n)},Vo=N(_r(),1).default.default,Ko="\\"===u.sep?e=>Wo(!1,e,"\\","/"):e=>e;async function qo(e,t){let r="";if(e&&(r+=await cs(e)??""),t||(r+="\nnode_modules"),!r)return;const i=Vo({allowRelativePaths:!0}).add(r);return t=>i.ignores(Ko(function(e,t){const r=yn(t),i=Cn(e)?n.fileURLToPath(e):u.resolve(e);return u.relative(r?u.dirname(r):process.cwd(),i)}(t,e)))}async function Yo(e,t){0!==e.length||t||(e=[void 0]);const r=(await Promise.all(e.map((e=>qo(e,t))))).filter(Boolean);return e=>r.some((t=>t(e)))}var Xo=N(wr(),1);var zo=function(e){let t;try{t=o.openSync(e,"r")}catch{return}try{const e=new Xo.default(t).next().toString("utf8"),r=e.match(/^#!\/(?:usr\/)?bin\/env\s+(\S+)/);if(r)return r[1];const n=e.match(/^#!\/(?:usr\/(?:local\/)?)?bin\/(\S+)/);if(n)return n[1]}finally{try{o.closeSync(t)}catch{}}},Qo=e=>String(e).split(/[/\\]/).pop();function Jo(e,t){if(!t)return;const r=Qo(t).toLowerCase();return e.find((({filenames:e})=>null==e?void 0:e.some((e=>e.toLowerCase()===r))))??e.find((({extensions:e})=>null==e?void 0:e.some((e=>r.endsWith(e)))))}var Zo=function(e,t){const r=e.plugins.flatMap((e=>e.languages??[])),n=function(e,t){if(t)return e.find((({name:e})=>e.toLowerCase()===t))??e.find((({aliases:e})=>null==e?void 0:e.includes(t)))??e.find((({extensions:e})=>null==e?void 0:e.includes(`.${t}`)))}(r,t.language)??Jo(r,t.physicalFile)??Jo(r,t.file)??function(e,t){if(!t||Qo(t).includes("."))return;const r=zo(t);return r?e.find((({interpreters:e})=>null==e?void 0:e.includes(r))):void 0}(r,t.physicalFile);return null==n?void 0:n.parsers[0]};var ea=async function(e,t){if("string"!=typeof e&&!(e instanceof URL))throw new TypeError(`expect \`file\` to be a string or URL, got \`${typeof e}\``);let{ignorePath:r,withNodeModules:n}=t;Array.isArray(r)||(r=[r]);const u=await async function(e,t){const{ignorePath:r,withNodeModules:n}=t;return(await Yo(r,n))(e)}(e,{ignorePath:r,withNodeModules:n});let i;return u||(i=await async function(e,t){let r;!1!==t.resolveConfig&&(r=await Mo(e));return(null==r?void 0:r.parser)??Zo(t,{physicalFile:e})}(e,t)),{ignored:u,inferredParser:i??null}},ta=N(Br(),1);function ra(e){switch(e){case"cr":return"\r";case"crlf":return"\r\n";default:return"\n"}}function na(e,t){let r;switch(t){case"\n":r=/\n/g;break;case"\r":r=/\r/g;break;case"\r\n":r=/\r\n/g;break;default:throw new Error(`Unexpected "eol" ${JSON.stringify(t)}.`)}const n=e.match(r);return n?n.length:0}var ua="string",ia="array",sa="cursor",oa="indent",aa="align",ca="trim",la="group",Da="fill",ha="if-break",pa="indent-if-break",da="line-suffix",fa="line-suffix-boundary",ma="line",Fa="label",Ea="break-parent",ga=new Set([sa,oa,aa,ca,la,Da,ha,pa,da,fa,ma,Fa,Ea]);var Ca=function(e){if("string"==typeof e)return ua;if(Array.isArray(e))return ia;if(!e)return;const{type:t}=e;return ga.has(t)?t:void 0};function ya(e){const t=null===e?"null":typeof e;if("string"!==t&&"object"!==t)return`Unexpected doc '${t}', \nExpected it to be 'string' or 'object'.`;if(Ca(e))throw new Error("doc is valid.");const r=Object.prototype.toString.call(e);if("[object Object]"!==r)return`Unexpected doc '${r}'.`;const n=(u=[...ga].map((e=>`'${e}'`)),new Intl.ListFormat("en-US",{type:"disjunction"}).format(u));var u;return`Unexpected doc.type '${e.type}'.\nExpected it to be ${n}.`}var Aa=class extends Error{name="InvalidDocError";constructor(e){super(ya(e)),this.doc=e}},va={};var ba=function(e,t,r,n){const u=[e];for(;u.length>0;){const e=u.pop();if(e===va){r(u.pop());continue}r&&u.push(e,va);const i=Ca(e);if(!i)throw new Aa(e);if(!1!==(null==t?void 0:t(e)))switch(i){case ia:case Da:{const t=i===ia?e:e.parts;for(let e=t.length-1;e>=0;--e)u.push(t[e]);break}case ha:u.push(e.flatContents,e.breakContents);break;case la:if(n&&e.expandedStates)for(let t=e.expandedStates.length-1;t>=0;--t)u.push(e.expandedStates[t]);else u.push(e.contents);break;case aa:case oa:case pa:case Fa:case da:u.push(e.contents);break;case ua:case sa:case ca:case fa:case ma:case Ea:break;default:throw new Aa(e)}}},_a=()=>{},wa=_a,Ba=_a;function Sa(e){return wa(e),{type:oa,contents:e}}function xa(e,t){return wa(t),{type:aa,contents:t,n:e}}function Oa(e){return Ba(e),{type:Da,parts:e}}function Ra(e){return wa(e),{type:da,contents:e}}var Ta={type:Ea},ka={type:ma,hard:!0},Ia={type:ma},Na=[ka,Ta],La={type:sa};function ja(e){var t;if(!e)return"";if(Array.isArray(e)){const t=[];for(const r of e)if(Array.isArray(r))t.push(...ja(r));else{const e=ja(r);""!==e&&t.push(e)}return t}return e.type===ha?{...e,breakContents:ja(e.breakContents),flatContents:ja(e.flatContents)}:e.type===la?{...e,contents:ja(e.contents),expandedStates:null==(t=e.expandedStates)?void 0:t.map(ja)}:e.type===Da?{type:"fill",parts:e.parts.map(ja)}:e.contents?{...e,contents:ja(e.contents)}:e}var Pa=(e,t,r)=>{if(!e||null!=t)return Array.isArray(t)||"string"==typeof t?t[r<0?t.length+r:r]:t.at(r)};var $a=e=>{return!(12288===(t=e)||t>=65281&&t<=65376||t>=65504&&t<=65510||function(e){return e>=4352&&e<=4447||8986===e||8987===e||9001===e||9002===e||e>=9193&&e<=9196||9200===e||9203===e||9725===e||9726===e||9748===e||9749===e||e>=9800&&e<=9811||9855===e||9875===e||9889===e||9898===e||9899===e||9917===e||9918===e||9924===e||9925===e||9934===e||9940===e||9962===e||9970===e||9971===e||9973===e||9978===e||9981===e||9989===e||9994===e||9995===e||10024===e||10060===e||10062===e||e>=10067&&e<=10069||10071===e||e>=10133&&e<=10135||10160===e||10175===e||11035===e||11036===e||11088===e||11093===e||e>=11904&&e<=11929||e>=11931&&e<=12019||e>=12032&&e<=12245||e>=12272&&e<=12287||e>=12289&&e<=12350||e>=12353&&e<=12438||e>=12441&&e<=12543||e>=12549&&e<=12591||e>=12593&&e<=12686||e>=12688&&e<=12771||e>=12783&&e<=12830||e>=12832&&e<=12871||e>=12880&&e<=19903||e>=19968&&e<=42124||e>=42128&&e<=42182||e>=43360&&e<=43388||e>=44032&&e<=55203||e>=63744&&e<=64255||e>=65040&&e<=65049||e>=65072&&e<=65106||e>=65108&&e<=65126||e>=65128&&e<=65131||e>=94176&&e<=94180||94192===e||94193===e||e>=94208&&e<=100343||e>=100352&&e<=101589||e>=101632&&e<=101640||e>=110576&&e<=110579||e>=110581&&e<=110587||110589===e||110590===e||e>=110592&&e<=110882||110898===e||e>=110928&&e<=110930||110933===e||e>=110948&&e<=110951||e>=110960&&e<=111355||126980===e||127183===e||127374===e||e>=127377&&e<=127386||e>=127488&&e<=127490||e>=127504&&e<=127547||e>=127552&&e<=127560||127568===e||127569===e||e>=127584&&e<=127589||e>=127744&&e<=127776||e>=127789&&e<=127797||e>=127799&&e<=127868||e>=127870&&e<=127891||e>=127904&&e<=127946||e>=127951&&e<=127955||e>=127968&&e<=127984||127988===e||e>=127992&&e<=128062||128064===e||e>=128066&&e<=128252||e>=128255&&e<=128317||e>=128331&&e<=128334||e>=128336&&e<=128359||128378===e||128405===e||128406===e||128420===e||e>=128507&&e<=128591||e>=128640&&e<=128709||128716===e||e>=128720&&e<=128722||e>=128725&&e<=128727||e>=128732&&e<=128735||128747===e||128748===e||e>=128756&&e<=128764||e>=128992&&e<=129003||129008===e||e>=129292&&e<=129338||e>=129340&&e<=129349||e>=129351&&e<=129535||e>=129648&&e<=129660||e>=129664&&e<=129672||e>=129680&&e<=129725||e>=129727&&e<=129733||e>=129742&&e<=129755||e>=129760&&e<=129768||e>=129776&&e<=129784||e>=131072&&e<=196605||e>=196608&&e<=262141}(e));var t},Ma=/[^\x20-\x7F]/;var Ua=function(e){if(!e)return 0;if(!Ma.test(e))return e.length;e=e.replace(/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g,"  ");let t=0;for(const r of e){const e=r.codePointAt(0);e<=31||e>=127&&e<=159||(e>=768&&e<=879||(t+=$a(e)?1:2))}return t};function Ha(e,t){if("string"==typeof e)return t(e);const r=new Map;return n(e);function n(e){if(r.has(e))return r.get(e);const u=function(e){switch(Ca(e)){case ia:return t(e.map(n));case Da:return t({...e,parts:e.parts.map(n)});case ha:return t({...e,breakContents:n(e.breakContents),flatContents:n(e.flatContents)});case la:{let{expandedStates:r,contents:u}=e;return r?(r=r.map(n),u=r[0]):u=n(u),t({...e,contents:u,expandedStates:r})}case aa:case oa:case pa:case Fa:case da:return t({...e,contents:n(e.contents)});case ua:case sa:case ca:case fa:case ma:case Ea:return t(e);default:throw new Aa(e)}}(e);return r.set(e,u),u}}function Ga(e){if(e.length>0){const t=Pa(!1,e,-1);t.expandedStates||t.break||(t.break="propagated")}return null}function Wa(e){for(e=[...e];e.length>=2&&Pa(!1,e,-2).type===ma&&Pa(!1,e,-1).type===Ea;)e.length-=2;if(e.length>0){const t=Va(Pa(!1,e,-1));e[e.length-1]=t}return e}function Va(e){switch(Ca(e)){case oa:case pa:case la:case da:case Fa:{const t=Va(e.contents);return{...e,contents:t}}case ha:return{...e,breakContents:Va(e.breakContents),flatContents:Va(e.flatContents)};case Da:return{...e,parts:Wa(e.parts)};case ia:return Wa(e);case ua:return e.replace(/[\n\r]*$/,"");case aa:case sa:case ca:case fa:case ma:case Ea:break;default:throw new Aa(e)}return e}function Ka(e){return Va(function(e){return Ha(e,(e=>function(e){switch(Ca(e)){case Da:if(e.parts.every((e=>""===e)))return"";break;case la:if(!(e.contents||e.id||e.break||e.expandedStates))return"";if(e.contents.type===la&&e.contents.id===e.id&&e.contents.break===e.break&&e.contents.expandedStates===e.expandedStates)return e.contents;break;case aa:case oa:case pa:case da:if(!e.contents)return"";break;case ha:if(!e.flatContents&&!e.breakContents)return"";break;case ia:{const t=[];for(const r of e){if(!r)continue;const[e,...n]=Array.isArray(r)?r:[r];"string"==typeof e&&"string"==typeof Pa(!1,t,-1)?t[t.length-1]+=e:t.push(e),t.push(...n)}return 0===t.length?"":1===t.length?t[0]:t}case ua:case sa:case ca:case fa:case ma:case Fa:case Ea:break;default:throw new Aa(e)}return e}(e)))}(e))}function qa(e,t){return e.type===Fa?{...e,contents:t(e.contents)}:t(e)}var Ya=Symbol("MODE_BREAK"),Xa=Symbol("MODE_FLAT"),za=Symbol("cursor");function Qa(e,t){return Za(e,{type:"indent"},t)}function Ja(e,t,r){if(t===Number.NEGATIVE_INFINITY)return e.root||{value:"",length:0,queue:[]};if(t<0)return Za(e,{type:"dedent"},r);if(!t)return e;if("root"===t.type)return{...e,root:e};return Za(e,{type:"string"==typeof t?"stringAlign":"numberAlign",n:t},r)}function Za(e,t,r){const n="dedent"===t.type?e.queue.slice(0,-1):[...e.queue,t];let u="",i=0,s=0,o=0;for(const e of n)switch(e.type){case"indent":l(),r.useTabs?a(1):c(r.tabWidth);break;case"stringAlign":l(),u+=e.n,i+=e.n.length;break;case"numberAlign":s+=1,o+=e.n;break;default:throw new Error(`Unexpected type '${e.type}'`)}return D(),{...e,value:u,length:i,queue:n};function a(e){u+="\t".repeat(e),i+=r.tabWidth*e}function c(e){u+=" ".repeat(e),i+=e}function l(){r.useTabs?function(){s>0&&a(s);h()}():D()}function D(){o>0&&c(o),h()}function h(){s=0,o=0}}function ec(e){let t=0,r=0,n=e.length;e:for(;n--;){const u=e[n];if(u!==za){0;for(let r=u.length-1;r>=0;r--){const i=u[r];if(" "!==i&&"\t"!==i){e[n]=u.slice(0,r+1);break e}t++}}else r++}if(t>0||r>0)for(e.length=n+1;r-- >0;)e.push(za);return t}function tc(e,t,r,n,u,i){if(r===Number.POSITIVE_INFINITY)return!0;let s=t.length;const o=[e],a=[];for(;r>=0;){if(0===o.length){if(0===s)return!0;o.push(t[--s]);continue}const{mode:e,doc:c}=o.pop(),l=Ca(c);switch(l){case ua:a.push(c),r-=Ua(c);break;case ia:case Da:{const t=l===ia?c:c.parts;for(let r=t.length-1;r>=0;r--)o.push({mode:e,doc:t[r]});break}case oa:case aa:case pa:case Fa:o.push({mode:e,doc:c.contents});break;case ca:r+=ec(a);break;case la:{if(i&&c.break)return!1;const t=c.break?Ya:e,r=c.expandedStates&&t===Ya?Pa(!1,c.expandedStates,-1):c.contents;o.push({mode:t,doc:r});break}case ha:{const t=(c.groupId?u[c.groupId]||Xa:e)===Ya?c.breakContents:c.flatContents;t&&o.push({mode:e,doc:t});break}case ma:if(e===Ya||c.hard)return!0;c.soft||(a.push(" "),r--);break;case da:n=!0;break;case fa:if(n)return!1}}return!1}function rc(e,t){const r={},n=t.printWidth,u=ra(t.endOfLine);let i=0;const s=[{ind:{value:"",length:0,queue:[]},mode:Ya,doc:e}],o=[];let a=!1;const c=[];let l=0;for(!function(e){const t=new Set,r=[];ba(e,(function(e){if(e.type===Ea&&Ga(r),e.type===la){if(r.push(e),t.has(e))return!1;t.add(e)}}),(function(e){e.type===la&&r.pop().break&&Ga(r)}),!0)}(e);s.length>0;){const{ind:e,mode:D,doc:h}=s.pop();switch(Ca(h)){case ua:{const e="\n"!==u?Wo(!1,h,"\n",u):h;o.push(e),s.length>0&&(i+=Ua(e));break}case ia:for(let t=h.length-1;t>=0;t--)s.push({ind:e,mode:D,doc:h[t]});break;case sa:if(l>=2)throw new Error("There are too many 'cursor' in doc.");o.push(za),l++;break;case oa:s.push({ind:Qa(e,t),mode:D,doc:h.contents});break;case aa:s.push({ind:Ja(e,h.n,t),mode:D,doc:h.contents});break;case ca:i-=ec(o);break;case la:switch(D){case Xa:if(!a){s.push({ind:e,mode:h.break?Ya:Xa,doc:h.contents});break}case Ya:{a=!1;const t={ind:e,mode:Xa,doc:h.contents},u=n-i,o=c.length>0;if(!h.break&&tc(t,s,u,o,r))s.push(t);else if(h.expandedStates){const t=Pa(!1,h.expandedStates,-1);if(h.break){s.push({ind:e,mode:Ya,doc:t});break}for(let n=1;n<h.expandedStates.length+1;n++){if(n>=h.expandedStates.length){s.push({ind:e,mode:Ya,doc:t});break}{const t=h.expandedStates[n],i={ind:e,mode:Xa,doc:t};if(tc(i,s,u,o,r)){s.push(i);break}}}}else s.push({ind:e,mode:Ya,doc:h.contents});break}}h.id&&(r[h.id]=Pa(!1,s,-1).mode);break;case Da:{const t=n-i,{parts:u}=h;if(0===u.length)break;const[o,a]=u,l={ind:e,mode:Xa,doc:o},p={ind:e,mode:Ya,doc:o},d=tc(l,[],t,c.length>0,r,!0);if(1===u.length){d?s.push(l):s.push(p);break}const f={ind:e,mode:Xa,doc:a},m={ind:e,mode:Ya,doc:a};if(2===u.length){d?s.push(f,l):s.push(m,p);break}u.splice(0,2);const F={ind:e,mode:D,doc:Oa(u)},E=u[0];tc({ind:e,mode:Xa,doc:[o,a,E]},[],t,c.length>0,r,!0)?s.push(F,f,l):d?s.push(F,m,l):s.push(F,m,p);break}case ha:case pa:{const t=h.groupId?r[h.groupId]:D;if(t===Ya){const t=h.type===ha?h.breakContents:h.negate?h.contents:Sa(h.contents);t&&s.push({ind:e,mode:D,doc:t})}if(t===Xa){const t=h.type===ha?h.flatContents:h.negate?Sa(h.contents):h.contents;t&&s.push({ind:e,mode:D,doc:t})}break}case da:c.push({ind:e,mode:D,doc:h.contents});break;case fa:c.length>0&&s.push({ind:e,mode:D,doc:ka});break;case ma:switch(D){case Xa:if(!h.hard){h.soft||(o.push(" "),i+=1);break}a=!0;case Ya:if(c.length>0){s.push({ind:e,mode:D,doc:h},...c.reverse()),c.length=0;break}h.literal?e.root?(o.push(u,e.root.value),i=e.root.length):(o.push(u),i=0):(i-=ec(o),o.push(u+e.value),i=e.length)}break;case Fa:s.push({ind:e,mode:D,doc:h.contents});break;case Ea:break;default:throw new Aa(h)}0===s.length&&c.length>0&&(s.push(...c.reverse()),c.length=0)}const D=o.indexOf(za);if(-1!==D){const e=o.indexOf(za,D+1),t=o.slice(0,D).join(""),r=o.slice(D+1,e).join("");return{formatted:t+r+o.slice(e+1).join(""),cursorNodeStart:t.length,cursorNodeText:r}}return{formatted:o.join("")}}var nc,uc,ic,sc=function(e,t,r=0){let n=0;for(let u=r;u<e.length;++u)"\t"===e[u]?n=n+t-n%t:n++;return n};nc=new WeakSet,uc=function(e){const{stack:t}=this;for(let r=t.length-1;r>=0;r-=2)if(!Array.isArray(t[r])&&--e<0)return r;return-1},ic=function*(){const{stack:e}=this;for(let t=e.length-3;t>=0;t-=2){const r=e[t];Array.isArray(r)||(yield r)}};var oc=class{constructor(e){$(this,nc),this.stack=[e]}get key(){const{stack:e,siblings:t}=this;return Pa(!1,e,null===t?-2:-4)??null}get index(){return null===this.siblings?null:Pa(!1,this.stack,-2)}get node(){return Pa(!1,this.stack,-1)}get parent(){return this.getNode(1)}get grandparent(){return this.getNode(2)}get isInArray(){return null!==this.siblings}get siblings(){const{stack:e}=this,t=Pa(!1,e,-3);return Array.isArray(t)?t:null}get next(){const{siblings:e}=this;return null===e?null:e[this.index+1]}get previous(){const{siblings:e}=this;return null===e?null:e[this.index-1]}get isFirst(){return 0===this.index}get isLast(){const{siblings:e,index:t}=this;return null!==e&&t===e.length-1}get isRoot(){return 1===this.stack.length}get root(){return this.stack[0]}get ancestors(){return[...U(this,nc,ic).call(this)]}getName(){const{stack:e}=this,{length:t}=e;return t>1?Pa(!1,e,-2):null}getValue(){return Pa(!1,this.stack,-1)}getNode(e=0){const t=U(this,nc,uc).call(this,e);return-1===t?null:this.stack[t]}getParentNode(e=0){return this.getNode(e+1)}call(e,...t){const{stack:r}=this,{length:n}=r;let u=Pa(!1,r,-1);for(const e of t)u=u[e],r.push(e,u);try{return e(this)}finally{r.length=n}}callParent(e,t=0){const r=U(this,nc,uc).call(this,t+1),n=this.stack.splice(r+1);try{return e(this)}finally{this.stack.push(...n)}}each(e,...t){const{stack:r}=this,{length:n}=r;let u=Pa(!1,r,-1);for(const e of t)u=u[e],r.push(e,u);try{for(let t=0;t<u.length;++t)r.push(t,u[t]),e(this,t,u),r.length-=2}finally{r.length=n}}map(e,...t){const r=[];return this.each(((t,n,u)=>{r[n]=e(t,n,u)}),...t),r}match(...e){let t=this.stack.length-1,r=null,n=this.stack[t--];for(const u of e){if(void 0===n)return!1;let e=null;if("number"==typeof r&&(e=r,r=this.stack[t--],n=this.stack[t--]),u&&!u(n,r,e))return!1;r=this.stack[t--],n=this.stack[t--]}return!0}findAncestor(e){for(const t of U(this,nc,ic).call(this))if(e(t))return t}hasAncestor(e){for(const t of U(this,nc,ic).call(this))if(e(t))return!0;return!1}};var ac=function(e){return null!==e&&"object"==typeof e};function*cc(e,t){const{getVisitorKeys:r,filter:n=(()=>!0)}=t,u=e=>ac(e)&&n(e);for(const t of r(e)){const r=e[t];if(Array.isArray(r))for(const e of r)u(e)&&(yield e);else u(r)&&(yield r)}}function lc(e){return(t,r,n)=>{const u=Boolean(null==n?void 0:n.backwards);if(!1===r)return!1;const{length:i}=t;let s=r;for(;s>=0&&s<i;){const r=t.charAt(s);if(e instanceof RegExp){if(!e.test(r))return s}else if(!e.includes(r))return s;u?s--:s++}return(-1===s||s===i)&&s}}var Dc=lc(/\s/),hc=lc(" \t"),pc=lc(",; \t"),dc=lc(/[^\n\r]/);var fc=function(e,t,r){const n=Boolean(null==r?void 0:r.backwards);if(!1===t)return!1;const u=e.charAt(t);if(n){if("\r"===e.charAt(t-1)&&"\n"===u)return t-2;if("\n"===u||"\r"===u||"\u2028"===u||"\u2029"===u)return t-1}else{if("\r"===u&&"\n"===e.charAt(t+1))return t+2;if("\n"===u||"\r"===u||"\u2028"===u||"\u2029"===u)return t+1}return t};var mc=function(e,t,r={}){const n=hc(e,r.backwards?t-1:t,r);return n!==fc(e,n,r)};var Fc=function(e){return Array.isArray(e)&&e.length>0},Ec=new Set(["tokens","comments","parent","enclosingNode","precedingNode","followingNode"]),gc=e=>Object.keys(e).filter((e=>!Ec.has(e)));var Cc=function(e){return e?t=>e(t,Ec):gc};function yc(e,t){(e.comments??(e.comments=[])).push(t),t.printed=!1,t.nodeDescription=function(e){const t=e.type||e.kind||"(unknown type)";let r=String(e.name||e.id&&("object"==typeof e.id?e.id.name:e.id)||e.key&&("object"==typeof e.key?e.key.name:e.key)||e.value&&("object"==typeof e.value?"":String(e.value))||e.operator||"");return r.length>20&&(r=r.slice(0,19)+"…"),t+(r?" "+r:"")}(e)}function Ac(e,t){t.leading=!0,t.trailing=!1,yc(e,t)}function vc(e,t,r){t.leading=!1,t.trailing=!1,r&&(t.marker=r),yc(e,t)}function bc(e,t){t.leading=!1,t.trailing=!0,yc(e,t)}var _c=new WeakMap;function wc(e,t){if(_c.has(e))return _c.get(e);const{printer:{getCommentChildNodes:r,canAttachComment:n,getVisitorKeys:u},locStart:i,locEnd:s}=t;if(!n)return[];const o=((null==r?void 0:r(e,t))??[...cc(e,{getVisitorKeys:Cc(u)})]).flatMap((e=>n(e)?[e]:wc(e,t)));return o.sort(((e,t)=>i(e)-i(t)||s(e)-s(t))),_c.set(e,o),o}function Bc(e,t,r,n){const{locStart:u,locEnd:i}=r,s=u(t),o=i(t),a=wc(e,r);let c,l,D=0,h=a.length;for(;D<h;){const e=D+h>>1,n=a[e],p=u(n),d=i(n);if(p<=s&&o<=d)return Bc(n,t,r,n);if(d<=s)c=n,D=e+1;else{if(!(o<=p))throw new Error("Comment location overlaps with node location");l=n,h=e}}if("TemplateLiteral"===(null==n?void 0:n.type)){const{quasis:e}=n,u=kc(e,t,r);c&&kc(e,c,r)!==u&&(c=null),l&&kc(e,l,r)!==u&&(l=null)}return{enclosingNode:n,precedingNode:c,followingNode:l}}var Sc=()=>!1;var xc=e=>!/[\S\n\u2028\u2029]/.test(e);function Oc(e,t,r,n){const{comment:u,precedingNode:i}=r[n],{locStart:s,locEnd:o}=t;let a=s(u);if(i)for(let t=n-1;t>=0;t--){const{comment:n,precedingNode:u}=r[t];if(u!==i||!xc(e.slice(o(n),a)))break;a=s(n)}return mc(e,a,{backwards:!0})}function Rc(e,t,r,n){const{comment:u,followingNode:i}=r[n],{locStart:s,locEnd:o}=t;let a=o(u);if(i)for(let t=n+1;t<r.length;t++){const{comment:n,followingNode:u}=r[t];if(u!==i||!xc(e.slice(a,s(n))))break;a=o(n)}return mc(e,a)}function Tc(e,t){var r,n;const u=e.length;if(0===u)return;const{precedingNode:i,followingNode:s}=e[0];let o,a=t.locStart(s);for(o=u;o>0;--o){const{comment:u,precedingNode:c,followingNode:l}=e[o-1];Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(c,i),Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(l,s);const D=t.originalText.slice(t.locEnd(u),a);if(!((null==(n=(r=t.printer).isGap)?void 0:n.call(r,D,t))??/^[\s(]*$/.test(D)))break;a=t.locStart(u)}for(const[t,{comment:r}]of e.entries())t<o?bc(i,r):Ac(s,r);for(const e of[i,s])e.comments&&e.comments.length>1&&e.comments.sort(((e,r)=>t.locStart(e)-t.locStart(r)));e.length=0}function kc(e,t,r){const n=r.locStart(t)-1;for(let t=1;t<e.length;++t)if(n<r.locStart(e[t]))return t-1;return 0}var Ic=function(e,t){let r=t-1;return r=hc(e,r,{backwards:!0}),r=fc(e,r,{backwards:!0}),r=hc(e,r,{backwards:!0}),r!==fc(e,r,{backwards:!0})};function Nc(e,t){return e.node.printed=!0,t.printer.printComment(e,t)}function Lc(e,t){const r=e.node;if(!r)return{};const n=t[Symbol.for("printedComments")];if(0===(r.comments||[]).filter((e=>!n.has(e))).length)return{leading:"",trailing:""};const u=[],i=[];let s;return e.each((()=>{const r=e.node;if(null==n?void 0:n.has(r))return;const{leading:o,trailing:a}=r;o?u.push(function(e,t){var r;const n=e.node,u=[Nc(e,t)],{printer:i,originalText:s,locStart:o,locEnd:a}=t;if(null==(r=i.isBlockComment)?void 0:r.call(i,n)){const e=mc(s,a(n))?mc(s,o(n),{backwards:!0})?Na:Ia:" ";u.push(e)}else u.push(Na);const c=fc(s,hc(s,a(n)));return!1!==c&&mc(s,c)&&u.push(Na),u}(e,t)):a&&(s=function(e,t,r){var n;const u=e.node,i=Nc(e,t),{printer:s,originalText:o,locStart:a}=t,c=null==(n=s.isBlockComment)?void 0:n.call(s,u);if((null==r?void 0:r.hasLineSuffix)&&!(null==r?void 0:r.isBlock)||mc(o,a(u),{backwards:!0})){const e=Ic(o,a(u));return{doc:Ra([Na,e?Na:"",i]),isBlock:c,hasLineSuffix:!0}}return!c||(null==r?void 0:r.hasLineSuffix)?{doc:[Ra([" ",i]),Ta],isBlock:c,hasLineSuffix:!0}:{doc:[" ",i],isBlock:c,hasLineSuffix:!1}}(e,t,s),i.push(s.doc))}),"comments"),{leading:u,trailing:i}}var jc,Pc=function(e){return()=>{}},$c={cursorOffset:{category:"Special",type:"int",default:-1,range:{start:-1,end:1/0,step:1},description:"Print (to stderr) where a cursor at the given position would move to after formatting.",cliCategory:"Editor"},endOfLine:{category:"Global",type:"choice",default:"lf",description:"Which end of line characters to apply.",choices:[{value:"lf",description:"Line Feed only (\\n), common on Linux and macOS as well as inside git repos"},{value:"crlf",description:"Carriage Return + Line Feed characters (\\r\\n), common on Windows"},{value:"cr",description:"Carriage Return character only (\\r), used very rarely"},{value:"auto",description:"Maintain existing\n(mixed values within one file are normalised by looking at what's used after the first line)"}]},filepath:{category:"Special",type:"path",description:"Specify the input filepath. This will be used to do parser inference.",cliName:"stdin-filepath",cliCategory:"Other",cliDescription:"Path to the file to pretend that stdin comes from."},insertPragma:{category:"Special",type:"boolean",default:!1,description:"Insert @format pragma into file's first docblock comment.",cliCategory:"Other"},parser:{category:"Global",type:"choice",default:void 0,description:"Which parser to use.",exception:e=>"string"==typeof e||"function"==typeof e,choices:[{value:"flow",description:"Flow"},{value:"babel",description:"JavaScript"},{value:"babel-flow",description:"Flow"},{value:"babel-ts",description:"TypeScript"},{value:"typescript",description:"TypeScript"},{value:"acorn",description:"JavaScript"},{value:"espree",description:"JavaScript"},{value:"meriyah",description:"JavaScript"},{value:"css",description:"CSS"},{value:"less",description:"Less"},{value:"scss",description:"SCSS"},{value:"json",description:"JSON"},{value:"json5",description:"JSON5"},{value:"jsonc",description:"JSON with Comments"},{value:"json-stringify",description:"JSON.stringify"},{value:"graphql",description:"GraphQL"},{value:"markdown",description:"Markdown"},{value:"mdx",description:"MDX"},{value:"vue",description:"Vue"},{value:"yaml",description:"YAML"},{value:"glimmer",description:"Ember / Handlebars"},{value:"html",description:"HTML"},{value:"angular",description:"Angular"},{value:"lwc",description:"Lightning Web Components"}]},plugins:{type:"path",array:!0,default:[{value:[]}],category:"Global",description:"Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",exception:e=>"string"==typeof e||"object"==typeof e,cliName:"plugin",cliCategory:"Config"},printWidth:{category:"Global",type:"int",default:80,description:"The line length where Prettier will try wrap.",range:{start:0,end:1/0,step:1}},rangeEnd:{category:"Special",type:"int",default:1/0,range:{start:0,end:1/0,step:1},description:"Format code ending at a given character offset (exclusive).\nThe range will extend forwards to the end of the selected statement.",cliCategory:"Editor"},rangeStart:{category:"Special",type:"int",default:0,range:{start:0,end:1/0,step:1},description:"Format code starting at a given character offset.\nThe range will extend backwards to the start of the first line containing the selected statement.",cliCategory:"Editor"},requirePragma:{category:"Special",type:"boolean",default:!1,description:"Require either '@prettier' or '@format' to be present in the file's first docblock comment\nin order for it to be formatted.",cliCategory:"Other"},tabWidth:{type:"int",category:"Global",default:2,description:"Number of spaces per indentation level.",range:{start:0,end:1/0,step:1}},useTabs:{category:"Global",type:"boolean",default:!1,description:"Indent with tabs instead of spaces."},embeddedLanguageFormatting:{category:"Global",type:"choice",default:"auto",description:"Control how Prettier formats quoted code embedded in the file.",choices:[{value:"auto",description:"Format embedded code if Prettier can automatically identify it."},{value:"off",description:"Never automatically format embedded code."}]}};function Mc({plugins:e=[],showDeprecated:t=!1}={}){const r=e.flatMap((e=>e.languages??[])),n=[];for(const u of Hc(Object.assign({},...e.map((({options:e})=>e)),$c)))!t&&u.deprecated||(Array.isArray(u.choices)&&(t||(u.choices=u.choices.filter((e=>!e.deprecated))),"parser"===u.name&&(u.choices=[...u.choices,...Uc(u.choices,r,e)])),u.pluginDefaults=Object.fromEntries(e.filter((e=>{var t;return void 0!==(null==(t=e.defaultOptions)?void 0:t[u.name])})).map((e=>[e.name,e.defaultOptions[u.name]]))),n.push(u));return{languages:r,options:n}}function*Uc(e,t,r){const n=new Set(e.map((e=>e.value)));for(const e of t)if(e.parsers)for(const t of e.parsers)if(!n.has(t)){n.add(t);const u=r.find((e=>e.parsers&&Object.prototype.hasOwnProperty.call(e.parsers,t)));let i=e.name;(null==u?void 0:u.name)&&(i+=` (plugin: ${u.name})`),yield{value:t,description:i}}}function Hc(e){const t=[];for(const[r,n]of Object.entries(e)){const e={name:r,...n};Array.isArray(e.default)&&(e.default=Pa(!1,e.default,-1).value),t.push(e)}return t}function Gc(e,{isCLI:t,optionInfos:r,FlagSchema:n}){const{name:u}=e,i={name:u};let s;const o={};switch(e.type){case"int":s=on,t&&(i.preprocess=Number);break;case"string":case"path":s=an;break;case"choice":s=un,i.choices=e.choices.map((t=>(null==t?void 0:t.redirect)?{...t,redirect:{to:{key:e.name,value:t.redirect}}}:t));break;case"boolean":s=Yr;break;case"flag":s=n,i.flags=r.flatMap((e=>[e.alias,e.description&&e.name,e.oppositeDescription&&`no-${e.name}`].filter(Boolean)));break;default:throw new Error(`Unexpected type ${e.type}`)}if(e.exception?i.validate=(t,r,n)=>e.exception(t)||r.validate(t,n):i.validate=(e,t,r)=>void 0===e||t.validate(e,r),e.redirect&&(o.redirect=t=>t?{to:"string"==typeof e.redirect?e.redirect:{key:e.redirect.option,value:e.redirect.value}}:void 0),e.deprecated&&(o.deprecated=!0),t&&!e.array){const e=i.preprocess||(e=>e);i.preprocess=(t,r,n)=>r.preprocess(e(Array.isArray(t)?Pa(!1,t,-1):t),n)}return e.array?Kr.create({...t?{preprocess:e=>Array.isArray(e)?e:[e]}:{},...o,valueSchema:s.create(i)}):s.create({...i,...o})}var Wc=function(e,t,{logger:r=!1,isCLI:n=!1,passThrough:u=!1,FlagSchema:i,descriptor:s}={}){if(n){if(!i)throw new Error("'FlagSchema' option is required.");if(!s)throw new Error("'descriptor' option is required.")}else s=Rr;const o=u?Array.isArray(u)?(e,t)=>u.includes(e)?{[e]:t}:void 0:(e,t)=>({[e]:t}):(e,t,r)=>{const{_:n,...u}=r.schemas;return Mr(e,t,{...r,schemas:u})},a=function(e,{isCLI:t,FlagSchema:r}){const n=[];t&&n.push(Vr.create({name:"_"}));for(const u of e)n.push(Gc(u,{isCLI:t,optionInfos:e,FlagSchema:r})),u.alias&&t&&n.push(Wr.create({name:u.alias,sourceName:u.name}));return n}(t,{isCLI:n,FlagSchema:i}),c=new pn(a,{logger:r,unknown:o,descriptor:s}),l=!1!==r;l&&jc&&(c._hasDeprecationWarned=jc);const D=c.normalize(e);return l&&(jc=c._hasDeprecationWarned),D},Vc=(e,t,r)=>{if(!e||null!=t){if(t.findLast)return t.findLast(r);for(let e=t.length-1;e>=0;e--){const n=t[e];if(r(n,e,t))return n}}};function Kc(e,t){if(!t)throw new Error("parserName is required.");const r=Vc(!1,e,(e=>e.parsers&&Object.prototype.hasOwnProperty.call(e.parsers,t)));if(r)return r;throw new fn(`Couldn't resolve parser "${t}".`)}function qc({plugins:e,parser:t}){return Yc(Kc(e,t),t)}function Yc(e,t){const r=e.parsers[t];return"function"==typeof r?r():r}var Xc={astFormat:"estree",printer:{},originalText:void 0,locStart:null,locEnd:null};var zc=async function(e,t={}){var r;const n={...e};if(!n.parser){if(!n.filepath)throw new mn("No parser and no file path given, couldn't infer a parser.");if(n.parser=Zo(n,{physicalFile:n.filepath}),!n.parser)throw new mn(`No parser could be inferred for file "${n.filepath}".`)}const u=Mc({plugins:e.plugins,showDeprecated:!0}).options,i={...Xc,...Object.fromEntries(u.filter((e=>void 0!==e.default)).map((e=>[e.name,e.default])))},s=Kc(n.plugins,n.parser),o=await Yc(s,n.parser);n.astFormat=o.astFormat,n.locEnd=o.locEnd,n.locStart=o.locStart;const a=(null==(r=s.printers)?void 0:r[o.astFormat])?s:function(e,t){if(!t)throw new Error("astFormat is required.");const r=Vc(!1,e,(e=>e.printers&&Object.prototype.hasOwnProperty.call(e.printers,t)));if(r)return r;throw new fn(`Couldn't find plugin for AST format "${t}".`)}(n.plugins,o.astFormat),c=await function(e,t){const r=e.printers[t];return"function"==typeof r?r():r}(a,o.astFormat);n.printer=c;const l={...i,...a.defaultOptions?Object.fromEntries(Object.entries(a.defaultOptions).filter((([,e])=>void 0!==e))):{}};for(const[e,t]of Object.entries(l))null!==n[e]&&void 0!==n[e]||(n[e]=t);return"json"===n.parser&&(n.trailingComma="none"),Wc(n,u,{passThrough:Object.keys(Xc),...t})},Qc=N(br(),1);var Jc=async function(e,t){const r=await qc(t),n=r.preprocess?r.preprocess(e,t):e;let u;t.originalText=n;try{u=await r.parse(n,t,t)}catch(t){!function(e,t){const{loc:r}=e;if(r){const n=(0,Qc.codeFrameColumns)(t,r,{highlightCode:!0});throw e.message+="\n"+n,e.codeFrame=n,e}throw e}(t,e)}return{text:n,ast:u}};async function Zc(e,t,r,n,u){const{embeddedLanguageFormatting:i,printer:{embed:s,hasPrettierIgnore:o=(()=>!1),getVisitorKeys:a}}=r;if(!s||"auto"!==i)return;if(s.length>2)throw new Error("printer.embed has too many parameters. The API changed in Prettier v3. Please update your plugin. See https://prettier.io/docs/en/plugins.html#optional-embed");const c=Cc(s.getVisitorKeys??a),l=[];!function t(){const{node:n}=e;if(null===n||"object"!=typeof n||o(e))return;for(const r of c(n))Array.isArray(n[r])?e.each(t,r):e.call(t,r);const i=s(e,r);if(!i)return;if("function"==typeof i)return void l.push({print:i,node:n,pathStack:[...e.stack]});0;u.set(n,i)}();const D=e.stack;for(const{print:n,node:i,pathStack:s}of l)try{e.stack=s;const o=await n(h,t,e,r);o&&u.set(i,o)}catch(e){if(process.env.PRETTIER_DEBUG)throw e}function h(e,t){return async function(e,t,r,n){const u=await zc({...r,...t,parentParser:r.parser,originalText:e},{passThrough:!0}),{ast:i}=await Jc(e,u),s=await n(i,u);return Ka(s)}(e,t,r,n)}e.stack=D}var el=function(e,t){const{originalText:r,[Symbol.for("comments")]:n,locStart:u,locEnd:i,[Symbol.for("printedComments")]:s}=t,{node:o}=e,a=u(o),c=i(o);for(const e of n)u(e)>=a&&i(e)<=c&&s.add(e);return r.slice(a,c)};async function tl(e,t){({ast:e}=await nl(e,t));const r=new Map,n=new oc(e),u=Pc(t),i=new Map;await Zc(n,o,t,tl,i);const s=await rl(n,t,o,void 0,i);return function(e){const{[Symbol.for("comments")]:t,[Symbol.for("printedComments")]:r}=e;for(const e of t){if(!e.printed&&!r.has(e))throw new Error('Comment "'+e.value.trim()+'" was not printed. Please report this error!');delete e.printed}}(t),s;function o(e,t){return void 0===e||e===n?a(t):Array.isArray(e)?n.call((()=>a(t)),...e):n.call((()=>a(t)),e)}function a(e){u(n);const s=n.node;if(null==s)return"";const a=s&&"object"==typeof s&&void 0===e;if(a&&r.has(s))return r.get(s);const c=rl(n,t,o,e,i);return a&&r.set(s,c),c}}function rl(e,t,r,n,u){var i;const{node:s}=e,{printer:o}=t;let a;return a=(null==(i=o.hasPrettierIgnore)?void 0:i.call(o,e))?el(e,t):u.has(s)?u.get(s):o.print(e,t,r,n),s===t.cursorNode&&(a=qa(a,(e=>[La,e,La]))),!o.printComment||o.willPrintOwnComments&&o.willPrintOwnComments(e,t)||(a=function(e,t,r){const{leading:n,trailing:u}=Lc(e,r);return n||u?qa(t,(e=>[n,e,u])):t}(e,a,t)),a}async function nl(e,t){const r=e.comments??[];t[Symbol.for("comments")]=r,t[Symbol.for("tokens")]=e.tokens??[],t[Symbol.for("printedComments")]=new Set,function(e,t){const{comments:r}=e;if(delete e.comments,!Fc(r)||!t.printer.canAttachComment)return;const n=[],{locStart:u,locEnd:i,printer:{experimentalFeatures:{avoidAstMutation:s=!1}={},handleComments:o={}},originalText:a}=t,{ownLine:c=Sc,endOfLine:l=Sc,remaining:D=Sc}=o,h=r.map(((n,u)=>({...Bc(e,n,t),comment:n,text:a,options:t,ast:e,isLastComment:r.length-1===u})));for(const[e,t]of h.entries()){const{comment:r,precedingNode:o,enclosingNode:a,followingNode:p,text:d,options:f,ast:m,isLastComment:F}=t;if("json"===f.parser||"json5"===f.parser||"jsonc"===f.parser||"__js_expression"===f.parser||"__ts_expression"===f.parser||"__vue_expression"===f.parser||"__vue_ts_expression"===f.parser){if(u(r)-u(m)<=0){Ac(m,r);continue}if(i(r)-i(m)>=0){bc(m,r);continue}}let E;if(s?E=[t]:(r.enclosingNode=a,r.precedingNode=o,r.followingNode=p,E=[r,d,f,m,F]),Oc(d,f,h,e))r.placement="ownLine",c(...E)||(p?Ac(p,r):o?bc(o,r):vc(a||m,r));else if(Rc(d,f,h,e))r.placement="endOfLine",l(...E)||(o?bc(o,r):p?Ac(p,r):vc(a||m,r));else if(r.placement="remaining",D(...E));else if(o&&p){const e=n.length;e>0&&n[e-1].followingNode!==p&&Tc(n,f),n.push(t)}else o?bc(o,r):p?Ac(p,r):vc(a||m,r)}if(Tc(n,t),!s)for(const e of r)delete e.precedingNode,delete e.enclosingNode,delete e.followingNode}(e,t);const{printer:{preprocess:n}}=t;return{ast:e=n?await n(e,t):e,comments:r}}var ul=function(e,t){const{cursorOffset:r,locStart:n,locEnd:u}=t,i=Cc(t.printer.getVisitorKeys),s=e=>n(e)<=r&&u(e)>=r;let o=e;for(const t of function*(e,t){const r=[e];for(let e=0;e<r.length;e++){const n=r[e];for(const e of cc(n,t))yield e,r.push(e)}}(e,{getVisitorKeys:i,filter:s}))o=t;return o};var il=function(e,t){const{printer:{massageAstNode:r,getVisitorKeys:n}}=t;if(!r)return e;const u=Cc(n),i=r.ignoredProperties??new Set;return function e(t,n){if(null===t||"object"!=typeof t)return t;if(Array.isArray(t))return t.map((t=>e(t,n))).filter(Boolean);const s={},o=new Set(u(t));for(const r in t)Object.prototype.hasOwnProperty.call(t,r)&&!i.has(r)&&(o.has(r)?s[r]=e(t[r],t):s[r]=t[r]);const a=r(t,s,n);if(null===a)return;return a??s}(e)},sl=({parser:e})=>"json"===e||"json5"===e||"jsonc"===e||"json-stringify"===e;function ol(e){let t=e.length-1;for(;;){const r=e[t];if("Program"!==(null==r?void 0:r.type)&&"File"!==(null==r?void 0:r.type))break;t--}return e.slice(0,t+1)}function al(e,t,r,n,u=[],i){const{locStart:s,locEnd:o}=r,a=s(e),c=o(e);if(!(t>c||t<a||"rangeEnd"===i&&t===a||"rangeStart"===i&&t===c)){for(const s of wc(e,r)){const o=al(s,t,r,n,[e,...u],i);if(o)return o}return!n||n(e,u[0])?{node:e,parentNodes:u}:void 0}}var cl=new Set(["JsonRoot","ObjectExpression","ArrayExpression","StringLiteral","NumericLiteral","BooleanLiteral","NullLiteral","UnaryExpression","TemplateLiteral"]),ll=new Set(["OperationDefinition","FragmentDefinition","VariableDefinition","TypeExtensionDefinition","ObjectTypeDefinition","FieldDefinition","DirectiveDefinition","EnumTypeDefinition","EnumValueDefinition","InputValueDefinition","InputObjectTypeDefinition","SchemaDefinition","OperationTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","ScalarTypeDefinition"]);function Dl(e,t,r){if(!t)return!1;switch(e.parser){case"flow":case"babel":case"babel-flow":case"babel-ts":case"typescript":case"acorn":case"espree":case"meriyah":case"__babel_estree":return n=t.type,"DeclareExportDeclaration"!==(null==r?void 0:r.type)&&"TypeParameterDeclaration"!==n&&("Directive"===n||"TypeAlias"===n||"TSExportAssignment"===n||n.startsWith("Declare")||n.startsWith("TSDeclare")||n.endsWith("Statement")||n.endsWith("Declaration"));case"json":case"json5":case"jsonc":case"json-stringify":return cl.has(t.type);case"graphql":return ll.has(t.kind);case"vue":return"root"!==t.tag}var n;return!1}function hl(e,t,r){let{rangeStart:n,rangeEnd:u,locStart:i,locEnd:s}=t;Object(function(){var e=new Error("Cannot find module 'assert'");throw e.code="MODULE_NOT_FOUND",e}())(u>n);const o=e.slice(n,u).search(/\S/),a=-1===o;if(!a)for(n+=o;u>n&&!/\S/.test(e[u-1]);--u);const c=al(r,n,t,((e,r)=>Dl(t,e,r)),[],"rangeStart"),l=a?c:al(r,u,t,(e=>Dl(t,e)),[],"rangeEnd");if(!c||!l)return{rangeStart:0,rangeEnd:0};let D,h;if(sl(t)){const e=function(e,t){const r=[e.node,...e.parentNodes],n=new Set([t.node,...t.parentNodes]);return r.find((e=>cl.has(e.type)&&n.has(e)))}(c,l);D=e,h=e}else({startNode:D,endNode:h}=function(e,t,{locStart:r,locEnd:n}){let u=e.node,i=t.node;if(u===i)return{startNode:u,endNode:i};const s=r(e.node);for(const e of ol(t.parentNodes)){if(!(r(e)>=s))break;i=e}const o=n(t.node);for(const t of ol(e.parentNodes)){if(!(n(t)<=o))break;if(u=t,u===i)break}return{startNode:u,endNode:i}}(c,l,t));return{rangeStart:Math.min(i(D),i(h)),rangeEnd:Math.max(s(D),s(h))}}var pl="\ufeff",dl=Symbol("cursor");async function fl(e,t,r=0){if(!e||0===e.trim().length)return{formatted:"",cursorOffset:-1,comments:[]};const{ast:n,text:u}=await Jc(e,t);t.cursorOffset>=0&&(t.cursorNode=ul(n,t));let i=await tl(n,t);r>0&&(i=function(e,t,r){wa(e);let n=e;if(t>0){for(let e=0;e<Math.floor(t/r);++e)n=Sa(n);n=xa(t%r,n),n=xa(Number.NEGATIVE_INFINITY,n)}return n}([Na,i],r,t.tabWidth));const s=rc(i,t);if(r>0){const e=s.formatted.trim();void 0!==s.cursorNodeStart&&(s.cursorNodeStart-=s.formatted.indexOf(e)),s.formatted=e+ra(t.endOfLine)}const o=t[Symbol.for("comments")];if(t.cursorOffset>=0){let e,r,n,i,a;if(t.cursorNode&&s.cursorNodeText?(e=t.locStart(t.cursorNode),r=u.slice(e,t.locEnd(t.cursorNode)),n=t.cursorOffset-e,i=s.cursorNodeStart,a=s.cursorNodeText):(e=0,r=u,n=t.cursorOffset,i=0,a=s.formatted),r===a)return{formatted:s.formatted,cursorOffset:i+n,comments:o};const c=r.split("");c.splice(n,0,dl);const l=a.split(""),D=(0,ta.diffArrays)(c,l);let h=i;for(const e of D)if(e.removed){if(e.value.includes(dl))break}else h+=e.count;return{formatted:s.formatted,cursorOffset:h,comments:o}}return{formatted:s.formatted,cursorOffset:-1,comments:o}}function ml(e,t,r){return"number"!=typeof t||Number.isNaN(t)||t<0||t>e.length?r:t}function Fl(e,t){let{cursorOffset:r,rangeStart:n,rangeEnd:u}=t;return r=ml(e,r,-1),n=ml(e,n,0),u=ml(e,u,e.length),{...t,cursorOffset:r,rangeStart:n,rangeEnd:u}}function El(e,t){let{cursorOffset:r,rangeStart:n,rangeEnd:u,endOfLine:i}=Fl(e,t);const s=e.charAt(0)===pl;if(s&&(e=e.slice(1),r--,n--,u--),"auto"===i&&(i=function(e){const t=e.indexOf("\r");return t>=0?"\n"===e.charAt(t+1)?"crlf":"cr":"lf"}(e)),e.includes("\r")){const t=t=>na(e.slice(0,Math.max(t,0)),"\r\n");r-=t(r),n-=t(n),u-=t(u),e=function(e){return Wo(!1,e,/\r\n?/g,"\n")}(e)}return{hasBOM:s,text:e,options:Fl(e,{...t,cursorOffset:r,rangeStart:n,rangeEnd:u,endOfLine:i})}}async function gl(e,t){const r=await qc(t);return!r.hasPragma||r.hasPragma(e)}async function Cl(e,t){let r,{hasBOM:n,text:u,options:i}=El(e,await zc(t));return i.rangeStart>=i.rangeEnd&&""!==u||i.requirePragma&&!await gl(u,i)?{formatted:e,cursorOffset:t.cursorOffset,comments:[]}:(i.rangeStart>0||i.rangeEnd<u.length?r=await async function(e,t){const{ast:r,text:n}=await Jc(e,t),{rangeStart:u,rangeEnd:i}=hl(n,t,r),s=n.slice(u,i),o=Math.min(u,n.lastIndexOf("\n",u)+1),a=n.slice(o,u).match(/^\s*/)[0],c=sc(a,t.tabWidth),l=await fl(s,{...t,rangeStart:0,rangeEnd:Number.POSITIVE_INFINITY,cursorOffset:t.cursorOffset>u&&t.cursorOffset<=i?t.cursorOffset-u:-1,endOfLine:"lf"},c),D=l.formatted.trimEnd();let{cursorOffset:h}=t;h>i?h+=D.length-s.length:l.cursorOffset>=0&&(h=l.cursorOffset+u);let p=n.slice(0,u)+D+n.slice(i);if("lf"!==t.endOfLine){const e=ra(t.endOfLine);h>=0&&"\r\n"===e&&(h+=na(p.slice(0,h),"\n")),p=Wo(!1,p,"\n",e)}return{formatted:p,cursorOffset:h,comments:l.comments}}(u,i):(!i.requirePragma&&i.insertPragma&&i.printer.insertPragma&&!await gl(u,i)&&(u=i.printer.insertPragma(u)),r=await fl(u,i)),n&&(r.formatted=pl+r.formatted,r.cursorOffset>=0&&r.cursorOffset++),r)}var yl={};k(yl,{CATEGORY_CONFIG:()=>Al,CATEGORY_EDITOR:()=>vl,CATEGORY_FORMAT:()=>bl,CATEGORY_GLOBAL:()=>Bl,CATEGORY_OTHER:()=>_l,CATEGORY_OUTPUT:()=>wl,CATEGORY_SPECIAL:()=>Sl});var Al="Config",vl="Editor",bl="Format",_l="Other",wl="Output",Bl="Global",Sl="Special",xl={};k(xl,{languages:()=>Il,options:()=>kl,parsers:()=>Nl,printers:()=>Ll});var Ol={bracketSpacing:{category:"Common",type:"boolean",default:!0,description:"Print spaces between brackets.",oppositeDescription:"Do not print spaces between brackets."},singleQuote:{category:"Common",type:"boolean",default:!1,description:"Use single quotes instead of double quotes."},proseWrap:{category:"Common",type:"choice",default:"preserve",description:"How to wrap prose.",choices:[{value:"always",description:"Wrap prose if it exceeds the print width."},{value:"never",description:"Do not wrap prose."},{value:"preserve",description:"Wrap prose as-is."}]},bracketSameLine:{category:"Common",type:"boolean",default:!1,description:"Put > of opening tags on the last line instead of on a new line."},singleAttributePerLine:{category:"Common",type:"boolean",default:!1,description:"Enforce single attribute per line in HTML, Vue and JSX."}},Rl="HTML",Tl="JavaScript";var kl={...{singleQuote:Ol.singleQuote},...{bracketSpacing:Ol.bracketSpacing},...{bracketSameLine:Ol.bracketSameLine,htmlWhitespaceSensitivity:{category:Rl,type:"choice",default:"css",description:"How to handle whitespaces in HTML.",choices:[{value:"css",description:"Respect the default value of CSS display property."},{value:"strict",description:"Whitespaces are considered sensitive."},{value:"ignore",description:"Whitespaces are considered insensitive."}]},singleAttributePerLine:Ol.singleAttributePerLine,vueIndentScriptAndStyle:{category:Rl,type:"boolean",default:!1,description:"Indent script and style tags in Vue files."}},...{arrowParens:{category:Tl,type:"choice",default:"always",description:"Include parentheses around a sole arrow function parameter.",choices:[{value:"always",description:"Always include parens. Example: `(x) => x`"},{value:"avoid",description:"Omit parens when possible. Example: `x => x`"}]},bracketSameLine:Ol.bracketSameLine,bracketSpacing:Ol.bracketSpacing,jsxBracketSameLine:{category:Tl,type:"boolean",description:"Put > on the last line instead of at a new line.",deprecated:"2.4.0"},semi:{category:Tl,type:"boolean",default:!0,description:"Print semicolons.",oppositeDescription:"Do not print semicolons, except at the beginning of lines which may need them."},experimentalTernaries:{category:Tl,type:"boolean",default:!1,description:"Use curious ternaries, with the question mark after the condition.",oppositeDescription:"Default behavior of ternaries; keep question marks on the same line as the consequent."},singleQuote:Ol.singleQuote,jsxSingleQuote:{category:Tl,type:"boolean",default:!1,description:"Use single quotes in JSX."},quoteProps:{category:Tl,type:"choice",default:"as-needed",description:"Change when properties in objects are quoted.",choices:[{value:"as-needed",description:"Only add quotes around object properties where required."},{value:"consistent",description:"If at least one property in an object requires quotes, quote all properties."},{value:"preserve",description:"Respect the input use of quotes in object properties."}]},trailingComma:{category:Tl,type:"choice",default:"all",description:"Print trailing commas wherever possible when multi-line.",choices:[{value:"all",description:"Trailing commas wherever possible (including function arguments)."},{value:"es5",description:"Trailing commas where valid in ES5 (objects, arrays, etc.)"},{value:"none",description:"No trailing commas."}]},singleAttributePerLine:Ol.singleAttributePerLine},...{proseWrap:Ol.proseWrap,singleQuote:Ol.singleQuote},...{bracketSpacing:Ol.bracketSpacing,singleQuote:Ol.singleQuote,proseWrap:Ol.proseWrap}},Il=[{linguistLanguageId:50,name:"CSS",type:"markup",tmScope:"source.css",aceMode:"css",codemirrorMode:"css",codemirrorMimeType:"text/css",color:"#563d7c",extensions:[".css",".wxss"],parsers:["css"],vscodeLanguageIds:["css"]},{linguistLanguageId:262764437,name:"PostCSS",type:"markup",color:"#dc3a0c",tmScope:"source.postcss",group:"CSS",extensions:[".pcss",".postcss"],aceMode:"text",parsers:["css"],vscodeLanguageIds:["postcss"]},{linguistLanguageId:198,name:"Less",type:"markup",color:"#1d365d",aliases:["less-css"],extensions:[".less"],tmScope:"source.css.less",aceMode:"less",codemirrorMode:"css",codemirrorMimeType:"text/css",parsers:["less"],vscodeLanguageIds:["less"]},{linguistLanguageId:329,name:"SCSS",type:"markup",color:"#c6538c",tmScope:"source.css.scss",aceMode:"scss",codemirrorMode:"css",codemirrorMimeType:"text/x-scss",extensions:[".scss"],parsers:["scss"],vscodeLanguageIds:["scss"]},{linguistLanguageId:139,name:"GraphQL",type:"data",color:"#e10098",extensions:[".graphql",".gql",".graphqls"],tmScope:"source.graphql",aceMode:"text",parsers:["graphql"],vscodeLanguageIds:["graphql"]},{linguistLanguageId:155,name:"Handlebars",type:"markup",color:"#f7931e",aliases:["hbs","htmlbars"],extensions:[".handlebars",".hbs"],tmScope:"text.html.handlebars",aceMode:"handlebars",parsers:["glimmer"],vscodeLanguageIds:["handlebars"]},{linguistLanguageId:146,name:"Angular",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[".component.html"],parsers:["angular"],vscodeLanguageIds:["html"],filenames:[]},{linguistLanguageId:146,name:"HTML",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[".html",".hta",".htm",".html.hl",".inc",".xht",".xhtml",".mjml"],parsers:["html"],vscodeLanguageIds:["html"]},{linguistLanguageId:146,name:"Lightning Web Components",type:"markup",tmScope:"text.html.basic",aceMode:"html",codemirrorMode:"htmlmixed",codemirrorMimeType:"text/html",color:"#e34c26",aliases:["xhtml"],extensions:[],parsers:["lwc"],vscodeLanguageIds:["html"],filenames:[]},{linguistLanguageId:391,name:"Vue",type:"markup",color:"#41b883",extensions:[".vue"],tmScope:"text.html.vue",aceMode:"html",parsers:["vue"],vscodeLanguageIds:["vue"]},{linguistLanguageId:183,name:"JavaScript",type:"programming",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",color:"#f1e05a",aliases:["js","node"],extensions:[".js","._js",".bones",".cjs",".es",".es6",".frag",".gs",".jake",".javascript",".jsb",".jscad",".jsfl",".jslib",".jsm",".jspre",".jss",".mjs",".njs",".pac",".sjs",".ssjs",".xsjs",".xsjslib",".wxs"],filenames:["Jakefile"],interpreters:["chakra","d8","gjs","js","node","nodejs","qjs","rhino","v8","v8-shell","zx"],parsers:["babel","acorn","espree","meriyah","babel-flow","babel-ts","flow","typescript"],vscodeLanguageIds:["javascript","mongo"]},{linguistLanguageId:183,name:"Flow",type:"programming",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",color:"#f1e05a",aliases:[],extensions:[".js.flow"],filenames:[],interpreters:["chakra","d8","gjs","js","node","nodejs","qjs","rhino","v8","v8-shell"],parsers:["flow","babel-flow"],vscodeLanguageIds:["javascript"]},{linguistLanguageId:183,name:"JSX",type:"programming",tmScope:"source.js.jsx",aceMode:"javascript",codemirrorMode:"jsx",codemirrorMimeType:"text/jsx",color:void 0,aliases:void 0,extensions:[".jsx"],filenames:void 0,interpreters:void 0,parsers:["babel","babel-flow","babel-ts","flow","typescript","espree","meriyah"],vscodeLanguageIds:["javascriptreact"],group:"JavaScript"},{linguistLanguageId:378,name:"TypeScript",type:"programming",color:"#3178c6",aliases:["ts"],interpreters:["deno","ts-node"],extensions:[".ts",".cts",".mts"],tmScope:"source.ts",aceMode:"typescript",codemirrorMode:"javascript",codemirrorMimeType:"application/typescript",parsers:["typescript","babel-ts"],vscodeLanguageIds:["typescript"]},{linguistLanguageId:94901924,name:"TSX",type:"programming",color:"#3178c6",group:"TypeScript",extensions:[".tsx"],tmScope:"source.tsx",aceMode:"javascript",codemirrorMode:"jsx",codemirrorMimeType:"text/jsx",parsers:["typescript","babel-ts"],vscodeLanguageIds:["typescriptreact"]},{linguistLanguageId:174,name:"JSON.stringify",type:"data",color:"#292929",tmScope:"source.json",aceMode:"json",codemirrorMode:"javascript",codemirrorMimeType:"application/json",aliases:["geojson","jsonl","topojson"],extensions:[".importmap"],filenames:["package.json","package-lock.json","composer.json"],parsers:["json-stringify"],vscodeLanguageIds:["json"]},{linguistLanguageId:174,name:"JSON",type:"data",color:"#292929",tmScope:"source.json",aceMode:"json",codemirrorMode:"javascript",codemirrorMimeType:"application/json",aliases:["geojson","jsonl","topojson"],extensions:[".json",".4DForm",".4DProject",".avsc",".geojson",".gltf",".har",".ice",".JSON-tmLanguage",".mcmeta",".tfstate",".tfstate.backup",".topojson",".webapp",".webmanifest",".yy",".yyp"],filenames:[".all-contributorsrc",".arcconfig",".auto-changelog",".c8rc",".htmlhintrc",".imgbotconfig",".nycrc",".tern-config",".tern-project",".watchmanconfig","Pipfile.lock","composer.lock","flake.lock","mcmod.info",".babelrc",".jscsrc",".jshintrc",".jslintrc",".swcrc"],parsers:["json"],vscodeLanguageIds:["json"]},{linguistLanguageId:423,name:"JSON with Comments",type:"data",color:"#292929",group:"JSON",tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"text/javascript",aliases:["jsonc"],extensions:[".jsonc",".code-snippets",".code-workspace",".sublime-build",".sublime-commands",".sublime-completions",".sublime-keymap",".sublime-macro",".sublime-menu",".sublime-mousemap",".sublime-project",".sublime-settings",".sublime-theme",".sublime-workspace",".sublime_metrics",".sublime_session"],filenames:[],parsers:["jsonc"],vscodeLanguageIds:["jsonc"]},{linguistLanguageId:175,name:"JSON5",type:"data",color:"#267CB9",extensions:[".json5"],tmScope:"source.js",aceMode:"javascript",codemirrorMode:"javascript",codemirrorMimeType:"application/json",parsers:["json5"],vscodeLanguageIds:["json5"]},{linguistLanguageId:222,name:"Markdown",type:"prose",color:"#083fa1",aliases:["md","pandoc"],aceMode:"markdown",codemirrorMode:"gfm",codemirrorMimeType:"text/x-gfm",wrap:!0,extensions:[".md",".livemd",".markdown",".mdown",".mdwn",".mkd",".mkdn",".mkdown",".ronn",".scd",".workbook"],filenames:["contents.lr","README"],tmScope:"text.md",parsers:["markdown"],vscodeLanguageIds:["markdown"]},{linguistLanguageId:222,name:"MDX",type:"prose",color:"#083fa1",aliases:["md","pandoc"],aceMode:"markdown",codemirrorMode:"gfm",codemirrorMimeType:"text/x-gfm",wrap:!0,extensions:[".mdx"],filenames:[],tmScope:"text.md",parsers:["mdx"],vscodeLanguageIds:["mdx"]},{linguistLanguageId:407,name:"YAML",type:"data",color:"#cb171e",tmScope:"source.yaml",aliases:["yml"],extensions:[".yml",".mir",".reek",".rviz",".sublime-syntax",".syntax",".yaml",".yaml-tmlanguage",".yaml.sed",".yml.mysql"],filenames:[".clang-format",".clang-tidy",".gemrc","CITATION.cff","glide.lock",".prettierrc",".stylelintrc",".lintstagedrc"],aceMode:"yaml",codemirrorMode:"yaml",codemirrorMimeType:"text/x-yaml",parsers:["yaml"],vscodeLanguageIds:["yaml","ansible","home-assistant"]}],{parsers:Nl,printers:Ll}=function(e){const t=Object.create(null),r=Object.create(null);for(const{importPlugin:n,parsers:u=[],printers:i=[]}of e){const e=async()=>{const e=await n();return Object.assign(t,e.parsers),Object.assign(r,e.printers),e};for(const r of u)t[r]=async()=>(await e()).parsers[r];for(const t of i)r[t]=async()=>(await e()).printers[t]}return{parsers:t,printers:r}}([{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_acorn_mjs").then(r.bind(r,/*! ./plugins/acorn.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/acorn.mjs")),parsers:["acorn","espree"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_angular_mjs").then(r.bind(r,/*! ./plugins/angular.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/angular.mjs")),parsers:["__ng_action","__ng_binding","__ng_interpolation","__ng_directive"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_babel_mjs").then(r.bind(r,/*! ./plugins/babel.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/babel.mjs")),parsers:["babel","babel-flow","babel-ts","__js_expression","__ts_expression","__vue_expression","__vue_ts_expression","__vue_event_binding","__vue_ts_event_binding","__babel_estree","json","json5","jsonc","json-stringify"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_estree_mjs").then(r.bind(r,/*! ./plugins/estree.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/estree.mjs")),printers:["estree","estree-json"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_flow_mjs").then(r.bind(r,/*! ./plugins/flow.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/flow.mjs")),parsers:["flow"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_glimmer_mjs").then(r.bind(r,/*! ./plugins/glimmer.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/glimmer.mjs")),parsers:["glimmer"],printers:["glimmer"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_graphql_mjs").then(r.bind(r,/*! ./plugins/graphql.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/graphql.mjs")),parsers:["graphql"],printers:["graphql"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_html_mjs").then(r.bind(r,/*! ./plugins/html.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/html.mjs")),parsers:["html","angular","vue","lwc"],printers:["html"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_markdown_mjs").then(r.bind(r,/*! ./plugins/markdown.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/markdown.mjs")),parsers:["markdown","mdx","remark"],printers:["mdast"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_meriyah_mjs").then(r.bind(r,/*! ./plugins/meriyah.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/meriyah.mjs")),parsers:["meriyah"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_postcss_mjs").then(r.bind(r,/*! ./plugins/postcss.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/postcss.mjs")),parsers:["css","less","scss"],printers:["postcss"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_typescript_mjs").then(r.bind(r,/*! ./plugins/typescript.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/typescript.mjs")),parsers:["typescript"]},{importPlugin:()=>r.e(/*! import() */"vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_yaml_mjs").then(r.bind(r,/*! ./plugins/yaml.mjs */"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/yaml.mjs")),parsers:["yaml"],printers:["yaml"]}]);var jl=function(){return[xl]};var Pl=function(e,t){return xo(e,u.join(t,"noop.js"))};async function $l(e,t){const i=await async function(e,t){if(u.isAbsolute(e))return r("./node_modules/json-schema-to-typescript/node_modules/prettier lazy recursive")((0,n.pathToFileURL)(e).href);try{return await r("./node_modules/json-schema-to-typescript/node_modules/prettier lazy recursive")((0,n.pathToFileURL)(u.resolve(e)).href)}catch{return Pl(e,t)}}(e,t);return{name:e,...i.default??i}}var Ml=new Map;var Ul=function(e=[]){return Promise.all(e.map((e=>function(e){if("string"!=typeof e)return e;const t=process.cwd(),r=JSON.stringify({name:e,cwd:t});return Ml.has(r)||Ml.set(r,$l(e,t)),Ml.get(r)}(e))))};var Hl=function(e,t){return t=new Set(t),Object.fromEntries(Object.entries(e).filter((([e])=>!t.has(e))))},Gl="3.3.2",Wl={};k(Wl,{addDanglingComment:()=>vc,addLeadingComment:()=>Ac,addTrailingComment:()=>bc,getAlignmentSize:()=>sc,getIndentSize:()=>Xl,getMaxContinuousCount:()=>zl,getNextNonSpaceNonCommentCharacter:()=>Ql,getNextNonSpaceNonCommentCharacterIndex:()=>tD,getStringWidth:()=>Ua,hasNewline:()=>mc,hasNewlineInRange:()=>Jl,hasSpaces:()=>Zl,isNextLineEmpty:()=>nD,isNextLineEmptyAfterIndex:()=>Yl,isPreviousLineEmpty:()=>rD,makeString:()=>eD,skip:()=>lc,skipEverythingButNewLine:()=>dc,skipInlineComment:()=>Vl,skipNewline:()=>fc,skipSpaces:()=>hc,skipToLineEnd:()=>pc,skipTrailingComment:()=>Kl,skipWhitespace:()=>Dc});var Vl=function(e,t){if(!1===t)return!1;if("/"===e.charAt(t)&&"*"===e.charAt(t+1))for(let r=t+2;r<e.length;++r)if("*"===e.charAt(r)&&"/"===e.charAt(r+1))return r+2;return t};var Kl=function(e,t){return!1!==t&&("/"===e.charAt(t)&&"/"===e.charAt(t+1)?dc(e,t):t)};var ql=function(e,t){let r=null,n=t;for(;n!==r;)r=n,n=hc(e,n),n=Vl(e,n),n=Kl(e,n),n=fc(e,n);return n};var Yl=function(e,t){let r=null,n=t;for(;n!==r;)r=n,n=pc(e,n),n=Vl(e,n),n=hc(e,n);return n=Kl(e,n),n=fc(e,n),!1!==n&&mc(e,n)};var Xl=function(e,t){const r=e.lastIndexOf("\n");return-1===r?0:sc(e.slice(r+1).match(/^[\t ]*/)[0],t)};var zl=function(e,t){const r=e.match(new RegExp(`(${function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}(t)})+`,"g"));return null===r?0:r.reduce(((e,r)=>Math.max(e,r.length/t.length)),0)};var Ql=function(e,t){const r=ql(e,t);return!1===r?"":e.charAt(r)};var Jl=function(e,t,r){for(let n=t;n<r;++n)if("\n"===e.charAt(n))return!0;return!1};var Zl=function(e,t,r={}){return hc(e,r.backwards?t-1:t,r)!==t};var eD=function(e,t,r){const n='"'===t?"'":'"',u=Wo(!1,e,/\\(.)|(["'])/gs,((e,u,i)=>u===n?u:i===t?"\\"+i:i||(r&&/^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/.test(u)?u:"\\"+u)));return t+u+t};function tD(e,t){return 2===arguments.length||"number"==typeof t?ql(e,t):function(e,t,r){return ql(e,r(t))}(...arguments)}function rD(e,t){return 2===arguments.length||"number"==typeof t?Ic(e,t):function(e,t,r){return Ic(e,r(t))}(...arguments)}function nD(e,t){return 2===arguments.length||"number"==typeof t?Yl(e,t):function(e,t,r){return Yl(e,r(t))}(...arguments)}function uD(e,t=1){return async(...r)=>{const n=r[t]??{},{plugins:u=[]}=n;return r[t]={...n,plugins:(await Promise.all([jl(),Ul(u)])).flat()},e(...r)}}var iD=uD(Cl);async function sD(e,t){const{formatted:r}=await iD(e,{...t,cursorOffset:-1});return r}async function oD(e,t){return await sD(e,t)===e}async function aD(){jo(),Ml.clear()}var cD=uD(ea),lD=uD(Mc,0),DD={errors:dn,optionCategories:yl,createIsIgnoredFunction:Yo,formatOptionsHiddenDefaults:Xc,normalizeOptions:Wc,getSupportInfoWithoutPlugins:Mc,normalizeOptionSettings:Hc,vnopts:{ChoiceSchema:un,apiDescriptor:Rr},fastGlob:Or.default,createTwoFilesPatch:xr.createTwoFilesPatch,utils:{isNonEmptyArray:Fc,partition:An,omit:Hl},mockable:Gn},hD={parse:uD((async function(e,t,r){const{text:n,options:u}=El(e,await zc(t)),i=await Jc(n,u);return r&&(r.preprocessForPrint&&(i.ast=await nl(i.ast,u)),r.massage&&(i.ast=il(i.ast,u))),i})),formatAST:uD((async function(e,t){return t=await zc(t),rc(await tl(e,t),t)})),formatDoc:uD((async function(e,t){const r=function(e){const t=Object.create(null),r=new Set;return function e(t,r,u){var i,s;if("string"==typeof t)return JSON.stringify(t);if(Array.isArray(t)){const r=t.map(e).filter(Boolean);return 1===r.length?r[0]:`[${r.join(", ")}]`}if(t.type===ma){const e=(null==(i=null==u?void 0:u[r+1])?void 0:i.type)===Ea;return t.literal?e?"literalline":"literallineWithoutBreakParent":t.hard?e?"hardline":"hardlineWithoutBreakParent":t.soft?"softline":"line"}if(t.type===Ea)return(null==(s=null==u?void 0:u[r-1])?void 0:s.type)===ma&&u[r-1].hard?void 0:"breakParent";if(t.type===ca)return"trim";if(t.type===oa)return"indent("+e(t.contents)+")";if(t.type===aa)return t.n===Number.NEGATIVE_INFINITY?"dedentToRoot("+e(t.contents)+")":t.n<0?"dedent("+e(t.contents)+")":"root"===t.n.type?"markAsRoot("+e(t.contents)+")":"align("+JSON.stringify(t.n)+", "+e(t.contents)+")";if(t.type===ha)return"ifBreak("+e(t.breakContents)+(t.flatContents?", "+e(t.flatContents):"")+(t.groupId?(t.flatContents?"":', ""')+`, { groupId: ${n(t.groupId)} }`:"")+")";if(t.type===pa){const r=[];t.negate&&r.push("negate: true"),t.groupId&&r.push(`groupId: ${n(t.groupId)}`);const u=r.length>0?`, { ${r.join(", ")} }`:"";return`indentIfBreak(${e(t.contents)}${u})`}if(t.type===la){const r=[];t.break&&"propagated"!==t.break&&r.push("shouldBreak: true"),t.id&&r.push(`id: ${n(t.id)}`);const u=r.length>0?`, { ${r.join(", ")} }`:"";return t.expandedStates?`conditionalGroup([${t.expandedStates.map((t=>e(t))).join(",")}]${u})`:`group(${e(t.contents)}${u})`}if(t.type===Da)return`fill([${t.parts.map((t=>e(t))).join(", ")}])`;if(t.type===da)return"lineSuffix("+e(t.contents)+")";if(t.type===fa)return"lineSuffixBoundary";if(t.type===Fa)return`label(${JSON.stringify(t.label)}, ${e(t.contents)})`;throw new Error("Unknown doc type "+t.type)}(ja(e));function n(e){if("symbol"!=typeof e)return JSON.stringify(String(e));if(e in t)return t[e];const n=e.description||"symbol";for(let u=0;;u++){const i=n+(u>0?` #${u}`:"");if(!r.has(i))return r.add(i),t[e]=`Symbol.for(${JSON.stringify(i)})`}}}(e),{formatted:n}=await Cl(r,{...t,parser:"__js_expression"});return n})),printToDoc:uD((async function(e,t){t=await zc(t);const{ast:r}=await Jc(e,t);return tl(r,t)})),printDocToString:uD((async function(e,t){return rc(e,await zc(t))})),mockable:Gn},pD=Sr}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,