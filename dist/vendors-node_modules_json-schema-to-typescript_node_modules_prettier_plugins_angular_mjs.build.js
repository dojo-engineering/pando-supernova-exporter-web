"use strict";(self.webpackChunk_COMPANY_NAME_EXPORTER_NAME_=self.webpackChunk_COMPANY_NAME_EXPORTER_NAME_||[]).push([["vendors-node_modules_json-schema-to-typescript_node_modules_prettier_plugins_angular_mjs"],{"./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/angular.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/json-schema-to-typescript/node_modules/prettier/plugins/angular.mjs ***!
  \******************************************************************************************/(t,e,s)=>{s.r(e),s.d(e,{default:()=>xe,parsers:()=>u});var r=Object.defineProperty,i=t=>{throw TypeError(t)},n=(t,e)=>{for(var s in e)r(t,s,{get:e[s],enumerable:!0})},a=(t,e,s)=>e.has(t)||i("Cannot "+s),h=(t,e,s)=>(a(t,e,"read from private field"),s?s.call(t):e.get(t)),o=(t,e,s)=>e.has(t)?i("Cannot add the same private member more than once"):e instanceof WeakSet?e.add(t):e.set(t,s),l=(t,e,s,r)=>(a(t,e,"write to private field"),r?r.call(t,s):e.set(t,s),s),c=(t,e,s)=>(a(t,e,"access private method"),s),p={};n(p,{parsers:()=>u});var u={};n(u,{__ng_action:()=>pe,__ng_binding:()=>ue,__ng_directive:()=>fe,__ng_interpolation:()=>de});var d,f,x,v,y,g=class{constructor(t,e,s,r){this.input=e,this.errLocation=s,this.ctxLocation=r,this.message=`Parser Error: ${t} ${s} [${e}] in ${r}`}},m=class{constructor(t,e){this.start=t,this.end=e}toAbsolute(t){return new j(t+this.start,t+this.end)}},w=class{constructor(t,e){this.span=t,this.sourceSpan=e}toString(){return"AST"}},S=class extends w{constructor(t,e,s){super(t,e),this.nameSpan=s}},C=class extends w{visit(t,e=null){}},k=class extends w{visit(t,e=null){return t.visitImplicitReceiver(this,e)}},P=class extends k{visit(t,e=null){var s;return null==(s=t.visitThisReceiver)?void 0:s.call(t,this,e)}},O=class extends w{constructor(t,e,s){super(t,e),this.expressions=s}visit(t,e=null){return t.visitChain(this,e)}},E=class extends w{constructor(t,e,s,r,i){super(t,e),this.condition=s,this.trueExp=r,this.falseExp=i}visit(t,e=null){return t.visitConditional(this,e)}},I=class extends S{constructor(t,e,s,r,i){super(t,e,s),this.receiver=r,this.name=i}visit(t,e=null){return t.visitPropertyRead(this,e)}},b=class extends S{constructor(t,e,s,r,i,n){super(t,e,s),this.receiver=r,this.name=i,this.value=n}visit(t,e=null){return t.visitPropertyWrite(this,e)}},A=class extends S{constructor(t,e,s,r,i){super(t,e,s),this.receiver=r,this.name=i}visit(t,e=null){return t.visitSafePropertyRead(this,e)}},N=class extends w{constructor(t,e,s,r){super(t,e),this.receiver=s,this.key=r}visit(t,e=null){return t.visitKeyedRead(this,e)}},_=class extends w{constructor(t,e,s,r){super(t,e),this.receiver=s,this.key=r}visit(t,e=null){return t.visitSafeKeyedRead(this,e)}},K=class extends w{constructor(t,e,s,r,i){super(t,e),this.receiver=s,this.key=r,this.value=i}visit(t,e=null){return t.visitKeyedWrite(this,e)}},T=class extends S{constructor(t,e,s,r,i,n){super(t,e,n),this.exp=s,this.name=r,this.args=i}visit(t,e=null){return t.visitPipe(this,e)}},L=class extends w{constructor(t,e,s){super(t,e),this.value=s}visit(t,e=null){return t.visitLiteralPrimitive(this,e)}},M=class extends w{constructor(t,e,s){super(t,e),this.expressions=s}visit(t,e=null){return t.visitLiteralArray(this,e)}},$=class extends w{constructor(t,e,s,r){super(t,e),this.keys=s,this.values=r}visit(t,e=null){return t.visitLiteralMap(this,e)}},B=class extends w{constructor(t,e,s,r){super(t,e),this.strings=s,this.expressions=r}visit(t,e=null){return t.visitInterpolation(this,e)}},W=class extends w{constructor(t,e,s,r,i){super(t,e),this.operation=s,this.left=r,this.right=i}visit(t,e=null){return t.visitBinary(this,e)}},R=class t extends W{static createMinus(e,s,r){return new t(e,s,"-",r,"-",new L(e,s,0),r)}static createPlus(e,s,r){return new t(e,s,"+",r,"-",r,new L(e,s,0))}constructor(t,e,s,r,i,n,a){super(t,e,i,n,a),this.operator=s,this.expr=r,this.left=null,this.right=null,this.operation=null}visit(t,e=null){return void 0!==t.visitUnary?t.visitUnary(this,e):t.visitBinary(this,e)}},U=class extends w{constructor(t,e,s){super(t,e),this.expression=s}visit(t,e=null){return t.visitPrefixNot(this,e)}},G=class extends w{constructor(t,e,s){super(t,e),this.expression=s}visit(t,e=null){return t.visitNonNullAssert(this,e)}},V=class extends w{constructor(t,e,s,r,i){super(t,e),this.receiver=s,this.args=r,this.argumentSpan=i}visit(t,e=null){return t.visitCall(this,e)}},F=class extends w{constructor(t,e,s,r,i){super(t,e),this.receiver=s,this.args=r,this.argumentSpan=i}visit(t,e=null){return t.visitSafeCall(this,e)}},j=class{constructor(t,e){this.start=t,this.end=e}},q=class extends w{constructor(t,e,s,r,i){super(new m(0,null===e?0:e.length),new j(r,null===e?r:r+e.length)),this.ast=t,this.source=e,this.location=s,this.errors=i}visit(t,e=null){return t.visitASTWithSource?t.visitASTWithSource(this,e):this.ast.visit(t,e)}toString(){return`${this.source} in ${this.location}`}},z=class{constructor(t,e,s){this.sourceSpan=t,this.key=e,this.value=s}},D=class{constructor(t,e,s){this.sourceSpan=t,this.key=e,this.value=s}},Y=class{visit(t,e){t.visit(this,e)}visitUnary(t,e){this.visit(t.expr,e)}visitBinary(t,e){this.visit(t.left,e),this.visit(t.right,e)}visitChain(t,e){this.visitAll(t.expressions,e)}visitConditional(t,e){this.visit(t.condition,e),this.visit(t.trueExp,e),this.visit(t.falseExp,e)}visitPipe(t,e){this.visit(t.exp,e),this.visitAll(t.args,e)}visitImplicitReceiver(t,e){}visitThisReceiver(t,e){}visitInterpolation(t,e){this.visitAll(t.expressions,e)}visitKeyedRead(t,e){this.visit(t.receiver,e),this.visit(t.key,e)}visitKeyedWrite(t,e){this.visit(t.receiver,e),this.visit(t.key,e),this.visit(t.value,e)}visitLiteralArray(t,e){this.visitAll(t.expressions,e)}visitLiteralMap(t,e){this.visitAll(t.values,e)}visitLiteralPrimitive(t,e){}visitPrefixNot(t,e){this.visit(t.expression,e)}visitNonNullAssert(t,e){this.visit(t.expression,e)}visitPropertyRead(t,e){this.visit(t.receiver,e)}visitPropertyWrite(t,e){this.visit(t.receiver,e),this.visit(t.value,e)}visitSafePropertyRead(t,e){this.visit(t.receiver,e)}visitSafeKeyedRead(t,e){this.visit(t.receiver,e),this.visit(t.key,e)}visitCall(t,e){this.visit(t.receiver,e),this.visitAll(t.args,e)}visitSafeCall(t,e){this.visit(t.receiver,e),this.visitAll(t.args,e)}visitAll(t,e){for(let s of t)this.visit(s,e)}};function J(t){return t>=9&&t<=32||160==t}function Q(t){return 48<=t&&t<=57}function X(t){return 39===t||34===t||96===t}(f=d||(d={}))[f.DEFAULT=0]="DEFAULT",f[f.LITERAL_ATTR=1]="LITERAL_ATTR",f[f.ANIMATION=2]="ANIMATION",f[f.TWO_WAY=3]="TWO_WAY",function(t){t[t.Regular=0]="Regular",t[t.Animation=1]="Animation",t[t.TwoWay=2]="TwoWay"}(x||(x={})),function(t){t[t.Property=0]="Property",t[t.Attribute=1]="Attribute",t[t.Class=2]="Class",t[t.Style=3]="Style",t[t.Animation=4]="Animation",t[t.TwoWay=5]="TwoWay"}(v||(v={})),function(t){t[t.Character=0]="Character",t[t.Identifier=1]="Identifier",t[t.PrivateIdentifier=2]="PrivateIdentifier",t[t.Keyword=3]="Keyword",t[t.String=4]="String",t[t.Operator=5]="Operator",t[t.Number=6]="Number",t[t.Error=7]="Error"}(y||(y={}));var H=["var","let","as","null","undefined","true","false","if","else","this"],Z=class{tokenize(t){let e=new it(t),s=[],r=e.scanToken();for(;null!=r;)s.push(r),r=e.scanToken();return s}},tt=class{constructor(t,e,s,r,i){this.index=t,this.end=e,this.type=s,this.numValue=r,this.strValue=i}isCharacter(t){return this.type==y.Character&&this.numValue==t}isNumber(){return this.type==y.Number}isString(){return this.type==y.String}isOperator(t){return this.type==y.Operator&&this.strValue==t}isIdentifier(){return this.type==y.Identifier}isPrivateIdentifier(){return this.type==y.PrivateIdentifier}isKeyword(){return this.type==y.Keyword}isKeywordLet(){return this.type==y.Keyword&&"let"==this.strValue}isKeywordAs(){return this.type==y.Keyword&&"as"==this.strValue}isKeywordNull(){return this.type==y.Keyword&&"null"==this.strValue}isKeywordUndefined(){return this.type==y.Keyword&&"undefined"==this.strValue}isKeywordTrue(){return this.type==y.Keyword&&"true"==this.strValue}isKeywordFalse(){return this.type==y.Keyword&&"false"==this.strValue}isKeywordThis(){return this.type==y.Keyword&&"this"==this.strValue}isError(){return this.type==y.Error}toNumber(){return this.type==y.Number?this.numValue:-1}toString(){switch(this.type){case y.Character:case y.Identifier:case y.Keyword:case y.Operator:case y.PrivateIdentifier:case y.String:case y.Error:return this.strValue;case y.Number:return this.numValue.toString();default:return null}}};function et(t,e,s){return new tt(t,e,y.Character,s,String.fromCharCode(s))}function st(t,e,s){return new tt(t,e,y.Operator,0,s)}var rt=new tt(-1,-1,y.Character,0,""),it=class{constructor(t){this.input=t,this.peek=0,this.index=-1,this.length=t.length,this.advance()}advance(){this.peek=++this.index>=this.length?0:this.input.charCodeAt(this.index)}scanToken(){let t=this.input,e=this.length,s=this.peek,r=this.index;for(;s<=32;){if(++r>=e){s=0;break}s=t.charCodeAt(r)}if(this.peek=s,this.index=r,r>=e)return null;if(nt(s))return this.scanIdentifier();if(Q(s))return this.scanNumber(r);let i=r;switch(s){case 46:return this.advance(),Q(this.peek)?this.scanNumber(i):et(i,this.index,46);case 40:case 41:case 123:case 125:case 91:case 93:case 44:case 58:case 59:return this.scanCharacter(i,s);case 39:case 34:return this.scanString();case 35:return this.scanPrivateIdentifier();case 43:case 45:case 42:case 47:case 37:case 94:return this.scanOperator(i,String.fromCharCode(s));case 63:return this.scanQuestion(i);case 60:case 62:return this.scanComplexOperator(i,String.fromCharCode(s),61,"=");case 33:case 61:return this.scanComplexOperator(i,String.fromCharCode(s),61,"=",61,"=");case 38:return this.scanComplexOperator(i,"&",38,"&");case 124:return this.scanComplexOperator(i,"|",124,"|");case 160:for(;J(this.peek);)this.advance();return this.scanToken()}return this.advance(),this.error(`Unexpected character [${String.fromCharCode(s)}]`,0)}scanCharacter(t,e){return this.advance(),et(t,this.index,e)}scanOperator(t,e){return this.advance(),st(t,this.index,e)}scanComplexOperator(t,e,s,r,i,n){this.advance();let a=e;return this.peek==s&&(this.advance(),a+=r),null!=i&&this.peek==i&&(this.advance(),a+=n),st(t,this.index,a)}scanIdentifier(){let t=this.index;for(this.advance();at(this.peek);)this.advance();let e=this.input.substring(t,this.index);return H.indexOf(e)>-1?function(t,e,s){return new tt(t,e,y.Keyword,0,s)}(t,this.index,e):function(t,e,s){return new tt(t,e,y.Identifier,0,s)}(t,this.index,e)}scanPrivateIdentifier(){let t=this.index;if(this.advance(),!nt(this.peek))return this.error("Invalid character [#]",-1);for(;at(this.peek);)this.advance();let e=this.input.substring(t,this.index);return function(t,e,s){return new tt(t,e,y.PrivateIdentifier,0,s)}(t,this.index,e)}scanNumber(t){let e=this.index===t,s=!1;for(this.advance();;){if(!Q(this.peek))if(95===this.peek){if(!Q(this.input.charCodeAt(this.index-1))||!Q(this.input.charCodeAt(this.index+1)))return this.error("Invalid numeric separator",0);s=!0}else if(46===this.peek)e=!1;else{if(!ht(this.peek))break;if(this.advance(),ot(this.peek)&&this.advance(),!Q(this.peek))return this.error("Invalid exponent",-1);e=!1}this.advance()}let r=this.input.substring(t,this.index);s&&(r=r.replace(/_/g,""));let i=e?function(t){let e=parseInt(t);if(isNaN(e))throw new Error("Invalid integer literal when parsing "+t);return e}(r):parseFloat(r);return function(t,e,s){return new tt(t,e,y.Number,s,"")}(t,this.index,i)}scanString(){let t=this.index,e=this.peek;this.advance();let s="",r=this.index,i=this.input;for(;this.peek!=e;)if(92==this.peek){let t;if(s+=i.substring(r,this.index),this.advance(),117==this.peek){let e=i.substring(this.index+1,this.index+5);if(!/^[0-9a-f]+$/i.test(e))return this.error(`Invalid unicode escape [\\u${e}]`,0);t=parseInt(e,16);for(let t=0;t<5;t++)this.advance()}else t=lt(this.peek),this.advance();s+=String.fromCharCode(t),r=this.index}else{if(0==this.peek)return this.error("Unterminated quote",0);this.advance()}let n=i.substring(r,this.index);return this.advance(),function(t,e,s){return new tt(t,e,y.String,0,s)}(t,this.index,s+n)}scanQuestion(t){this.advance();let e="?";return(63===this.peek||46===this.peek)&&(e+=46===this.peek?".":"?",this.advance()),st(t,this.index,e)}error(t,e){let s=this.index+e;return function(t,e,s){return new tt(t,e,y.Error,0,s)}(s,this.index,`Lexer Error: ${t} at column ${s} in expression [${this.input}]`)}};function nt(t){return 97<=t&&t<=122||65<=t&&t<=90||95==t||36==t}function at(t){return function(t){return t>=97&&t<=122||t>=65&&t<=90}(t)||Q(t)||95==t||36==t}function ht(t){return 101==t||69==t}function ot(t){return 45==t||43==t}function lt(t){switch(t){case 110:return 10;case 102:return 12;case 114:return 13;case 116:return 9;case 118:return 11;default:return t}}var ct=[/@/,/^\s*$/,/[<>]/,/^[{}]$/,/&(#|[a-z])/i,/^\/\//];var pt,ut=new class t{static fromArray(e){return e?(function(t,e){if(null!=e&&(!Array.isArray(e)||2!=e.length))throw new Error(`Expected '${t}' to be an array, [start, end].`);if(null!=e){let t=e[0],s=e[1];ct.forEach((e=>{if(e.test(t)||e.test(s))throw new Error(`['${t}', '${s}'] contains unusable interpolation symbol.`)}))}}("interpolation",e),new t(e[0],e[1])):ut}constructor(t,e){this.start=t,this.end=e}}("{{","}}"),dt=class{constructor(t,e,s){this.strings=t,this.expressions=e,this.offsets=s}},ft=class{constructor(t,e,s){this.templateBindings=t,this.warnings=e,this.errors=s}},xt=class{constructor(t){this._lexer=t,this.errors=[]}parseAction(t,e,s,r=ut){this._checkNoInterpolation(t,e,r);let i=this._stripComments(t),n=this._lexer.tokenize(i),a=new vt(t,e,s,n,1,this.errors,0).parseChain();return new q(a,t,e,s,this.errors)}parseBinding(t,e,s,r=ut){let i=this._parseBindingAst(t,e,s,r);return new q(i,t,e,s,this.errors)}checkSimpleExpression(t){let e=new yt;return t.visit(e),e.errors}parseSimpleBinding(t,e,s,r=ut){let i=this._parseBindingAst(t,e,s,r),n=this.checkSimpleExpression(i);return n.length>0&&this._reportError(`Host binding expression cannot contain ${n.join(" ")}`,t,e),new q(i,t,e,s,this.errors)}_reportError(t,e,s,r){this.errors.push(new g(t,e,s,r))}_parseBindingAst(t,e,s,r){this._checkNoInterpolation(t,e,r);let i=this._stripComments(t),n=this._lexer.tokenize(i);return new vt(t,e,s,n,0,this.errors,0).parseChain()}parseTemplateBindings(t,e,s,r,i){let n=this._lexer.tokenize(e);return new vt(e,s,i,n,0,this.errors,0).parseTemplateBindings({source:t,span:new j(r,r+t.length)})}parseInterpolation(t,e,s,r,i=ut){let{strings:n,expressions:a,offsets:h}=this.splitInterpolation(t,e,r,i);if(0===a.length)return null;let o=[];for(let r=0;r<a.length;++r){let i=a[r].text,n=this._stripComments(i),l=this._lexer.tokenize(n),c=new vt(t,e,s,l,0,this.errors,h[r]).parseChain();o.push(c)}return this.createInterpolationAst(n.map((t=>t.text)),o,t,e,s)}parseInterpolationExpression(t,e,s){let r=this._stripComments(t),i=this._lexer.tokenize(r),n=new vt(t,e,s,i,0,this.errors,0).parseChain();return this.createInterpolationAst(["",""],[n],t,e,s)}createInterpolationAst(t,e,s,r,i){let n=new m(0,s.length),a=new B(n,n.toAbsolute(i),t,e);return new q(a,s,r,i,this.errors)}splitInterpolation(t,e,s,r=ut){let i=[],n=[],a=[],h=s?function(t){let e=new Map,s=0,r=0,i=0;for(;i<t.length;){let n=t[i];if(9===n.type){let[t,e]=n.parts;s+=e.length,r+=t.length}else{let t=n.parts.reduce(((t,e)=>t+e.length),0);r+=t,s+=t}e.set(r,s),i++}return e}(s):null,o=0,l=!1,c=!1,{start:p,end:u}=r;for(;o<t.length;)if(l){let s=o,r=s+p.length,i=this._getInterpolationEndIndex(t,u,r);if(-1===i){l=!1,c=!0;break}let d=i+u.length,f=t.substring(r,i);0===f.trim().length&&this._reportError("Blank expressions are not allowed in interpolated strings",t,`at column ${o} in`,e),n.push({text:f,start:s,end:d});let x=((null==h?void 0:h.get(s))??s)+p.length;a.push(x),o=d,l=!1}else{let e=o;o=t.indexOf(p,o),-1===o&&(o=t.length);let s=t.substring(e,o);i.push({text:s,start:e,end:o}),l=!0}if(!l)if(c){let e=i[i.length-1];e.text+=t.substring(o),e.end=t.length}else i.push({text:t.substring(o),start:o,end:t.length});return new dt(i,n,a)}wrapLiteralPrimitive(t,e,s){let r=new m(0,null==t?0:t.length);return new q(new L(r,r.toAbsolute(s),t),t,e,s,this.errors)}_stripComments(t){let e=this._commentStart(t);return null!=e?t.substring(0,e):t}_commentStart(t){let e=null;for(let s=0;s<t.length-1;s++){let r=t.charCodeAt(s),i=t.charCodeAt(s+1);if(47===r&&47==i&&null==e)return s;e===r?e=null:null==e&&X(r)&&(e=r)}return null}_checkNoInterpolation(t,e,{start:s,end:r}){let i=-1,n=-1;for(let e of this._forEachUnquotedChar(t,0))if(-1===i)t.startsWith(s)&&(i=e);else if(n=this._getInterpolationEndIndex(t,r,e),n>-1)break;i>-1&&n>-1&&this._reportError(`Got interpolation (${s}${r}) where expression was expected`,t,`at column ${i} in`,e)}_getInterpolationEndIndex(t,e,s){for(let r of this._forEachUnquotedChar(t,s)){if(t.startsWith(e,r))return r;if(t.startsWith("//",r))return t.indexOf(e,r)}return-1}*_forEachUnquotedChar(t,e){let s=null,r=0;for(let i=e;i<t.length;i++){let e=t[i];!X(t.charCodeAt(i))||null!==s&&s!==e||r%2!=0?null===s&&(yield i):s=null===s?e:null,r="\\"===e?r+1:0}}};!function(t){t[t.None=0]="None",t[t.Writable=1]="Writable"}(pt||(pt={}));var vt=class{constructor(t,e,s,r,i,n,a){this.input=t,this.location=e,this.absoluteOffset=s,this.tokens=r,this.parseFlags=i,this.errors=n,this.offset=a,this.rparensExpected=0,this.rbracketsExpected=0,this.rbracesExpected=0,this.context=pt.None,this.sourceSpanCache=new Map,this.index=0}peek(t){let e=this.index+t;return e<this.tokens.length?this.tokens[e]:rt}get next(){return this.peek(0)}get atEOF(){return this.index>=this.tokens.length}get inputIndex(){return this.atEOF?this.currentEndIndex:this.next.index+this.offset}get currentEndIndex(){return this.index>0?this.peek(-1).end+this.offset:0===this.tokens.length?this.input.length+this.offset:this.next.index+this.offset}get currentAbsoluteOffset(){return this.absoluteOffset+this.inputIndex}span(t,e){let s=this.currentEndIndex;if(void 0!==e&&e>this.currentEndIndex&&(s=e),t>s){let e=s;s=t,t=e}return new m(t,s)}sourceSpan(t,e){let s=`${t}@${this.inputIndex}:${e}`;return this.sourceSpanCache.has(s)||this.sourceSpanCache.set(s,this.span(t,e).toAbsolute(this.absoluteOffset)),this.sourceSpanCache.get(s)}advance(){this.index++}withContext(t,e){this.context|=t;let s=e();return this.context^=t,s}consumeOptionalCharacter(t){return!!this.next.isCharacter(t)&&(this.advance(),!0)}peekKeywordLet(){return this.next.isKeywordLet()}peekKeywordAs(){return this.next.isKeywordAs()}expectCharacter(t){this.consumeOptionalCharacter(t)||this.error(`Missing expected ${String.fromCharCode(t)}`)}consumeOptionalOperator(t){return!!this.next.isOperator(t)&&(this.advance(),!0)}expectOperator(t){this.consumeOptionalOperator(t)||this.error(`Missing expected operator ${t}`)}prettyPrintToken(t){return t===rt?"end of input":`token ${t}`}expectIdentifierOrKeyword(){let t=this.next;return t.isIdentifier()||t.isKeyword()?(this.advance(),t.toString()):(t.isPrivateIdentifier()?this._reportErrorForPrivateIdentifier(t,"expected identifier or keyword"):this.error(`Unexpected ${this.prettyPrintToken(t)}, expected identifier or keyword`),null)}expectIdentifierOrKeywordOrString(){let t=this.next;return t.isIdentifier()||t.isKeyword()||t.isString()?(this.advance(),t.toString()):(t.isPrivateIdentifier()?this._reportErrorForPrivateIdentifier(t,"expected identifier, keyword or string"):this.error(`Unexpected ${this.prettyPrintToken(t)}, expected identifier, keyword, or string`),"")}parseChain(){let t=[],e=this.inputIndex;for(;this.index<this.tokens.length;){let e=this.parsePipe();if(t.push(e),this.consumeOptionalCharacter(59))for(1&this.parseFlags||this.error("Binding expression cannot contain chained expression");this.consumeOptionalCharacter(59););else if(this.index<this.tokens.length){let t=this.index;if(this.error(`Unexpected token '${this.next}'`),this.index===t)break}}if(0===t.length){let t=this.offset,e=this.offset+this.input.length;return new C(this.span(t,e),this.sourceSpan(t,e))}return 1==t.length?t[0]:new O(this.span(e),this.sourceSpan(e),t)}parsePipe(){let t=this.inputIndex,e=this.parseExpression();if(this.consumeOptionalOperator("|")){1&this.parseFlags&&this.error("Cannot have a pipe in an action expression");do{let s,r,i=this.inputIndex,n=this.expectIdentifierOrKeyword();null!==n?s=this.sourceSpan(i):(n="",r=-1!==this.next.index?this.next.index:this.input.length+this.offset,s=new m(r,r).toAbsolute(this.absoluteOffset));let a=[];for(;this.consumeOptionalCharacter(58);)a.push(this.parseExpression());e=new T(this.span(t),this.sourceSpan(t,r),e,n,a,s)}while(this.consumeOptionalOperator("|"))}return e}parseExpression(){return this.parseConditional()}parseConditional(){let t=this.inputIndex,e=this.parseLogicalOr();if(this.consumeOptionalOperator("?")){let s,r=this.parsePipe();if(this.consumeOptionalCharacter(58))s=this.parsePipe();else{let e=this.inputIndex,r=this.input.substring(t,e);this.error(`Conditional expression ${r} requires all 3 expressions`),s=new C(this.span(t),this.sourceSpan(t))}return new E(this.span(t),this.sourceSpan(t),e,r,s)}return e}parseLogicalOr(){let t=this.inputIndex,e=this.parseLogicalAnd();for(;this.consumeOptionalOperator("||");){let s=this.parseLogicalAnd();e=new W(this.span(t),this.sourceSpan(t),"||",e,s)}return e}parseLogicalAnd(){let t=this.inputIndex,e=this.parseNullishCoalescing();for(;this.consumeOptionalOperator("&&");){let s=this.parseNullishCoalescing();e=new W(this.span(t),this.sourceSpan(t),"&&",e,s)}return e}parseNullishCoalescing(){let t=this.inputIndex,e=this.parseEquality();for(;this.consumeOptionalOperator("??");){let s=this.parseEquality();e=new W(this.span(t),this.sourceSpan(t),"??",e,s)}return e}parseEquality(){let t=this.inputIndex,e=this.parseRelational();for(;this.next.type==y.Operator;){let s=this.next.strValue;switch(s){case"==":case"===":case"!=":case"!==":this.advance();let r=this.parseRelational();e=new W(this.span(t),this.sourceSpan(t),s,e,r);continue}break}return e}parseRelational(){let t=this.inputIndex,e=this.parseAdditive();for(;this.next.type==y.Operator;){let s=this.next.strValue;switch(s){case"<":case">":case"<=":case">=":this.advance();let r=this.parseAdditive();e=new W(this.span(t),this.sourceSpan(t),s,e,r);continue}break}return e}parseAdditive(){let t=this.inputIndex,e=this.parseMultiplicative();for(;this.next.type==y.Operator;){let s=this.next.strValue;switch(s){case"+":case"-":this.advance();let r=this.parseMultiplicative();e=new W(this.span(t),this.sourceSpan(t),s,e,r);continue}break}return e}parseMultiplicative(){let t=this.inputIndex,e=this.parsePrefix();for(;this.next.type==y.Operator;){let s=this.next.strValue;switch(s){case"*":case"%":case"/":this.advance();let r=this.parsePrefix();e=new W(this.span(t),this.sourceSpan(t),s,e,r);continue}break}return e}parsePrefix(){if(this.next.type==y.Operator){let t,e=this.inputIndex;switch(this.next.strValue){case"+":return this.advance(),t=this.parsePrefix(),R.createPlus(this.span(e),this.sourceSpan(e),t);case"-":return this.advance(),t=this.parsePrefix(),R.createMinus(this.span(e),this.sourceSpan(e),t);case"!":return this.advance(),t=this.parsePrefix(),new U(this.span(e),this.sourceSpan(e),t)}}return this.parseCallChain()}parseCallChain(){let t=this.inputIndex,e=this.parsePrimary();for(;;)if(this.consumeOptionalCharacter(46))e=this.parseAccessMember(e,t,!1);else if(this.consumeOptionalOperator("?."))e=this.consumeOptionalCharacter(40)?this.parseCall(e,t,!0):this.consumeOptionalCharacter(91)?this.parseKeyedReadOrWrite(e,t,!0):this.parseAccessMember(e,t,!0);else if(this.consumeOptionalCharacter(91))e=this.parseKeyedReadOrWrite(e,t,!1);else if(this.consumeOptionalCharacter(40))e=this.parseCall(e,t,!1);else{if(!this.consumeOptionalOperator("!"))return e;e=new G(this.span(t),this.sourceSpan(t),e)}}parsePrimary(){let t=this.inputIndex;if(this.consumeOptionalCharacter(40)){this.rparensExpected++;let t=this.parsePipe();return this.rparensExpected--,this.expectCharacter(41),t}if(this.next.isKeywordNull())return this.advance(),new L(this.span(t),this.sourceSpan(t),null);if(this.next.isKeywordUndefined())return this.advance(),new L(this.span(t),this.sourceSpan(t),void 0);if(this.next.isKeywordTrue())return this.advance(),new L(this.span(t),this.sourceSpan(t),!0);if(this.next.isKeywordFalse())return this.advance(),new L(this.span(t),this.sourceSpan(t),!1);if(this.next.isKeywordThis())return this.advance(),new P(this.span(t),this.sourceSpan(t));if(this.consumeOptionalCharacter(91)){this.rbracketsExpected++;let e=this.parseExpressionList(93);return this.rbracketsExpected--,this.expectCharacter(93),new M(this.span(t),this.sourceSpan(t),e)}if(this.next.isCharacter(123))return this.parseLiteralMap();if(this.next.isIdentifier())return this.parseAccessMember(new k(this.span(t),this.sourceSpan(t)),t,!1);if(this.next.isNumber()){let e=this.next.toNumber();return this.advance(),new L(this.span(t),this.sourceSpan(t),e)}if(this.next.isString()){let e=this.next.toString();return this.advance(),new L(this.span(t),this.sourceSpan(t),e)}return this.next.isPrivateIdentifier()?(this._reportErrorForPrivateIdentifier(this.next,null),new C(this.span(t),this.sourceSpan(t))):this.index>=this.tokens.length?(this.error(`Unexpected end of expression: ${this.input}`),new C(this.span(t),this.sourceSpan(t))):(this.error(`Unexpected token ${this.next}`),new C(this.span(t),this.sourceSpan(t)))}parseExpressionList(t){let e=[];do{if(this.next.isCharacter(t))break;e.push(this.parsePipe())}while(this.consumeOptionalCharacter(44));return e}parseLiteralMap(){let t=[],e=[],s=this.inputIndex;if(this.expectCharacter(123),!this.consumeOptionalCharacter(125)){this.rbracesExpected++;do{let s=this.inputIndex,r=this.next.isString(),i=this.expectIdentifierOrKeywordOrString();if(t.push({key:i,quoted:r}),r)this.expectCharacter(58),e.push(this.parsePipe());else if(this.consumeOptionalCharacter(58))e.push(this.parsePipe());else{let t=this.span(s),r=this.sourceSpan(s);e.push(new I(t,r,r,new k(t,r),i))}}while(this.consumeOptionalCharacter(44)&&!this.next.isCharacter(125));this.rbracesExpected--,this.expectCharacter(125)}return new $(this.span(s),this.sourceSpan(s),t,e)}parseAccessMember(t,e,s){let r,i=this.inputIndex,n=this.withContext(pt.Writable,(()=>{let e=this.expectIdentifierOrKeyword()??"";return 0===e.length&&this.error("Expected identifier for property access",t.span.end),e})),a=this.sourceSpan(i);if(s)this.consumeOptionalOperator("=")?(this.error("The '?.' operator cannot be used in the assignment"),r=new C(this.span(e),this.sourceSpan(e))):r=new A(this.span(e),this.sourceSpan(e),a,t,n);else if(this.consumeOptionalOperator("=")){if(!(1&this.parseFlags))return this.error("Bindings cannot contain assignments"),new C(this.span(e),this.sourceSpan(e));let s=this.parseConditional();r=new b(this.span(e),this.sourceSpan(e),a,t,n,s)}else r=new I(this.span(e),this.sourceSpan(e),a,t,n);return r}parseCall(t,e,s){let r=this.inputIndex;this.rparensExpected++;let i=this.parseCallArguments(),n=this.span(r,this.inputIndex).toAbsolute(this.absoluteOffset);this.expectCharacter(41),this.rparensExpected--;let a=this.span(e),h=this.sourceSpan(e);return s?new F(a,h,t,i,n):new V(a,h,t,i,n)}parseCallArguments(){if(this.next.isCharacter(41))return[];let t=[];do{t.push(this.parsePipe())}while(this.consumeOptionalCharacter(44));return t}expectTemplateBindingKey(){let t="",e=!1,s=this.currentAbsoluteOffset;do{t+=this.expectIdentifierOrKeywordOrString(),e=this.consumeOptionalOperator("-"),e&&(t+="-")}while(e);return{source:t,span:new j(s,s+t.length)}}parseTemplateBindings(t){let e=[];for(e.push(...this.parseDirectiveKeywordBindings(t));this.index<this.tokens.length;){let s=this.parseLetBinding();if(s)e.push(s);else{let s=this.expectTemplateBindingKey(),r=this.parseAsBinding(s);r?e.push(r):(s.source=t.source+s.source.charAt(0).toUpperCase()+s.source.substring(1),e.push(...this.parseDirectiveKeywordBindings(s)))}this.consumeStatementTerminator()}return new ft(e,[],this.errors)}parseKeyedReadOrWrite(t,e,s){return this.withContext(pt.Writable,(()=>{this.rbracketsExpected++;let r=this.parsePipe();if(r instanceof C&&this.error("Key access cannot be empty"),this.rbracketsExpected--,this.expectCharacter(93),!this.consumeOptionalOperator("="))return s?new _(this.span(e),this.sourceSpan(e),t,r):new N(this.span(e),this.sourceSpan(e),t,r);if(!s){let s=this.parseConditional();return new K(this.span(e),this.sourceSpan(e),t,r,s)}return this.error("The '?.' operator cannot be used in the assignment"),new C(this.span(e),this.sourceSpan(e))}))}parseDirectiveKeywordBindings(t){let e=[];this.consumeOptionalCharacter(58);let s=this.getDirectiveBoundTarget(),r=this.currentAbsoluteOffset,i=this.parseAsBinding(t);i||(this.consumeStatementTerminator(),r=this.currentAbsoluteOffset);let n=new j(t.span.start,r);return e.push(new D(n,t,s)),i&&e.push(i),e}getDirectiveBoundTarget(){if(this.next===rt||this.peekKeywordAs()||this.peekKeywordLet())return null;let t=this.parsePipe(),{start:e,end:s}=t.span,r=this.input.substring(e,s);return new q(t,r,this.location,this.absoluteOffset+e,this.errors)}parseAsBinding(t){if(!this.peekKeywordAs())return null;this.advance();let e=this.expectTemplateBindingKey();this.consumeStatementTerminator();let s=new j(t.span.start,this.currentAbsoluteOffset);return new z(s,e,t)}parseLetBinding(){if(!this.peekKeywordLet())return null;let t=this.currentAbsoluteOffset;this.advance();let e=this.expectTemplateBindingKey(),s=null;this.consumeOptionalOperator("=")&&(s=this.expectTemplateBindingKey()),this.consumeStatementTerminator();let r=new j(t,this.currentAbsoluteOffset);return new z(r,e,s)}consumeStatementTerminator(){this.consumeOptionalCharacter(59)||this.consumeOptionalCharacter(44)}error(t,e=null){this.errors.push(new g(t,this.input,this.locationText(e),this.location)),this.skip()}locationText(t=null){return null==t&&(t=this.index),t<this.tokens.length?`at column ${this.tokens[t].index+1} in`:"at the end of the expression"}_reportErrorForPrivateIdentifier(t,e){let s=`Private identifiers are not supported. Unexpected private identifier: ${t}`;null!==e&&(s+=`, ${e}`),this.error(s)}skip(){let t=this.next;for(;!(!(this.index<this.tokens.length)||t.isCharacter(59)||t.isOperator("|")||!(this.rparensExpected<=0)&&t.isCharacter(41)||!(this.rbracesExpected<=0)&&t.isCharacter(125)||!(this.rbracketsExpected<=0)&&t.isCharacter(93)||this.context&pt.Writable&&t.isOperator("="));)this.next.isError()&&this.errors.push(new g(this.next.toString(),this.input,this.locationText(),this.location)),this.advance(),t=this.next}},yt=class extends Y{constructor(){super(...arguments),this.errors=[]}visitPipe(){this.errors.push("pipes")}};function gt({start:t,end:e},s){let r=t,i=e;for(;i!==r&&/\s/.test(s[i-1]);)i--;for(;r!==i&&/\s/.test(s[r]);)r++;return{start:r,end:i}}function mt({start:t,end:e},s){let r=t,i=e;for(;i!==s.length&&/\s/.test(s[i]);)i++;for(;0!==r&&/\s/.test(s[r-1]);)r--;return{start:r,end:i}}function wt(t,e){return"("===e[t.start-1]&&")"===e[t.end]?{start:t.start-1,end:t.end+1}:t}function St(t){return"string"==typeof t?e=>e===t:e=>t.test(e)}function Ct(t){let{start:e,end:s}=t;return{start:e,end:s,range:[e,s]}}var kt=t=>xt.prototype._commentStart(t);function Pt(t,e=!0){return s=>{let r=new Z,i=new xt(r),{text:n,comments:a}=function(t,e){let s=e?kt(t):null;if(null===s)return{text:t,comments:[]};let r={type:"CommentLine",value:t.slice(s+2),...Ct({start:s,end:t.length})};return{text:t.slice(0,s),comments:[r]}}(s,e),h=t(n,i);if(0!==h.errors.length){let[{message:t}]=h.errors;throw new SyntaxError(t.replace(/^Parser Error: | at column \d+ in [^]*$/g,""))}return{result:h,comments:a,text:n}}}var Ot=Pt(((t,e)=>e.parseBinding(t,"",0))),Et=(Pt(((t,e)=>e.parseSimpleBinding(t,"",0))),Pt(((t,e)=>e.parseAction(t,"",0)))),It=Pt(((t,e)=>e.parseInterpolationExpression(t,"",0))),bt=Pt(((t,e)=>e.parseTemplateBindings("",t,"",0,0)),!1),At=(t,e,s)=>{if(!t||null!=e)return Array.isArray(e)||"string"==typeof e?e[s<0?e.length+s:s]:e.at(s)},Nt=class{text;constructor(t){this.text=t}getCharacterIndex(t,e){return function(t,e,s){let r=St(e);for(let e=s;e<t.length;e++)if(r(t[e]))return e;throw new Error(`Cannot find character ${e} from index ${s} in ${JSON.stringify(t)}`)}(this.text,t,e)}getCharacterLastIndex(t,e){return function(t,e,s){let r=St(e);for(let e=s;e>=0;e--)if(r(t[e]))return e;throw new Error(`Cannot find front char ${e} from index ${s} in ${JSON.stringify(t)}`)}(this.text,t,e)}transformSpan(t,{stripSpaces:e=!1,hasParentParens:s=!1}={}){if(!e)return Ct(t);let{outerSpan:r,innerSpan:i,hasParens:n}=function(t,e,s){let r=0,i={start:t.start,end:t.end};for(;;){let t=mt(i,e),s=wt(t,e);if(t.start===s.start&&t.end===s.end)break;i.start=s.start,i.end=s.end,r++}return{hasParens:0!==(s?r-1:r),outerSpan:gt(s?{start:i.start+1,end:i.end-1}:i,e),innerSpan:gt(t,e)}}(t,this.text,s),a=Ct(i);return n&&(a.extra={parenthesized:!0,parenStart:r.start,parenEnd:r.end}),a}createNode(t,{stripSpaces:e=!0,hasParentParens:s=!1}={}){let{type:r,start:i,end:n}=t,a={...t,...this.transformSpan({start:i,end:n},{stripSpaces:e,hasParentParens:s})};switch(r){case"NumericLiteral":case"StringLiteral":{let t=this.text.slice(a.start,a.end),{value:e}=a;a.extra={...a.extra,raw:t,rawValue:e};break}case"ObjectProperty":{let{shorthand:t}=a;t&&(a.extra={...a.extra,shorthand:t});break}}return a}};function _t(t){var e;return!(null==(e=t.extra)||!e.parenthesized)}function Kt(t){return _t(t)?t.extra.parenStart:t.start}function Tt(t){return _t(t)?t.extra.parenEnd:t.end}function Lt(t){return("OptionalCallExpression"===t.type||"OptionalMemberExpression"===t.type)&&!_t(t)}function Mt(t,e){let{start:s,end:r}=t.sourceSpan;return s>=r||/^\s+$/.test(e.slice(s,r))}var $t,Bt,Wt,Rt,Ut,Gt,Vt,Ft=class extends Nt{constructor(t,e){super(e),o(this,Wt),o(this,$t),o(this,Bt),l(this,$t,t),l(this,Bt,e)}get node(){return c(this,Wt,Gt).call(this,h(this,$t))}transformNode(t){return c(this,Wt,Vt).call(this,t)}};function jt(t){return t instanceof D}function qt(t){return t instanceof z}$t=new WeakMap,Bt=new WeakMap,Wt=new WeakSet,Rt=function(t,{stripSpaces:e=!0,hasParentParens:s=!1}={}){return this.createNode(t,{stripSpaces:e,hasParentParens:s})},Ut=function(t,e,{computed:s,optional:r,end:i=Tt(e),hasParentParens:n=!1}){if(Mt(t,h(this,Bt))||t.sourceSpan.start===e.start)return e;let a=c(this,Wt,Gt).call(this,t),o=Lt(a);return c(this,Wt,Rt).call(this,{type:r||o?"OptionalMemberExpression":"MemberExpression",object:a,property:e,computed:s,...r?{optional:!0}:o?{optional:!1}:void 0,start:Kt(a),end:i},{hasParentParens:n})},Gt=function(t,e=!1){return c(this,Wt,Vt).call(this,t,e)},Vt=function(t,e=!1){if(t instanceof B){let{expressions:e}=t;if(1!==e.length)throw new Error("Unexpected 'Interpolation'");return c(this,Wt,Gt).call(this,e[0])}if(t instanceof R)return c(this,Wt,Rt).call(this,{type:"UnaryExpression",prefix:!0,argument:c(this,Wt,Gt).call(this,t.expr),operator:t.operator,...t.sourceSpan},{hasParentParens:e});if(t instanceof W){let{left:s,operation:r,right:i}=t,n=c(this,Wt,Gt).call(this,s),a=c(this,Wt,Gt).call(this,i),h={left:n,right:a,start:Kt(n),end:Tt(a)};return"&&"===r||"||"===r||"??"===r?c(this,Wt,Rt).call(this,{...h,type:"LogicalExpression",operator:r},{hasParentParens:e}):c(this,Wt,Rt).call(this,{...h,type:"BinaryExpression",operator:r},{hasParentParens:e})}if(t instanceof T){let{exp:s,name:r,args:i}=t,n=c(this,Wt,Gt).call(this,s),a=Kt(n),h=Tt(n),o=this.getCharacterIndex(/\S/,this.getCharacterIndex("|",h)+1),l=c(this,Wt,Rt).call(this,{type:"Identifier",name:r,start:o,end:o+r.length}),p=i.map((t=>c(this,Wt,Gt).call(this,t)));return c(this,Wt,Rt).call(this,{type:"NGPipeExpression",left:n,right:l,arguments:p,start:a,end:Tt(0===p.length?l:At(!1,p,-1))},{hasParentParens:e})}if(t instanceof O)return c(this,Wt,Rt).call(this,{type:"NGChainedExpression",expressions:t.expressions.map((t=>c(this,Wt,Gt).call(this,t))),...t.sourceSpan},{hasParentParens:e});if(t instanceof E){let{condition:s,trueExp:r,falseExp:i}=t,n=c(this,Wt,Gt).call(this,s),a=c(this,Wt,Gt).call(this,r),h=c(this,Wt,Gt).call(this,i);return c(this,Wt,Rt).call(this,{type:"ConditionalExpression",test:n,consequent:a,alternate:h,start:Kt(n),end:Tt(h)},{hasParentParens:e})}if(t instanceof C)return c(this,Wt,Rt).call(this,{type:"NGEmptyExpression",...t.sourceSpan},{hasParentParens:e});if(t instanceof k)return c(this,Wt,Rt).call(this,{type:"ThisExpression",...t.sourceSpan},{hasParentParens:e});if(t instanceof N||t instanceof _)return c(this,Wt,Ut).call(this,t.receiver,c(this,Wt,Gt).call(this,t.key),{computed:!0,optional:t instanceof _,end:t.sourceSpan.end,hasParentParens:e});if(t instanceof M)return c(this,Wt,Rt).call(this,{type:"ArrayExpression",elements:t.expressions.map((t=>c(this,Wt,Gt).call(this,t))),...t.sourceSpan},{hasParentParens:e});if(t instanceof $){let{keys:s,values:r}=t,i=r.map((t=>c(this,Wt,Gt).call(this,t))),n=s.map((({key:e,quoted:s},r)=>{let n=i[r],a=Kt(n),h=Tt(n),o=this.getCharacterIndex(/\S/,0===r?t.sourceSpan.start+1:this.getCharacterIndex(",",Tt(i[r-1]))+1),l={start:o,end:a===o?h:this.getCharacterLastIndex(/\S/,this.getCharacterLastIndex(":",a-1)-1)+1},p=s?c(this,Wt,Rt).call(this,{type:"StringLiteral",value:e,...l}):c(this,Wt,Rt).call(this,{type:"Identifier",name:e,...l}),u=p.end<p.start||o===a;return c(this,Wt,Rt).call(this,{type:"ObjectProperty",key:p,value:n,shorthand:u,computed:!1,start:Kt(p),end:h})}));return c(this,Wt,Rt).call(this,{type:"ObjectExpression",properties:n,...t.sourceSpan},{hasParentParens:e})}if(t instanceof L){let{value:s}=t;switch(typeof s){case"boolean":return c(this,Wt,Rt).call(this,{type:"BooleanLiteral",value:s,...t.sourceSpan},{hasParentParens:e});case"number":return c(this,Wt,Rt).call(this,{type:"NumericLiteral",value:s,...t.sourceSpan},{hasParentParens:e});case"object":return c(this,Wt,Rt).call(this,{type:"NullLiteral",...t.sourceSpan},{hasParentParens:e});case"string":return c(this,Wt,Rt).call(this,{type:"StringLiteral",value:s,...t.sourceSpan},{hasParentParens:e});case"undefined":return c(this,Wt,Rt).call(this,{type:"Identifier",name:"undefined",...t.sourceSpan},{hasParentParens:e});default:throw new Error("Unexpected LiteralPrimitive value type "+typeof s)}}if(t instanceof V||t instanceof F){let s=t instanceof F,{receiver:r,args:i}=t,n=1===i.length?[c(this,Wt,Gt).call(this,i[0],!0)]:i.map((t=>c(this,Wt,Gt).call(this,t))),a=c(this,Wt,Gt).call(this,r),h=Lt(a),o=s||h?"OptionalCallExpression":"CallExpression";return c(this,Wt,Rt).call(this,{type:o,callee:a,arguments:n,optional:"OptionalCallExpression"===o?s:void 0,start:Kt(a),end:t.sourceSpan.end},{hasParentParens:e})}if(t instanceof G){let s=c(this,Wt,Gt).call(this,t.expression);return c(this,Wt,Rt).call(this,{type:"TSNonNullExpression",expression:s,start:Kt(s),end:t.sourceSpan.end},{hasParentParens:e})}if(t instanceof U){let s=c(this,Wt,Gt).call(this,t.expression);return c(this,Wt,Rt).call(this,{type:"UnaryExpression",prefix:!0,operator:"!",argument:s,start:t.sourceSpan.start,end:Tt(s)},{hasParentParens:e})}if(t instanceof I||t instanceof A){let{receiver:s,name:r}=t,i=this.getCharacterLastIndex(/\S/,t.sourceSpan.end-1)+1,n=c(this,Wt,Rt).call(this,{type:"Identifier",name:r,start:i-r.length,end:i},Mt(s,h(this,Bt))?{hasParentParens:e}:{});return c(this,Wt,Ut).call(this,s,n,{computed:!1,optional:t instanceof A,hasParentParens:e})}if(t instanceof K){let s=c(this,Wt,Gt).call(this,t.key),r=c(this,Wt,Gt).call(this,t.value),i=c(this,Wt,Ut).call(this,t.receiver,s,{computed:!0,optional:!1,end:this.getCharacterIndex("]",Tt(s))+1});return c(this,Wt,Rt).call(this,{type:"AssignmentExpression",left:i,operator:"=",right:r,start:Kt(i),end:Tt(r)},{hasParentParens:e})}if(t instanceof b){let{receiver:s,name:r,value:i}=t,n=c(this,Wt,Gt).call(this,i),a=this.getCharacterLastIndex(/\S/,this.getCharacterLastIndex("=",Kt(n)-1)-1)+1,h=c(this,Wt,Rt).call(this,{type:"Identifier",name:r,start:a-r.length,end:a}),o=c(this,Wt,Ut).call(this,s,h,{computed:!1,optional:!1});return c(this,Wt,Rt).call(this,{type:"AssignmentExpression",left:o,operator:"=",right:n,start:Kt(o),end:Tt(n)},{hasParentParens:e})}throw Object.assign(new Error("Unexpected node"),{node:t})};var zt,Dt,Yt,Jt,Qt,Xt,Ht,Zt,te,ee,se,re,ie=class extends Ft{constructor(t,e){super(void 0,e),o(this,Yt),o(this,zt),o(this,Dt),l(this,zt,t),l(this,Dt,e);for(let e of t)c(this,Yt,te).call(this,e)}get expressions(){return c(this,Yt,se).call(this)}};function ne({result:{ast:t},text:e,comments:s}){return Object.assign(function(t,e){return new Ft(t,e).node}(t,e),{comments:s})}function ae({result:{templateBindings:t},text:e}){return function(t,e){return new ie(t,e).expressions}(t,e)}zt=new WeakMap,Dt=new WeakMap,Yt=new WeakSet,Jt=function(){return h(this,zt)[0].key},Qt=function(t,{stripSpaces:e=!0}={}){return this.createNode(t,{stripSpaces:e})},Xt=function(t){return this.transformNode(t)},Ht=function(t){return function(t){return t.slice(0,1).toLowerCase()+t.slice(1)}(t.slice(h(this,Yt,Jt).source.length))},Zt=function(t){let e=h(this,Dt);if('"'!==e[t.start]&&"'"!==e[t.start])return;let s=e[t.start],r=!1;for(let i=t.start+1;i<e.length;i++)switch(e[i]){case s:if(!r)return void(t.end=i+1);default:r=!1;break;case"\\":r=!r}},te=function(t){c(this,Yt,Zt).call(this,t.key.span),qt(t)&&t.value&&c(this,Yt,Zt).call(this,t.value.span)},ee=function(t){if(!t.value||t.value.source)return t.value;let e=this.getCharacterIndex(/\S/,t.sourceSpan.start);return{source:"$implicit",span:{start:e,end:e}}},se=function(){let t=h(this,zt),[e]=t,s=0===h(this,Dt).slice(e.sourceSpan.start,e.sourceSpan.end).trim().length?t.slice(1):t,r=[],i=null;for(let[t,e]of s.entries()){if(i&&jt(i)&&qt(e)&&e.value&&e.value.source===i.key.source){let t=c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:e.key.source,...e.key.span}),s=(t,e)=>({...t,...this.transformSpan({start:t.start,end:e})}),i=e=>({...s(e,t.end),alias:t}),n=r.pop();if("NGMicrosyntaxExpression"===n.type)r.push(i(n));else{if("NGMicrosyntaxKeyedExpression"!==n.type)throw new Error(`Unexpected type ${n.type}`);{let t=i(n.expression);r.push(s({...n,expression:t},t.end))}}}else r.push(c(this,Yt,re).call(this,e,t));i=e}return c(this,Yt,Qt).call(this,{type:"NGMicrosyntax",body:r,...0===r.length?t[0].sourceSpan:{start:r[0].start,end:At(!1,r,-1).end}})},re=function(t,e){if(jt(t)){let{key:s,value:r}=t;return r?0===e?c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxExpression",expression:c(this,Yt,Xt).call(this,r.ast),alias:null,...r.sourceSpan}):c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKeyedExpression",key:c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:c(this,Yt,Ht).call(this,s.source),...s.span}),expression:c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxExpression",expression:c(this,Yt,Xt).call(this,r.ast),alias:null,...r.sourceSpan}),start:s.span.start,end:r.sourceSpan.end}):c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:c(this,Yt,Ht).call(this,s.source),...s.span})}{let{key:e,sourceSpan:s}=t;if(/^let\s$/.test(h(this,Dt).slice(s.start,s.start+4))){let{value:r}=t;return c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxLet",key:c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:e.source,...e.span}),value:r?c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:r.source,...r.span}):null,start:s.start,end:r?r.span.end:e.span.end})}{let s=c(this,Yt,ee).call(this,t);return c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxAs",key:c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:s.source,...s.span}),alias:c(this,Yt,Qt).call(this,{type:"NGMicrosyntaxKey",name:e.source,...e.span}),start:s.span.start,end:e.span.end})}}};var he=t=>ne(Et(t));function oe(t){var e,s,r;let i=(null==(e=t.range)?void 0:e[0])??t.start,n=null==(r=(null==(s=t.declaration)?void 0:s.decorators)??t.decorators)?void 0:r[0];return n?Math.min(oe(n),i):i}function le(t){var e;return(null==(e=t.range)?void 0:e[1])??t.end}function ce(t){return{astFormat:"estree",parse(e){let s=t(e);return{type:"NGRoot",node:t===he&&"NGChainedExpression"!==s.type?{...s,type:"NGChainedExpression",expressions:[s]}:s}},locStart:oe,locEnd:le}}var pe=ce(he),ue=ce((t=>ne(Ot(t)))),de=ce((t=>ne(It(t)))),fe=ce((t=>ae(bt(t)))),xe=p}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,